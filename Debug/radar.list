
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001083c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08010a20  08010a20  00020a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ee4  08010ee4  00032a28  2**0
                  CONTENTS
  4 .ARM          00000000  08010ee4  08010ee4  00032a28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010ee4  08010ee4  00032a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ee4  08010ee4  00020ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ee8  08010ee8  00020ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  08010eec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  20002a28  08013914  00032a28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046c8  08013914  000346c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029517  00000000  00000000  00032a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004864  00000000  00000000  0005bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002408  00000000  00000000  000607d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002200  00000000  00000000  00062be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b0a  00000000  00000000  00064de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ff2  00000000  00000000  0008c8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f60  00000000  00000000  000b08dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa83c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abfc  00000000  00000000  001aa88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a28 	.word	0x20002a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010a04 	.word	0x08010a04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a2c 	.word	0x20002a2c
 800021c:	08010a04 	.word	0x08010a04

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000c32:	2301      	movs	r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	210f      	movs	r1, #15
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffdd 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c3e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c40:	68fb      	ldr	r3, [r7, #12]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <main+0xd4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
uint8_t message2[] ="message in";
 8000c58:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <main+0xd8>)
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c60:	c303      	stmia	r3!, {r0, r1}
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	3302      	adds	r3, #2
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	701a      	strb	r2, [r3, #0]
uint8_t lsm6dslError[] ="LSM6DSL whoAmI error";
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <main+0xdc>)
 8000c6c:	f107 0414 	add.w	r4, r7, #20
 8000c70:	461d      	mov	r5, r3
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c7a:	6020      	str	r0, [r4, #0]
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	7021      	strb	r1, [r4, #0]


// initialize command struct
control user_input;
user_input.mode_instructed = 'r'; // r:range, s:speed
 8000c80:	2372      	movs	r3, #114	; 0x72
 8000c82:	74bb      	strb	r3, [r7, #18]
user_input.mode_running = 'x'; // x:none
 8000c84:	2378      	movs	r3, #120	; 0x78
 8000c86:	74fb      	strb	r3, [r7, #19]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000c88:	2300      	movs	r3, #0
 8000c8a:	823b      	strh	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 f85d 	bl	8001d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f85c 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fae6 	bl	8001264 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f000 fa9e 	bl	80011d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c9c:	f000 f8a0 	bl	8000de0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ca0:	f000 f924 	bl	8000eec <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fa4a 	bl	800113c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f95a 	bl	8000f60 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000cac:	f00c fbc6 	bl	800d43c <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000cb0:	f000 f994 	bl	8000fdc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  set_VCO_input_DAC(&user_input); // starts timer and sets dac output used for VCO
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fcc3 	bl	8001644 <set_VCO_input_DAC>
  HAL_TIM_Base_Start(&htim1); // start timer 1 for adc1 conversion for radar mixer o/p
 8000cbe:	481b      	ldr	r0, [pc, #108]	; (8000d2c <main+0xe0>)
 8000cc0:	f007 fb1c 	bl	80082fc <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // sets output compare for timer1, sets PA10 to toggle on timer1 register reload (40kHz)
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <main+0xe0>)
 8000cc8:	f007 fc10 	bl	80084ec <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf_mixer_out, DMA_BUF_LEN); // start the adc with dma
 8000ccc:	2220      	movs	r2, #32
 8000cce:	4918      	ldr	r1, [pc, #96]	; (8000d30 <main+0xe4>)
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <main+0xe8>)
 8000cd2:	f001 fcb1 	bl	8002638 <HAL_ADC_Start_DMA>

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <main+0xec>)
 8000cd8:	603b      	str	r3, [r7, #0]
  dev_ctx.read_reg = platform_read;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0xf0>)
 8000cdc:	607b      	str	r3, [r7, #4]
  dev_ctx.handle = &hspi1;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <main+0xf4>)
 8000ce0:	60fb      	str	r3, [r7, #12]
  /* Check device ID */
    whoamI = 0;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <main+0xf8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4916      	ldr	r1, [pc, #88]	; (8000d44 <main+0xf8>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff9b 	bl	8000c28 <lsm6dsl_device_id_get>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (input_received_flag)
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <main+0xd4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00e      	beq.n	8000d18 <main+0xcc>
	  {
	 	    	process_input(&UserRxBufferFS,&user_input);
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <main+0xfc>)
 8000d02:	f000 fc0d 	bl	8001520 <process_input>
	 	    	set_VCO_input_DAC(&user_input);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fc9a 	bl	8001644 <set_VCO_input_DAC>
	 	    	//perform_trial(&user_input);
	 	        input_received_flag=0;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <main+0xd4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e7ec      	b.n	8000cf2 <main+0xa6>
	  }
	  else
	  {
	 	    	HAL_Delay(250);
 8000d18:	20fa      	movs	r0, #250	; 0xfa
 8000d1a:	f001 f887 	bl	8001e2c <HAL_Delay>
	  if (input_received_flag)
 8000d1e:	e7e8      	b.n	8000cf2 <main+0xa6>
 8000d20:	20003fa0 	.word	0x20003fa0
 8000d24:	08010a20 	.word	0x08010a20
 8000d28:	08010a2c 	.word	0x08010a2c
 8000d2c:	20002be8 	.word	0x20002be8
 8000d30:	20002c80 	.word	0x20002c80
 8000d34:	20002a44 	.word	0x20002a44
 8000d38:	080013ad 	.word	0x080013ad
 8000d3c:	08001409 	.word	0x08001409
 8000d40:	20002b84 	.word	0x20002b84
 8000d44:	20002cc0 	.word	0x20002cc0
 8000d48:	20002fa0 	.word	0x20002fa0

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	2238      	movs	r2, #56	; 0x38
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f00d f8cc 	bl	800def8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d72:	f005 faf9 	bl	8006368 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d84:	2303      	movs	r3, #3
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000d90:	230c      	movs	r3, #12
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fb85 	bl	80064b0 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000dac:	f000 fc96 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2303      	movs	r3, #3
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f005 fe89 	bl	8006ae0 <HAL_RCC_ClockConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 fc82 	bl	80016dc <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3750      	adds	r7, #80	; 0x50
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2220      	movs	r2, #32
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00d f87d 	bl	800def8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfe:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e20:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e48:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e50:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000e86:	f001 fa15 	bl	80022b4 <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e90:	f000 fc24 	bl	80016dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000ea0:	f002 fa04 	bl	80032ac <HAL_ADCEx_MultiModeConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000eaa:	f000 fc17 	bl	80016dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_ADC1_Init+0x108>)
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eba:	237f      	movs	r3, #127	; 0x7f
 8000ebc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_ADC1_Init+0x104>)
 8000ecc:	f001 fc92 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000ed6:	f000 fc01 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	; 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20002a44 	.word	0x20002a44
 8000ee8:	04300002 	.word	0x04300002

08000eec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2230      	movs	r2, #48	; 0x30
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00c fffd 	bl	800def8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_DAC1_Init+0x6c>)
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <MX_DAC1_Init+0x70>)
 8000f02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_DAC1_Init+0x6c>)
 8000f06:	f002 fbe8 	bl	80036da <HAL_DAC_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f10:	f000 fbe4 	bl	80016dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f14:	2302      	movs	r3, #2
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f24:	2312      	movs	r3, #18
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_DAC1_Init+0x6c>)
 8000f40:	f002 fdbe 	bl	8003ac0 <HAL_DAC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000f4a:	f000 fbc7 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3730      	adds	r7, #48	; 0x30
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20002b10 	.word	0x20002b10
 8000f5c:	50000800 	.word	0x50000800

08000f60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_SPI1_Init+0x78>)
 8000f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f96:	2220      	movs	r2, #32
 8000f98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000fae:	2207      	movs	r2, #7
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_SPI1_Init+0x74>)
 8000fc0:	f006 f9c8 	bl	8007354 <HAL_SPI_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 fb87 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20002b84 	.word	0x20002b84
 8000fd8:	40013000 	.word	0x40013000

08000fdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	; 0x70
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2234      	movs	r2, #52	; 0x34
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f00c ff6e 	bl	800def8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101c:	4b45      	ldr	r3, [pc, #276]	; (8001134 <MX_TIM1_Init+0x158>)
 800101e:	4a46      	ldr	r2, [pc, #280]	; (8001138 <MX_TIM1_Init+0x15c>)
 8001020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <MX_TIM1_Init+0x158>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <MX_TIM1_Init+0x158>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1199;
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MX_TIM1_Init+0x158>)
 8001030:	f240 42af 	movw	r2, #1199	; 0x4af
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MX_TIM1_Init+0x158>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <MX_TIM1_Init+0x158>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_TIM1_Init+0x158>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001048:	483a      	ldr	r0, [pc, #232]	; (8001134 <MX_TIM1_Init+0x158>)
 800104a:	f007 f8ff 	bl	800824c <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001054:	f000 fb42 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001062:	4619      	mov	r1, r3
 8001064:	4833      	ldr	r0, [pc, #204]	; (8001134 <MX_TIM1_Init+0x158>)
 8001066:	f007 fbcd 	bl	8008804 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001070:	f000 fb34 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001074:	482f      	ldr	r0, [pc, #188]	; (8001134 <MX_TIM1_Init+0x158>)
 8001076:	f007 f9d8 	bl	800842a <HAL_TIM_OC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001080:	f000 fb2c 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001084:	2320      	movs	r3, #32
 8001086:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001090:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001094:	4619      	mov	r1, r3
 8001096:	4827      	ldr	r0, [pc, #156]	; (8001134 <MX_TIM1_Init+0x158>)
 8001098:	f008 f954 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010a2:	f000 fb1b 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80010a6:	2330      	movs	r3, #48	; 0x30
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b2:	2300      	movs	r3, #0
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010c6:	2208      	movs	r2, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_TIM1_Init+0x158>)
 80010cc:	f007 fb20 	bl	8008710 <HAL_TIM_OC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010d6:	f000 fb01 	bl	80016dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_TIM1_Init+0x158>)
 8001118:	f008 f9aa 	bl	8009470 <HAL_TIMEx_ConfigBreakDeadTime>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001122:	f000 fadb 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001126:	4803      	ldr	r0, [pc, #12]	; (8001134 <MX_TIM1_Init+0x158>)
 8001128:	f000 fc70 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 800112c:	bf00      	nop
 800112e:	3770      	adds	r7, #112	; 0x70
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20002be8 	.word	0x20002be8
 8001138:	40012c00 	.word	0x40012c00

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_TIM2_Init+0x98>)
 800115c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001160:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM2_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1543;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001170:	f240 6207 	movw	r2, #1543	; 0x607
 8001174:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001182:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_TIM2_Init+0x98>)
 8001184:	f007 f862 	bl	800824c <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800118e:	f000 faa5 	bl	80016dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM2_Init+0x98>)
 80011a0:	f007 fb30 	bl	8008804 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011aa:	f000 fa97 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ae:	2320      	movs	r3, #32
 80011b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_TIM2_Init+0x98>)
 80011bc:	f008 f8c2 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011c6:	f000 fa89 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20002c34 	.word	0x20002c34

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_DMA_Init+0x88>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_DMA_Init+0x88>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6493      	str	r3, [r2, #72]	; 0x48
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_DMA_Init+0x88>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_DMA_Init+0x88>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	4a19      	ldr	r2, [pc, #100]	; (8001260 <MX_DMA_Init+0x88>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6493      	str	r3, [r2, #72]	; 0x48
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_DMA_Init+0x88>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_DMA_Init+0x88>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <MX_DMA_Init+0x88>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6493      	str	r3, [r2, #72]	; 0x48
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_DMA_Init+0x88>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200b      	movs	r0, #11
 800122c:	f002 fa21 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001230:	200b      	movs	r0, #11
 8001232:	f002 fa38 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2038      	movs	r0, #56	; 0x38
 800123c:	f002 fa19 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001240:	2038      	movs	r0, #56	; 0x38
 8001242:	f002 fa30 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	205e      	movs	r0, #94	; 0x5e
 800124c:	f002 fa11 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001250:	205e      	movs	r0, #94	; 0x5e
 8001252:	f002 fa28 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127a:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <MX_GPIO_Init+0x140>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <MX_GPIO_Init+0x140>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x140>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c8:	4837      	ldr	r0, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x144>)
 80012ca:	f003 fadf 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f003 fad8 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012dc:	2303      	movs	r3, #3
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	482d      	ldr	r0, [pc, #180]	; (80013a8 <MX_GPIO_Init+0x144>)
 80012f2:	f003 f949 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <MX_GPIO_Init+0x144>)
 8001310:	f003 f93a 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131a:	2312      	movs	r3, #18
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f003 f928 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134a:	2304      	movs	r3, #4
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f003 f916 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 800135c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f003 f906 	bl	8004588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2006      	movs	r0, #6
 8001382:	f002 f976 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001386:	2006      	movs	r0, #6
 8001388:	f002 f98d 	bl	80036a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2007      	movs	r0, #7
 8001392:	f002 f96e 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001396:	2007      	movs	r0, #7
 8001398:	f002 f985 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400

080013ac <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	461a      	mov	r2, r3
 80013b8:	460b      	mov	r3, r1
 80013ba:	72fb      	strb	r3, [r7, #11]
 80013bc:	4613      	mov	r3, r2
 80013be:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f003 fa5f 	bl	800488c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 2);
 80013ce:	f107 010b 	add.w	r1, r7, #11
 80013d2:	2302      	movs	r3, #2
 80013d4:	2201      	movs	r2, #1
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <platform_write+0x58>)
 80013d8:	f006 f867 	bl	80074aa <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) bufp, len, 1000);
 80013dc:	893a      	ldrh	r2, [r7, #8]
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <platform_write+0x58>)
 80013e6:	f006 f860 	bl	80074aa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f003 fa4a 	bl	800488c <HAL_GPIO_WritePin>
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20002b84 	.word	0x20002b84

08001408 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	461a      	mov	r2, r3
 8001414:	460b      	mov	r3, r1
 8001416:	72fb      	strb	r3, [r7, #11]
 8001418:	4613      	mov	r3, r2
 800141a:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001422:	b2db      	uxtb	r3, r3
 8001424:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 8001426:	2300      	movs	r3, #0
 8001428:	757b      	strb	r3, [r7, #21]
	// get spi state
	HAL_SPI_StateTypeDef tmp_state;
	tmp_state = HAL_SPI_GetState(handle);
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f006 fc56 	bl	8007cdc <HAL_SPI_GetState>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]

	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f003 fa25 	bl	800488c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(handle, &tx_data, bufp, len + 1);
 8001442:	893b      	ldrh	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	f107 0114 	add.w	r1, r7, #20
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f006 f99a 	bl	8007788 <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
    while(HAL_SPI_GetState(handle) != tmp_state);
 8001454:	bf00      	nop
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f006 fc40 	bl	8007cdc <HAL_SPI_GetState>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	4293      	cmp	r3, r2
 8001464:	d1f7      	bne.n	8001456 <platform_read+0x4e>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f003 fa0c 	bl	800488c <HAL_GPIO_WritePin>
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_SPI_RxCpltCallback+0x1c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20002cc1 	.word	0x20002cc1

080014a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_SPI_TxRxCpltCallback+0x1c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20002cc1 	.word	0x20002cc1

080014c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 80014c8:	2310      	movs	r3, #16
 80014ca:	73fb      	strb	r3, [r7, #15]
	uint8_t halfIndex = len-1;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]
//	memcpy(tx_buffer[halfIndex],adc1_dma_buf_mixer_out[halfIndex],len);
	CDC_Transmit_FS(&adc1_dma_buf_mixer_out[len], len);
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x30>)
 80014d8:	4413      	add	r3, r2
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	b292      	uxth	r2, r2
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00c f883 	bl	800d5ec <CDC_Transmit_FS>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20002c80 	.word	0x20002c80

080014f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 80014fc:	2310      	movs	r3, #16
 80014fe:	73fb      	strb	r3, [r7, #15]
	uint8_t halfIndex = len-1;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3b01      	subs	r3, #1
 8001504:	73bb      	strb	r3, [r7, #14]
//	memcpy(tx_buffer[0],adc1_dma_buf_mixer_out[0],len);
	CDC_Transmit_FS(&adc1_dma_buf_mixer_out[0], len);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4619      	mov	r1, r3
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800150e:	f00c f86d 	bl	800d5ec <CDC_Transmit_FS>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20002c80 	.word	0x20002c80

08001520 <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 8001520:	b4b0      	push	{r4, r5, r7}
 8001522:	b093      	sub	sp, #76	; 0x4c
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	uint8_t messageIn[] ="processing input";
 800152a:	4b42      	ldr	r3, [pc, #264]	; (8001634 <process_input+0x114>)
 800152c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	7023      	strb	r3, [r4, #0]
	uint8_t messageComplete[] ="processing complete";
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <process_input+0x118>)
 800153c:	f107 0418 	add.w	r4, r7, #24
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	6023      	str	r3, [r4, #0]
//	CDC_Transmit_FS(messageIn,sizeof(messageIn));
	uint8_t mode[]={'m','o','d','e',':'};
 800154a:	4a3c      	ldr	r2, [pc, #240]	; (800163c <process_input+0x11c>)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001554:	6018      	str	r0, [r3, #0]
 8001556:	3304      	adds	r3, #4
 8001558:	7019      	strb	r1, [r3, #0]
    uint8_t time[] = {'t','i','m','e',':'};
 800155a:	4a39      	ldr	r2, [pc, #228]	; (8001640 <process_input+0x120>)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	7019      	strb	r1, [r3, #0]
    int i = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
    int j = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
    // check input to ensure "mode:" is received
    while (arr[i]==mode[i]) {
 8001572:	e002      	b.n	800157a <process_input+0x5a>
        i++;
 8001574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001576:	3301      	adds	r3, #1
 8001578:	647b      	str	r3, [r7, #68]	; 0x44
    while (arr[i]==mode[i]) {
 800157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	f107 0110 	add.w	r1, r7, #16
 8001586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001588:	440b      	add	r3, r1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d0f1      	beq.n	8001574 <process_input+0x54>
    }
    // set mode in command
    pControl->mode_instructed=arr[i];
 8001590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	709a      	strb	r2, [r3, #2]
    // move index past command for mode and '\n'
    while (arr[i]!='t') {
 800159c:	e002      	b.n	80015a4 <process_input+0x84>
        i++;
 800159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a0:	3301      	adds	r3, #1
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
    while (arr[i]!='t') {
 80015a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b74      	cmp	r3, #116	; 0x74
 80015ae:	d1f6      	bne.n	800159e <process_input+0x7e>
    }
    // check input to ensure "time:" is received
    while (arr[i]==time[j]) {
 80015b0:	e005      	b.n	80015be <process_input+0x9e>
        i++;
 80015b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b4:	3301      	adds	r3, #1
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
        j++;
 80015b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ba:	3301      	adds	r3, #1
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
    while (arr[i]==time[j]) {
 80015be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015cc:	440b      	add	r3, r1
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d0ee      	beq.n	80015b2 <process_input+0x92>
    }
    // set j to index one past first digit of command for time
    j=i+1;
 80015d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d6:	3301      	adds	r3, #1
 80015d8:	643b      	str	r3, [r7, #64]	; 0x40
    // get index of last digit
    while (arr[j]!='\n') {
 80015da:	e002      	b.n	80015e2 <process_input+0xc2>
        j++;
 80015dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015de:	3301      	adds	r3, #1
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
    while (arr[j]!='\n') {
 80015e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	d1f6      	bne.n	80015dc <process_input+0xbc>
    }
    // set runt time to zero
    pControl->run_time_sec=0;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	801a      	strh	r2, [r3, #0]
    // add each digits value,
    // *10 to shift current value left one digit for adding next digit
    // -48 converts from ascii to int
    while (i < j) {
 80015f4:	e014      	b.n	8001620 <process_input+0x100>
        pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	440b      	add	r3, r1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b29b      	uxth	r3, r3
 8001612:	3b30      	subs	r3, #48	; 0x30
 8001614:	b29a      	uxth	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	801a      	strh	r2, [r3, #0]
        i++;
 800161a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800161c:	3301      	adds	r3, #1
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
    while (i < j) {
 8001620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001624:	429a      	cmp	r2, r3
 8001626:	dbe6      	blt.n	80015f6 <process_input+0xd6>
    }
//	CDC_Transmit_FS(messageComplete,sizeof(messageComplete));
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	374c      	adds	r7, #76	; 0x4c
 800162e:	46bd      	mov	sp, r7
 8001630:	bcb0      	pop	{r4, r5, r7}
 8001632:	4770      	bx	lr
 8001634:	08010a44 	.word	0x08010a44
 8001638:	08010a58 	.word	0x08010a58
 800163c:	08010a6c 	.word	0x08010a6c
 8001640:	08010a74 	.word	0x08010a74

08001644 <set_VCO_input_DAC>:

void set_VCO_input_DAC(control *ctrl_ptr) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running==ctrl_ptr->mode_instructed) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	78da      	ldrb	r2, [r3, #3]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	429a      	cmp	r2, r3
 8001656:	d035      	beq.n	80016c4 <set_VCO_input_DAC+0x80>
		return;
	}

	  /* Set DAC_CH_1 to CTune or VTune based on user input for mode, defaults to range(r)*/
	if (ctrl_ptr->mode_instructed=='r')
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	2b72      	cmp	r3, #114	; 0x72
 800165e:	d117      	bne.n	8001690 <set_VCO_input_DAC+0x4c>
	{
		// if currently running in other mode, turn it off
		if (ctrl_ptr->mode_running=='s') {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	78db      	ldrb	r3, [r3, #3]
 8001664:	2b73      	cmp	r3, #115	; 0x73
 8001666:	d103      	bne.n	8001670 <set_VCO_input_DAC+0x2c>
			HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001668:	2100      	movs	r1, #0
 800166a:	4818      	ldr	r0, [pc, #96]	; (80016cc <set_VCO_input_DAC+0x88>)
 800166c:	f002 f8aa 	bl	80037c4 <HAL_DAC_Stop>
		}
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001678:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <set_VCO_input_DAC+0x8c>)
 800167a:	2100      	movs	r1, #0
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <set_VCO_input_DAC+0x88>)
 800167e:	f002 f8bf 	bl	8003800 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 8001682:	4814      	ldr	r0, [pc, #80]	; (80016d4 <set_VCO_input_DAC+0x90>)
 8001684:	f006 fe3a 	bl	80082fc <HAL_TIM_Base_Start>
		ctrl_ptr->mode_running='r';
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2272      	movs	r2, #114	; 0x72
 800168c:	70da      	strb	r2, [r3, #3]
 800168e:	e01a      	b.n	80016c6 <set_VCO_input_DAC+0x82>
	}
	else
	{
		if (ctrl_ptr->mode_running=='r') {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	78db      	ldrb	r3, [r3, #3]
 8001694:	2b72      	cmp	r3, #114	; 0x72
 8001696:	d106      	bne.n	80016a6 <set_VCO_input_DAC+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001698:	2100      	movs	r1, #0
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <set_VCO_input_DAC+0x88>)
 800169c:	f002 f97e 	bl	800399c <HAL_DAC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2);
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <set_VCO_input_DAC+0x90>)
 80016a2:	f006 fe9b 	bl	80083dc <HAL_TIM_Base_Stop>

		}
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80016a6:	2100      	movs	r1, #0
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <set_VCO_input_DAC+0x88>)
 80016aa:	f002 f838 	bl	800371e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <set_VCO_input_DAC+0x94>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <set_VCO_input_DAC+0x88>)
 80016b8:	f002 f9bb 	bl	8003a32 <HAL_DAC_SetValue>
		ctrl_ptr->mode_running='s';
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2273      	movs	r2, #115	; 0x73
 80016c0:	70da      	strb	r2, [r3, #3]
 80016c2:	e000      	b.n	80016c6 <set_VCO_input_DAC+0x82>
		return;
 80016c4:	bf00      	nop
	}
}
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20002b10 	.word	0x20002b10
 80016d0:	20000004 	.word	0x20000004
 80016d4:	20002c34 	.word	0x20002c34
 80016d8:	20000000 	.word	0x20000000

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_MspInit+0x44>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_MspInit+0x44>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6613      	str	r3, [r2, #96]	; 0x60
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_MspInit+0x44>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_MspInit+0x44>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_MspInit+0x44>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	; 0x58
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_MspInit+0x44>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b09e      	sub	sp, #120	; 0x78
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2254      	movs	r2, #84	; 0x54
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00c fbd1 	bl	800def8 <memset>
  if(hadc->Instance==ADC1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175e:	d160      	bne.n	8001822 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001764:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800176a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fba1 	bl	8006eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800177c:	f7ff ffae 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_ADC_MspInit+0xfc>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_ADC_MspInit+0xfc>)
 8001786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_ADC_MspInit+0xfc>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_ADC_MspInit+0xfc>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	4a23      	ldr	r2, [pc, #140]	; (800182c <HAL_ADC_MspInit+0xfc>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_ADC_MspInit+0xfc>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = mixer_op_filtered_Pin;
 80017b0:	2301      	movs	r3, #1
 80017b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(mixer_op_filtered_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f002 fedf 	bl	8004588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_ADC_MspInit+0x104>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017d2:	2205      	movs	r2, #5
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_ADC_MspInit+0x100>)
 80017fa:	2220      	movs	r2, #32
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_ADC_MspInit+0x100>)
 8001800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <HAL_ADC_MspInit+0x100>)
 8001808:	f002 fb8c 	bl	8003f24 <HAL_DMA_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001812:	f7ff ff63 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a05      	ldr	r2, [pc, #20]	; (8001830 <HAL_ADC_MspInit+0x100>)
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_ADC_MspInit+0x100>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3778      	adds	r7, #120	; 0x78
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	20002ab0 	.word	0x20002ab0
 8001834:	40020408 	.word	0x40020408

08001838 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <HAL_DAC_MspInit+0xcc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d150      	bne.n	80018fc <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_DAC_MspInit+0xd0>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a2a      	ldr	r2, [pc, #168]	; (8001908 <HAL_DAC_MspInit+0xd0>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_DAC_MspInit+0xd0>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_DAC_MspInit+0xd0>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <HAL_DAC_MspInit+0xd0>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_DAC_MspInit+0xd0>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800188a:	2310      	movs	r3, #16
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f002 fe72 	bl	8004588 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_DAC_MspInit+0xd8>)
 80018a8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018ac:	2206      	movs	r2, #6
 80018ae:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018b2:	2210      	movs	r2, #16
 80018b4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018d4:	2220      	movs	r2, #32
 80018d6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80018e0:	480a      	ldr	r0, [pc, #40]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018e2:	f002 fb1f 	bl	8003f24 <HAL_DMA_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80018ec:	f7ff fef6 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <HAL_DAC_MspInit+0xd4>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	50000800 	.word	0x50000800
 8001908:	40021000 	.word	0x40021000
 800190c:	20002b24 	.word	0x20002b24
 8001910:	40020008 	.word	0x40020008

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_SPI_MspInit+0x8c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d130      	bne.n	8001998 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_SPI_MspInit+0x90>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_SPI_MspInit+0x90>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_SPI_MspInit+0x90>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_SPI_MspInit+0x90>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <HAL_SPI_MspInit+0x90>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_SPI_MspInit+0x90>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23e0      	movs	r3, #224	; 0xe0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001976:	2305      	movs	r3, #5
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f002 fe00 	bl	8004588 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2023      	movs	r0, #35	; 0x23
 800198e:	f001 fe70 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001992:	2023      	movs	r0, #35	; 0x23
 8001994:	f001 fe87 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_TIM_Base_MspInit+0x5c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10c      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_TIM_Base_MspInit+0x60>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <HAL_TIM_Base_MspInit+0x60>)
 80019c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c4:	6613      	str	r3, [r2, #96]	; 0x60
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_TIM_Base_MspInit+0x60>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019d2:	e010      	b.n	80019f6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d10b      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_Base_MspInit+0x60>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_TIM_Base_MspInit+0x60>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_TIM_Base_MspInit+0x60>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_TIM_MspPostInit+0x68>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d11d      	bne.n	8001a6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_TIM_MspPostInit+0x6c>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_TIM_MspPostInit+0x6c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_TIM_MspPostInit+0x6c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a58:	2306      	movs	r3, #6
 8001a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f002 fd8f 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40021000 	.word	0x40021000

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f992 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f002 fef1 	bl	80048bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}

08001ade <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f002 feea 	bl	80048bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA1_Channel1_IRQHandler+0x10>)
 8001af2:	f002 fbfa 	bl	80042ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20002b24 	.word	0x20002b24

08001b00 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <USB_LP_IRQHandler+0x10>)
 8001b06:	f003 f803 	bl	8004b10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200041a4 	.word	0x200041a4

08001b14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <SPI1_IRQHandler+0x10>)
 8001b1a:	f005 ffc1 	bl	8007aa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20002b84 	.word	0x20002b84

08001b28 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <DMA2_Channel1_IRQHandler+0x10>)
 8001b2e:	f002 fbdc 	bl	80042ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20002ab0 	.word	0x20002ab0

08001b3c <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
	return 1;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_kill>:

int _kill(int pid, int sig)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b64:	f00c f990 	bl	800de88 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2216      	movs	r2, #22
 8001b6c:	601a      	str	r2, [r3, #0]
	return -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_exit>:

void _exit (int status)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b82:	f04f 31ff 	mov.w	r1, #4294967295
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffe7 	bl	8001b5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b8c:	e7fe      	b.n	8001b8c <_exit+0x12>

08001b8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e00a      	b.n	8001bb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba0:	f3af 8000 	nop.w
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dbf0      	blt.n	8001ba0 <_read+0x12>
	}

return len;
 8001bbe:	687b      	ldr	r3, [r7, #4]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e009      	b.n	8001bee <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	60ba      	str	r2, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbf1      	blt.n	8001bda <_write+0x12>
	}
	return len;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_close>:

int _close(int file)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c28:	605a      	str	r2, [r3, #4]
	return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_isatty>:

int _isatty(int file)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f00c f8f6 	bl	800de88 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20020000 	.word	0x20020000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	20002cc4 	.word	0x20002cc4
 8001cd0:	200046c8 	.word	0x200046c8

08001cd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0b      	ldr	r4, [pc, #44]	; (8001d44 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d22:	f7ff ffd7 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f00c f8b5 	bl	800de94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2a:	f7fe ff8f 	bl	8000c4c <main>

08001d2e <LoopForever>:

LoopForever:
    b LoopForever
 8001d2e:	e7fe      	b.n	8001d2e <LoopForever>
  ldr   r0, =_estack
 8001d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d38:	20002a28 	.word	0x20002a28
  ldr r2, =_sidata
 8001d3c:	08010eec 	.word	0x08010eec
  ldr r2, =_sbss
 8001d40:	20002a28 	.word	0x20002a28
  ldr r4, =_ebss
 8001d44:	200046c8 	.word	0x200046c8

08001d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC1_2_IRQHandler>

08001d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f001 fc81 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f000 f80e 	bl	8001d7c <HAL_InitTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e001      	b.n	8001d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d6c:	f7ff fcbc 	bl	80016e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d70:	79fb      	ldrb	r3, [r7, #7]

}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_InitTick+0x68>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d022      	beq.n	8001dd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_InitTick+0x6c>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_InitTick+0x68>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fc8c 	bl	80036c2 <HAL_SYSTICK_Config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	d809      	bhi.n	8001dca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db6:	2200      	movs	r2, #0
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbe:	f001 fc58 	bl	8003672 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <HAL_InitTick+0x70>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e004      	b.n	8001dda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200026dc 	.word	0x200026dc
 8001de8:	200026d4 	.word	0x200026d4
 8001dec:	200026d8 	.word	0x200026d8

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x20>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_IncTick+0x1c>)
 8001e00:	6013      	str	r3, [r2, #0]
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20002cc8 	.word	0x20002cc8
 8001e10:	200026dc 	.word	0x200026dc

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20002cc8 	.word	0x20002cc8

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d004      	beq.n	8001e50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_Delay+0x40>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e50:	bf00      	nop
 8001e52:	f7ff ffdf 	bl	8001e14 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d8f7      	bhi.n	8001e52 <HAL_Delay+0x26>
  {
  }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200026dc 	.word	0x200026dc

08001e70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LL_ADC_SetOffset+0x44>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	03fff000 	.word	0x03fff000

08001f20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3360      	adds	r3, #96	; 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3360      	adds	r3, #96	; 0x60
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b087      	sub	sp, #28
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3360      	adds	r3, #96	; 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	; 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3330      	adds	r3, #48	; 0x30
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	211f      	movs	r1, #31
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 011f 	and.w	r1, r3, #31
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002092:	b480      	push	{r7}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3314      	adds	r3, #20
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0e5b      	lsrs	r3, r3, #25
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0d1b      	lsrs	r3, r3, #20
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2107      	movs	r1, #7
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	0d1b      	lsrs	r3, r3, #20
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10a      	bne.n	8002112 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002110:	e00a      	b.n	8002128 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	43db      	mvns	r3, r3
 8002120:	401a      	ands	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	407f0000 	.word	0x407f0000

08002138 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6093      	str	r3, [r2, #8]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218c:	d101      	bne.n	8002192 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <LL_ADC_IsEnabled+0x18>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <LL_ADC_IsEnabled+0x1a>
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800224e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d101      	bne.n	800227e <LL_ADC_REG_IsConversionOngoing+0x18>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d101      	bne.n	80022a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1af      	b.n	800262e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fa27 	bl	8001730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff3f 	bl	8002178 <LL_ADC_IsDeepPowerDownEnabled>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff25 	bl	8002154 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff5a 	bl	80021c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff3e 	bl	80021a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002324:	4b9f      	ldr	r3, [pc, #636]	; (80025a4 <HAL_ADC_Init+0x2f0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	4a9f      	ldr	r2, [pc, #636]	; (80025a8 <HAL_ADC_Init+0x2f4>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002338:	e002      	b.n	8002340 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3b01      	subs	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff3c 	bl	80021c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	f043 0210 	orr.w	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff75 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 800237c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8148 	bne.w	800261c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8144 	bne.w	800261c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800239c:	f043 0202 	orr.w	r2, r3, #2
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff35 	bl	8002218 <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d141      	bne.n	8002438 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_Init+0x114>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_ADC_Init+0x2f8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d10f      	bne.n	80023e8 <HAL_ADC_Init+0x134>
 80023c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023cc:	f7ff ff24 	bl	8002218 <LL_ADC_IsEnabled>
 80023d0:	4604      	mov	r4, r0
 80023d2:	4876      	ldr	r0, [pc, #472]	; (80025ac <HAL_ADC_Init+0x2f8>)
 80023d4:	f7ff ff20 	bl	8002218 <LL_ADC_IsEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	4323      	orrs	r3, r4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	e012      	b.n	800240e <HAL_ADC_Init+0x15a>
 80023e8:	4871      	ldr	r0, [pc, #452]	; (80025b0 <HAL_ADC_Init+0x2fc>)
 80023ea:	f7ff ff15 	bl	8002218 <LL_ADC_IsEnabled>
 80023ee:	4604      	mov	r4, r0
 80023f0:	4870      	ldr	r0, [pc, #448]	; (80025b4 <HAL_ADC_Init+0x300>)
 80023f2:	f7ff ff11 	bl	8002218 <LL_ADC_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	431c      	orrs	r4, r3
 80023fa:	486f      	ldr	r0, [pc, #444]	; (80025b8 <HAL_ADC_Init+0x304>)
 80023fc:	f7ff ff0c 	bl	8002218 <LL_ADC_IsEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	4323      	orrs	r3, r4
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d012      	beq.n	8002438 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241a:	d004      	beq.n	8002426 <HAL_ADC_Init+0x172>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a62      	ldr	r2, [pc, #392]	; (80025ac <HAL_ADC_Init+0x2f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_ADC_Init+0x176>
 8002426:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_ADC_Init+0x308>)
 8002428:	e000      	b.n	800242c <HAL_ADC_Init+0x178>
 800242a:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_ADC_Init+0x30c>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f7ff fd1c 	bl	8001e70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7f5b      	ldrb	r3, [r3, #29]
 800243c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002442:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002448:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800244e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002456:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002462:	2b01      	cmp	r3, #1
 8002464:	d106      	bne.n	8002474 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	045b      	lsls	r3, r3, #17
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_ADC_Init+0x310>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fed1 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 80024c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fede 	bl	800228c <LL_ADC_INJ_IsConversionOngoing>
 80024d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d17f      	bne.n	80025d8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d17c      	bne.n	80025d8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024fa:	f023 0302 	bic.w	r3, r3, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	430b      	orrs	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d017      	beq.n	8002540 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800251e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002528:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6911      	ldr	r1, [r2, #16]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800253e:	e013      	b.n	8002568 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800254e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002564:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256e:	2b01      	cmp	r3, #1
 8002570:	d12a      	bne.n	80025c8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002588:	4311      	orrs	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002594:	430a      	orrs	r2, r1
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	e019      	b.n	80025d8 <HAL_ADC_Init+0x324>
 80025a4:	200026d4 	.word	0x200026d4
 80025a8:	053e2d63 	.word	0x053e2d63
 80025ac:	50000100 	.word	0x50000100
 80025b0:	50000400 	.word	0x50000400
 80025b4:	50000500 	.word	0x50000500
 80025b8:	50000600 	.word	0x50000600
 80025bc:	50000300 	.word	0x50000300
 80025c0:	50000700 	.word	0x50000700
 80025c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10c      	bne.n	80025fa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f023 010f 	bic.w	r1, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	1e5a      	subs	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
 80025f8:	e007      	b.n	800260a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 020f 	bic.w	r2, r2, #15
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	65da      	str	r2, [r3, #92]	; 0x5c
 800261a:	e007      	b.n	800262c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	f043 0210 	orr.w	r2, r3, #16
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800262c:	7ffb      	ldrb	r3, [r7, #31]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	bf00      	nop

08002638 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264c:	d004      	beq.n	8002658 <HAL_ADC_Start_DMA+0x20>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5a      	ldr	r2, [pc, #360]	; (80027bc <HAL_ADC_Start_DMA+0x184>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_ADC_Start_DMA+0x24>
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_ADC_Start_DMA+0x188>)
 800265a:	e000      	b.n	800265e <HAL_ADC_Start_DMA+0x26>
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_ADC_Start_DMA+0x18c>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fd6a 	bl	8002138 <LL_ADC_GetMultimode>
 8002664:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fdfb 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 809b 	bne.w	80027ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start_DMA+0x4e>
 8002682:	2302      	movs	r3, #2
 8002684:	e096      	b.n	80027b4 <HAL_ADC_Start_DMA+0x17c>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4d      	ldr	r2, [pc, #308]	; (80027c8 <HAL_ADC_Start_DMA+0x190>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d008      	beq.n	80026aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d002      	beq.n	80026aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	d17a      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fce2 	bl	8003074 <ADC_Enable>
 80026b0:	4603      	mov	r3, r0
 80026b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d16d      	bne.n	8002796 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <HAL_ADC_Start_DMA+0x184>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_ADC_Start_DMA+0xb4>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_ADC_Start_DMA+0x194>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d002      	beq.n	80026e8 <HAL_ADC_Start_DMA+0xb0>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	e003      	b.n	80026f0 <HAL_ADC_Start_DMA+0xb8>
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_ADC_Start_DMA+0x198>)
 80026ea:	e001      	b.n	80026f0 <HAL_ADC_Start_DMA+0xb8>
 80026ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d002      	beq.n	80026fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f023 0206 	bic.w	r2, r3, #6
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	661a      	str	r2, [r3, #96]	; 0x60
 8002722:	e002      	b.n	800272a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	4a29      	ldr	r2, [pc, #164]	; (80027d4 <HAL_ADC_Start_DMA+0x19c>)
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <HAL_ADC_Start_DMA+0x1a0>)
 8002738:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_ADC_Start_DMA+0x1a4>)
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	221c      	movs	r2, #28
 8002748:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0210 	orr.w	r2, r2, #16
 8002760:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3340      	adds	r3, #64	; 0x40
 800277c:	4619      	mov	r1, r3
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f001 fc77 	bl	8004074 <HAL_DMA_Start_IT>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fd55 	bl	800223e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002794:	e00d      	b.n	80027b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800279e:	e008      	b.n	80027b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80027ac:	e001      	b.n	80027b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	50000100 	.word	0x50000100
 80027c0:	50000300 	.word	0x50000300
 80027c4:	50000700 	.word	0x50000700
 80027c8:	50000600 	.word	0x50000600
 80027cc:	50000500 	.word	0x50000500
 80027d0:	50000400 	.word	0x50000400
 80027d4:	08003139 	.word	0x08003139
 80027d8:	08003211 	.word	0x08003211
 80027dc:	0800322d 	.word	0x0800322d

080027e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b0b6      	sub	sp, #216	; 0xd8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800280e:	2b01      	cmp	r3, #1
 8002810:	d102      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x24>
 8002812:	2302      	movs	r3, #2
 8002814:	f000 bc13 	b.w	800303e <HAL_ADC_ConfigChannel+0x84a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd1e 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 83f3 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f7ff fbfb 	bl	800203a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fd0c 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 800284e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fd18 	bl	800228c <LL_ADC_INJ_IsConversionOngoing>
 800285c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 81d9 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800286a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 81d4 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800287c:	d10f      	bne.n	800289e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	4619      	mov	r1, r3
 800288a:	f7ff fc02 	bl	8002092 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fba9 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>
 800289c:	e00e      	b.n	80028bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f7ff fbf1 	bl	8002092 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb99 	bl	8001fee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	08db      	lsrs	r3, r3, #3
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d022      	beq.n	8002924 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028ee:	f7ff faf3 	bl	8001ed8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6919      	ldr	r1, [r3, #16]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	461a      	mov	r2, r3
 8002900:	f7ff fb3f 	bl	8001f82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6919      	ldr	r1, [r3, #16]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	7f1b      	ldrb	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_ADC_ConfigChannel+0x126>
 8002914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002918:	e000      	b.n	800291c <HAL_ADC_ConfigChannel+0x128>
 800291a:	2300      	movs	r3, #0
 800291c:	461a      	mov	r2, r3
 800291e:	f7ff fb4b 	bl	8001fb8 <LL_ADC_SetOffsetSaturation>
 8002922:	e17b      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff faf8 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x15c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff faed 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 021f 	and.w	r2, r3, #31
 800294e:	e01e      	b.n	800298e <HAL_ADC_ConfigChannel+0x19a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fae2 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800296e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e004      	b.n	800298c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x1b2>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	e018      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1e4>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e004      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fab1 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fa95 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x222>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa8a 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	e01e      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x260>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fa7f 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e004      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x278>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	e018      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x2aa>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e004      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fa4e 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa32 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x2e8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fa27 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	e01e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x326>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fa1c 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e004      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x33e>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	e016      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x36c>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e004      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d106      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9ed 	bl	8001f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2103      	movs	r1, #3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f9d1 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x3aa>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2103      	movs	r1, #3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f9c6 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	e017      	b.n	8002bce <HAL_ADC_ConfigChannel+0x3da>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f9bb 	bl	8001f20 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x3f2>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0e9b      	lsrs	r3, r3, #26
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	e011      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x416>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2103      	movs	r1, #3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f998 	bl	8001f4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff faf9 	bl	8002218 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 813d 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f7ff fa54 	bl	80020e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4aa2      	ldr	r2, [pc, #648]	; (8002ed0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f040 812e 	bne.w	8002ea8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x480>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	3301      	adds	r3, #1
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	bf94      	ite	ls
 8002c6c:	2301      	movls	r3, #1
 8002c6e:	2300      	movhi	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e019      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x4b4>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2b09      	cmp	r3, #9
 8002ca0:	bf94      	ite	ls
 8002ca2:	2301      	movls	r3, #1
 8002ca4:	2300      	movhi	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d079      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x4d4>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	069b      	lsls	r3, r3, #26
 8002cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc6:	e015      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x500>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x520>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	e017      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x550>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x576>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	051b      	lsls	r3, r3, #20
 8002d68:	e018      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d82:	2320      	movs	r3, #32
 8002d84:	e003      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	e07e      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x5c8>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	069b      	lsls	r3, r3, #26
 8002db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dba:	e015      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x5f4>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x614>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	e017      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x644>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	61fb      	str	r3, [r7, #28]
  return result;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e003      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x670>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b1e      	subs	r3, #30
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e62:	e01b      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x6a8>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	613b      	str	r3, [r7, #16]
  return result;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f003 021f 	and.w	r2, r3, #31
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	3b1e      	subs	r3, #30
 8002e96:	051b      	lsls	r3, r3, #20
 8002e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6892      	ldr	r2, [r2, #8]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7ff f8f5 	bl	8002092 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80be 	beq.w	8003032 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ebe:	d004      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x6d6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6ec>
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <HAL_ADC_ConfigChannel+0x6e8>)
 8002ecc:	e009      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x6ee>
 8002ece:	bf00      	nop
 8002ed0:	407f0000 	.word	0x407f0000
 8002ed4:	80080000 	.word	0x80080000
 8002ed8:	50000100 	.word	0x50000100
 8002edc:	50000300 	.word	0x50000300
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ffea 	bl	8001ebc <LL_ADC_GetCommonPathInternalCh>
 8002ee8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a56      	ldr	r2, [pc, #344]	; (800304c <HAL_ADC_ConfigChannel+0x858>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0x70c>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_ADC_ConfigChannel+0x85c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d13a      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d134      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f14:	d005      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x72e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4e      	ldr	r2, [pc, #312]	; (8003054 <HAL_ADC_ConfigChannel+0x860>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f040 8085 	bne.w	800302c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2a:	d004      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x742>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a49      	ldr	r2, [pc, #292]	; (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x746>
 8002f36:	4a49      	ldr	r2, [pc, #292]	; (800305c <HAL_ADC_ConfigChannel+0x868>)
 8002f38:	e000      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x748>
 8002f3a:	4a43      	ldr	r2, [pc, #268]	; (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8002f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe ffa5 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f4c:	4b44      	ldr	r3, [pc, #272]	; (8003060 <HAL_ADC_ConfigChannel+0x86c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	4a44      	ldr	r2, [pc, #272]	; (8003064 <HAL_ADC_ConfigChannel+0x870>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f66:	e002      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f9      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f74:	e05a      	b.n	800302c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3b      	ldr	r2, [pc, #236]	; (8003068 <HAL_ADC_ConfigChannel+0x874>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d125      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7d8>
 8002f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11f      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a31      	ldr	r2, [pc, #196]	; (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d104      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7ac>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a34      	ldr	r2, [pc, #208]	; (800306c <HAL_ADC_ConfigChannel+0x878>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d047      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x7c0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x7c4>
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <HAL_ADC_ConfigChannel+0x868>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x7c6>
 8002fb8:	4a23      	ldr	r2, [pc, #140]	; (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8002fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fe ff66 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fca:	e031      	b.n	8003030 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a27      	ldr	r2, [pc, #156]	; (8003070 <HAL_ADC_ConfigChannel+0x87c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12d      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d127      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff4:	d004      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x80c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_ADC_ConfigChannel+0x864>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x810>
 8003000:	4a16      	ldr	r2, [pc, #88]	; (800305c <HAL_ADC_ConfigChannel+0x868>)
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x812>
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_ADC_ConfigChannel+0x854>)
 8003006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f7fe ff40 	bl	8001e96 <LL_ADC_SetCommonPathInternalCh>
 8003016:	e00c      	b.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800302a:	e002      	b.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003030:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800303a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800303e:	4618      	mov	r0, r3
 8003040:	37d8      	adds	r7, #216	; 0xd8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	50000700 	.word	0x50000700
 800304c:	c3210000 	.word	0xc3210000
 8003050:	90c00010 	.word	0x90c00010
 8003054:	50000600 	.word	0x50000600
 8003058:	50000100 	.word	0x50000100
 800305c:	50000300 	.word	0x50000300
 8003060:	200026d4 	.word	0x200026d4
 8003064:	053e2d63 	.word	0x053e2d63
 8003068:	c7520000 	.word	0xc7520000
 800306c:	50000500 	.word	0x50000500
 8003070:	cb840000 	.word	0xcb840000

08003074 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f8c9 	bl	8002218 <LL_ADC_IsEnabled>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d14d      	bne.n	8003128 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	4b28      	ldr	r3, [pc, #160]	; (8003134 <ADC_Enable+0xc0>)
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e039      	b.n	800312a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f898 	bl	80021f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030c0:	f7fe fea8 	bl	8001e14 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c6:	e028      	b.n	800311a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f8a3 	bl	8002218 <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f887 	bl	80021f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030e2:	f7fe fe97 	bl	8001e14 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d914      	bls.n	800311a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d00d      	beq.n	800311a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	f043 0210 	orr.w	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e007      	b.n	800312a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d1cf      	bne.n	80030c8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	8000003f 	.word	0x8000003f

08003138 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800314e:	2b00      	cmp	r3, #0
 8003150:	d14b      	bne.n	80031ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d021      	beq.n	80031b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe ff4f 	bl	8002014 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d032      	beq.n	80031e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d12b      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11f      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80031ae:	e018      	b.n	80031e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d111      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7fe f96c 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031e8:	e00e      	b.n	8003208 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff faf2 	bl	80027e0 <HAL_ADC_ErrorCallback>
}
 80031fc:	e004      	b.n	8003208 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7fe f968 	bl	80014f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	f043 0204 	orr.w	r2, r3, #4
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff fac4 	bl	80027e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <LL_ADC_IsEnabled>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsEnabled+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsEnabled+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b0a1      	sub	sp, #132	; 0x84
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0e7      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032d2:	2300      	movs	r3, #0
 80032d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032d6:	2300      	movs	r3, #0
 80032d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e2:	d102      	bne.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032e4:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	e009      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6e      	ldr	r2, [pc, #440]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d102      	bne.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	e001      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0be      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ffb1 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003324:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ffab 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 80a0 	bne.w	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 809c 	bne.w	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003348:	d004      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a55      	ldr	r2, [pc, #340]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003354:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003356:	e000      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003358:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800335a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d04b      	beq.n	80033fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003376:	035b      	lsls	r3, r3, #13
 8003378:	430b      	orrs	r3, r1
 800337a:	431a      	orrs	r2, r3
 800337c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003388:	d004      	beq.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a45      	ldr	r2, [pc, #276]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10f      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003394:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003398:	f7ff ff62 	bl	8003260 <LL_ADC_IsEnabled>
 800339c:	4604      	mov	r4, r0
 800339e:	4841      	ldr	r0, [pc, #260]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033a0:	f7ff ff5e 	bl	8003260 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033b4:	483c      	ldr	r0, [pc, #240]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033b6:	f7ff ff53 	bl	8003260 <LL_ADC_IsEnabled>
 80033ba:	4604      	mov	r4, r0
 80033bc:	483b      	ldr	r0, [pc, #236]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033be:	f7ff ff4f 	bl	8003260 <LL_ADC_IsEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	431c      	orrs	r4, r3
 80033c6:	483c      	ldr	r0, [pc, #240]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033c8:	f7ff ff4a 	bl	8003260 <LL_ADC_IsEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4323      	orrs	r3, r4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d056      	beq.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033fa:	e047      	b.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003406:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003410:	d004      	beq.n	800341c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10f      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800341c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003420:	f7ff ff1e 	bl	8003260 <LL_ADC_IsEnabled>
 8003424:	4604      	mov	r4, r0
 8003426:	481f      	ldr	r0, [pc, #124]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003428:	f7ff ff1a 	bl	8003260 <LL_ADC_IsEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	4323      	orrs	r3, r4
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e012      	b.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800343c:	481a      	ldr	r0, [pc, #104]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800343e:	f7ff ff0f 	bl	8003260 <LL_ADC_IsEnabled>
 8003442:	4604      	mov	r4, r0
 8003444:	4819      	ldr	r0, [pc, #100]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003446:	f7ff ff0b 	bl	8003260 <LL_ADC_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	431c      	orrs	r4, r3
 800344e:	481a      	ldr	r0, [pc, #104]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003450:	f7ff ff06 	bl	8003260 <LL_ADC_IsEnabled>
 8003454:	4603      	mov	r3, r0
 8003456:	4323      	orrs	r3, r4
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800346e:	f023 030f 	bic.w	r3, r3, #15
 8003472:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003474:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003476:	e009      	b.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800348a:	e000      	b.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800348c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003496:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800349a:	4618      	mov	r0, r3
 800349c:	3784      	adds	r7, #132	; 0x84
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	50000100 	.word	0x50000100
 80034a8:	50000400 	.word	0x50000400
 80034ac:	50000500 	.word	0x50000500
 80034b0:	50000300 	.word	0x50000300
 80034b4:	50000700 	.word	0x50000700
 80034b8:	50000600 	.word	0x50000600

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
         );
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff29 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff40 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff90 	bl	80035b0 <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5f 	bl	800355c <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff33 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa4 	bl	8003618 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e014      	b.n	8003716 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	791b      	ldrb	r3, [r3, #4]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fe f89b 	bl	8001838 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	795b      	ldrb	r3, [r3, #5]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_DAC_Start+0x16>
 8003730:	2302      	movs	r3, #2
 8003732:	e043      	b.n	80037bc <HAL_DAC_Start+0x9e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2201      	movs	r2, #1
 800374e:	409a      	lsls	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003758:	2001      	movs	r0, #1
 800375a:	f7fe fb67 	bl	8001e2c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10f      	bne.n	8003784 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800376e:	2b02      	cmp	r3, #2
 8003770:	d11d      	bne.n	80037ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e014      	b.n	80037ae <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2102      	movs	r1, #2
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	429a      	cmp	r2, r3
 800379c:	d107      	bne.n	80037ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0202 	orr.w	r2, r2, #2
 80037ac:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2201      	movs	r2, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43da      	mvns	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	400a      	ands	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7fe fb1e 	bl	8001e2c <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	795b      	ldrb	r3, [r3, #5]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_DAC_Start_DMA+0x1e>
 800381a:	2302      	movs	r3, #2
 800381c:	e0ae      	b.n	800397c <HAL_DAC_Start_DMA+0x17c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2202      	movs	r2, #2
 8003828:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d12f      	bne.n	8003890 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a53      	ldr	r2, [pc, #332]	; (8003984 <HAL_DAC_Start_DMA+0x184>)
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_DAC_Start_DMA+0x188>)
 800383e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a51      	ldr	r2, [pc, #324]	; (800398c <HAL_DAC_Start_DMA+0x18c>)
 8003846:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003856:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d013      	beq.n	8003886 <HAL_DAC_Start_DMA+0x86>
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d845      	bhi.n	80038f0 <HAL_DAC_Start_DMA+0xf0>
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_DAC_Start_DMA+0x72>
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d005      	beq.n	800387c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003870:	e03e      	b.n	80038f0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3308      	adds	r3, #8
 8003878:	613b      	str	r3, [r7, #16]
        break;
 800387a:	e03c      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	613b      	str	r3, [r7, #16]
        break;
 8003884:	e037      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3310      	adds	r3, #16
 800388c:	613b      	str	r3, [r7, #16]
        break;
 800388e:	e032      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a3e      	ldr	r2, [pc, #248]	; (8003990 <HAL_DAC_Start_DMA+0x190>)
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <HAL_DAC_Start_DMA+0x194>)
 800389e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <HAL_DAC_Start_DMA+0x198>)
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d013      	beq.n	80038e6 <HAL_DAC_Start_DMA+0xe6>
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d817      	bhi.n	80038f4 <HAL_DAC_Start_DMA+0xf4>
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_DAC_Start_DMA+0xd2>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d005      	beq.n	80038dc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80038d0:	e010      	b.n	80038f4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3314      	adds	r3, #20
 80038d8:	613b      	str	r3, [r7, #16]
        break;
 80038da:	e00c      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3318      	adds	r3, #24
 80038e2:	613b      	str	r3, [r7, #16]
        break;
 80038e4:	e007      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	331c      	adds	r3, #28
 80038ec:	613b      	str	r3, [r7, #16]
        break;
 80038ee:	e002      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038f4:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800390a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6898      	ldr	r0, [r3, #8]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	f000 fbad 	bl	8004074 <HAL_DMA_Start_IT>
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]
 800391e:	e010      	b.n	8003942 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800392e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68d8      	ldr	r0, [r3, #12]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	f000 fb9b 	bl	8004074 <HAL_DMA_Start_IT>
 800393e:	4603      	mov	r3, r0
 8003940:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2201      	movs	r2, #1
 800395c:	409a      	lsls	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f7fe fa60 	bl	8001e2c <HAL_Delay>
 800396c:	e005      	b.n	800397a <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	08003e11 	.word	0x08003e11
 8003988:	08003e33 	.word	0x08003e33
 800398c:	08003e4f 	.word	0x08003e4f
 8003990:	08003eb9 	.word	0x08003eb9
 8003994:	08003edb 	.word	0x08003edb
 8003998:	08003ef7 	.word	0x08003ef7

0800399c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6819      	ldr	r1, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	400a      	ands	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2201      	movs	r2, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	400a      	ands	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7fe fa23 	bl	8001e2c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fbba 	bl	800416a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00c      	b.n	8003a22 <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fbac 	bl	800416a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003a20:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e004      	b.n	8003a6c <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3314      	adds	r3, #20
 8003a6a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	795b      	ldrb	r3, [r3, #5]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DAC_ConfigChannel+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e192      	b.n	8003dfe <HAL_DAC_ConfigChannel+0x33e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d174      	bne.n	8003bd6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003aec:	f7fe f992 	bl	8001e14 <HAL_GetTick>
 8003af0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d134      	bne.n	8003b62 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003af8:	e011      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003afa:	f7fe f98b 	bl	8001e14 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d90a      	bls.n	8003b1e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f043 0208 	orr.w	r2, r3, #8
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2203      	movs	r2, #3
 8003b18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e16f      	b.n	8003dfe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e6      	bne.n	8003afa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f7fe f97d 	bl	8001e2c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b3c:	e01e      	b.n	8003b7c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b3e:	f7fe f969 	bl	8001e14 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d90a      	bls.n	8003b62 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f043 0208 	orr.w	r2, r3, #8
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e14d      	b.n	8003dfe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dbe8      	blt.n	8003b3e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7fe f95d 	bl	8001e2c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	ea02 0103 	and.w	r1, r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	21ff      	movs	r1, #255	; 0xff
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	ea02 0103 	and.w	r1, r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d11d      	bne.n	8003c1a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	221f      	movs	r2, #31
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2207      	movs	r2, #7
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	4013      	ands	r3, r2
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	e00f      	b.n	8003c64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d102      	bne.n	8003c52 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	e008      	b.n	8003c64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	e001      	b.n	8003c64 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	6a3a      	ldr	r2, [r7, #32]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	4013      	ands	r3, r2
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <HAL_DAC_ConfigChannel+0x1d8>
 8003c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c96:	e000      	b.n	8003c9a <HAL_DAC_ConfigChannel+0x1da>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	795b      	ldrb	r3, [r3, #5]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <HAL_DAC_ConfigChannel+0x204>
 8003cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc2:	e000      	b.n	8003cc6 <HAL_DAC_ConfigChannel+0x206>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d114      	bne.n	8003d06 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003cdc:	f003 f89c 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8003ce0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4a48      	ldr	r2, [pc, #288]	; (8003e08 <HAL_DAC_ConfigChannel+0x348>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d904      	bls.n	8003cf4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf2:	e00f      	b.n	8003d14 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4a45      	ldr	r2, [pc, #276]	; (8003e0c <HAL_DAC_ConfigChannel+0x34c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d90a      	bls.n	8003d12 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	e006      	b.n	8003d14 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	e000      	b.n	8003d14 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003d12:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4313      	orrs	r3, r2
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	400a      	ands	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	4013      	ands	r3, r2
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d88:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	22c0      	movs	r2, #192	; 0xc0
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	ea02 0103 	and.w	r1, r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	09896800 	.word	0x09896800
 8003e0c:	04c4b400 	.word	0x04c4b400

08003e10 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7ff fe2f 	bl	8003a82 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	711a      	strb	r2, [r3, #4]
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff fe28 	bl	8003a96 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f043 0204 	orr.w	r2, r3, #4
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fe1e 	bl	8003aaa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	711a      	strb	r2, [r3, #4]
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ffd8 	bl	8003e7c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	711a      	strb	r2, [r3, #4]
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff ffd1 	bl	8003e90 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ffc7 	bl	8003ea4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	711a      	strb	r2, [r3, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e08d      	b.n	8004052 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_DMA_Init+0x138>)
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d80f      	bhi.n	8003f62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b45      	ldr	r3, [pc, #276]	; (8004060 <HAL_DMA_Init+0x13c>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a45      	ldr	r2, [pc, #276]	; (8004064 <HAL_DMA_Init+0x140>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a42      	ldr	r2, [pc, #264]	; (8004068 <HAL_DMA_Init+0x144>)
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f60:	e00e      	b.n	8003f80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <HAL_DMA_Init+0x148>)
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a3d      	ldr	r2, [pc, #244]	; (8004064 <HAL_DMA_Init+0x140>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	009a      	lsls	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a3c      	ldr	r2, [pc, #240]	; (8004070 <HAL_DMA_Init+0x14c>)
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa76 	bl	80044c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe0:	d102      	bne.n	8003fe8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ffc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <HAL_DMA_Init+0x104>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b04      	cmp	r3, #4
 800400c:	d80c      	bhi.n	8004028 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa96 	bl	8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	e008      	b.n	800403a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40020407 	.word	0x40020407
 8004060:	bffdfff8 	.word	0xbffdfff8
 8004064:	cccccccd 	.word	0xcccccccd
 8004068:	40020000 	.word	0x40020000
 800406c:	bffdfbf8 	.word	0xbffdfbf8
 8004070:	40020400 	.word	0x40020400

08004074 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_DMA_Start_IT+0x20>
 8004090:	2302      	movs	r3, #2
 8004092:	e066      	b.n	8004162 <HAL_DMA_Start_IT+0xee>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d155      	bne.n	8004154 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f9bb 	bl	8004448 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 020e 	orr.w	r2, r2, #14
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e00f      	b.n	800410c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0204 	bic.w	r2, r2, #4
 80040fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 020a 	orr.w	r2, r2, #10
 800410a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004128:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004140:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e005      	b.n	8004160 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800415c:	2302      	movs	r3, #2
 800415e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d005      	beq.n	800418e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2204      	movs	r2, #4
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
 800418c:	e037      	b.n	80041fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 020e 	bic.w	r2, r2, #14
 800419c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f003 021f 	and.w	r2, r3, #31
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2101      	movs	r1, #1
 80041cc:	fa01 f202 	lsl.w	r2, r1, r2
 80041d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00c      	beq.n	80041fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d00d      	beq.n	8004250 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2204      	movs	r2, #4
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e047      	b.n	80042e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 020e 	bic.w	r2, r2, #14
 800425e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800429c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
    }
  }
  return status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2204      	movs	r2, #4
 800430c:	409a      	lsls	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d026      	beq.n	8004364 <HAL_DMA_IRQHandler+0x7a>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d021      	beq.n	8004364 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0204 	bic.w	r2, r2, #4
 800433c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f003 021f 	and.w	r2, r3, #31
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	2104      	movs	r1, #4
 800434c:	fa01 f202 	lsl.w	r2, r1, r2
 8004350:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	2b00      	cmp	r3, #0
 8004358:	d071      	beq.n	800443e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004362:	e06c      	b.n	800443e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2202      	movs	r2, #2
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02e      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d029      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 020a 	bic.w	r2, r2, #10
 800439e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2102      	movs	r1, #2
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d038      	beq.n	800443e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043d4:	e033      	b.n	800443e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2208      	movs	r2, #8
 80043e0:	409a      	lsls	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02a      	beq.n	8004440 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d025      	beq.n	8004440 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 020e 	bic.w	r2, r2, #14
 8004402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f202 	lsl.w	r2, r1, r2
 8004416:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800443e:	bf00      	nop
 8004440:	bf00      	nop
}
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800445e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f202 	lsl.w	r2, r1, r2
 8004484:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b10      	cmp	r3, #16
 8004494:	d108      	bne.n	80044a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044a6:	e007      	b.n	80044b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d802      	bhi.n	80044de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e001      	b.n	80044e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3b08      	subs	r3, #8
 80044ee:	4a12      	ldr	r2, [pc, #72]	; (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	009a      	lsls	r2, r3, #2
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	461a      	mov	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a0b      	ldr	r2, [pc, #44]	; (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800450e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2201      	movs	r2, #1
 8004518:	409a      	lsls	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40020407 	.word	0x40020407
 8004530:	40020800 	.word	0x40020800
 8004534:	40020820 	.word	0x40020820
 8004538:	cccccccd 	.word	0xcccccccd
 800453c:	40020880 	.word	0x40020880

08004540 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a08      	ldr	r2, [pc, #32]	; (8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004562:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3b01      	subs	r3, #1
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2201      	movs	r2, #1
 800456e:	409a      	lsls	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	1000823f 	.word	0x1000823f
 8004584:	40020940 	.word	0x40020940

08004588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004596:	e15a      	b.n	800484e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2101      	movs	r1, #1
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	fa01 f303 	lsl.w	r3, r1, r3
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 814c 	beq.w	8004848 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d005      	beq.n	80045c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d130      	bne.n	800462a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045fe:	2201      	movs	r2, #1
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	f003 0201 	and.w	r2, r3, #1
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b03      	cmp	r3, #3
 8004634:	d017      	beq.n	8004666 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2203      	movs	r2, #3
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d123      	bne.n	80046ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	08da      	lsrs	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3208      	adds	r2, #8
 800467a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	220f      	movs	r2, #15
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	08da      	lsrs	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3208      	adds	r2, #8
 80046b4:	6939      	ldr	r1, [r7, #16]
 80046b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0203 	and.w	r2, r3, #3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80a6 	beq.w	8004848 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fc:	4b5b      	ldr	r3, [pc, #364]	; (800486c <HAL_GPIO_Init+0x2e4>)
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	4a5a      	ldr	r2, [pc, #360]	; (800486c <HAL_GPIO_Init+0x2e4>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6613      	str	r3, [r2, #96]	; 0x60
 8004708:	4b58      	ldr	r3, [pc, #352]	; (800486c <HAL_GPIO_Init+0x2e4>)
 800470a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004714:	4a56      	ldr	r2, [pc, #344]	; (8004870 <HAL_GPIO_Init+0x2e8>)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	3302      	adds	r3, #2
 800471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	220f      	movs	r2, #15
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4013      	ands	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800473e:	d01f      	beq.n	8004780 <HAL_GPIO_Init+0x1f8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a4c      	ldr	r2, [pc, #304]	; (8004874 <HAL_GPIO_Init+0x2ec>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d019      	beq.n	800477c <HAL_GPIO_Init+0x1f4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a4b      	ldr	r2, [pc, #300]	; (8004878 <HAL_GPIO_Init+0x2f0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <HAL_GPIO_Init+0x1f0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_GPIO_Init+0x2f4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00d      	beq.n	8004774 <HAL_GPIO_Init+0x1ec>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a49      	ldr	r2, [pc, #292]	; (8004880 <HAL_GPIO_Init+0x2f8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <HAL_GPIO_Init+0x1e8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a48      	ldr	r2, [pc, #288]	; (8004884 <HAL_GPIO_Init+0x2fc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_GPIO_Init+0x1e4>
 8004768:	2305      	movs	r3, #5
 800476a:	e00a      	b.n	8004782 <HAL_GPIO_Init+0x1fa>
 800476c:	2306      	movs	r3, #6
 800476e:	e008      	b.n	8004782 <HAL_GPIO_Init+0x1fa>
 8004770:	2304      	movs	r3, #4
 8004772:	e006      	b.n	8004782 <HAL_GPIO_Init+0x1fa>
 8004774:	2303      	movs	r3, #3
 8004776:	e004      	b.n	8004782 <HAL_GPIO_Init+0x1fa>
 8004778:	2302      	movs	r3, #2
 800477a:	e002      	b.n	8004782 <HAL_GPIO_Init+0x1fa>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_GPIO_Init+0x1fa>
 8004780:	2300      	movs	r3, #0
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	f002 0203 	and.w	r2, r2, #3
 8004788:	0092      	lsls	r2, r2, #2
 800478a:	4093      	lsls	r3, r2
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004792:	4937      	ldr	r1, [pc, #220]	; (8004870 <HAL_GPIO_Init+0x2e8>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a0:	4b39      	ldr	r3, [pc, #228]	; (8004888 <HAL_GPIO_Init+0x300>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047c4:	4a30      	ldr	r2, [pc, #192]	; (8004888 <HAL_GPIO_Init+0x300>)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_GPIO_Init+0x300>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047ee:	4a26      	ldr	r2, [pc, #152]	; (8004888 <HAL_GPIO_Init+0x300>)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_GPIO_Init+0x300>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_GPIO_Init+0x300>)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <HAL_GPIO_Init+0x300>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <HAL_GPIO_Init+0x300>)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3301      	adds	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f ae9d 	bne.w	8004598 <HAL_GPIO_Init+0x10>
  }
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40021000 	.word	0x40021000
 8004870:	40010000 	.word	0x40010000
 8004874:	48000400 	.word	0x48000400
 8004878:	48000800 	.word	0x48000800
 800487c:	48000c00 	.word	0x48000c00
 8004880:	48001000 	.word	0x48001000
 8004884:	48001400 	.word	0x48001400
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
 8004898:	4613      	mov	r3, r2
 800489a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800489c:	787b      	ldrb	r3, [r7, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048a8:	e002      	b.n	80048b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d006      	beq.n	80048e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048d2:	4a05      	ldr	r2, [pc, #20]	; (80048e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f806 	bl	80048ec <HAL_GPIO_EXTI_Callback>
  }
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40010400 	.word	0x40010400

080048ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004904:	b08b      	sub	sp, #44	; 0x2c
 8004906:	af06      	add	r7, sp, #24
 8004908:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0d7      	b.n	8004ac4 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f008 ffa7 	bl	800d87c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2203      	movs	r2, #3
 8004932:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f004 fe61 	bl	8009602 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
 8004944:	e04c      	b.n	80049e0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	440b      	add	r3, r1
 8004956:	3301      	adds	r3, #1
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004970:	7bfa      	ldrb	r2, [r7, #15]
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	b298      	uxth	r0, r3
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	440b      	add	r3, r1
 8004982:	3336      	adds	r3, #54	; 0x36
 8004984:	4602      	mov	r2, r0
 8004986:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	440b      	add	r3, r1
 8004998:	3303      	adds	r3, #3
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	3338      	adds	r3, #56	; 0x38
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	333c      	adds	r3, #60	; 0x3c
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049c6:	7bfa      	ldrb	r2, [r7, #15]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	440b      	add	r3, r1
 80049d4:	3340      	adds	r3, #64	; 0x40
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	3301      	adds	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3ad      	bcc.n	8004946 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	e044      	b.n	8004a7a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a1c:	7bfa      	ldrb	r2, [r7, #15]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	440b      	add	r3, r1
 8004a2a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a48:	7bfa      	ldrb	r2, [r7, #15]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	3301      	adds	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d3b5      	bcc.n	80049f0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	687e      	ldr	r6, [r7, #4]
 8004a8c:	466d      	mov	r5, sp
 8004a8e:	f106 0410 	add.w	r4, r6, #16
 8004a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	1d33      	adds	r3, r6, #4
 8004a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a9e:	6838      	ldr	r0, [r7, #0]
 8004aa0:	f004 fdca 	bl	8009638 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d102      	bne.n	8004ac2 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f001 fc29 	bl	8006314 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004acc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_PCD_Start+0x16>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e012      	b.n	8004b08 <HAL_PCD_Start+0x3c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f004 fd70 	bl	80095d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f006 ff89 	bl	800ba10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f006 ff8e 	bl	800ba3e <USB_ReadInterrupts>
 8004b22:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fb26 	bl	8005180 <PCD_EP_ISR_Handler>

    return;
 8004b34:	e110      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	b292      	uxth	r2, r2
 8004b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f008 ff20 	bl	800d99e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8fc 	bl	8004d5e <HAL_PCD_SetAddress>

    return;
 8004b66:	e0f7      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00c      	beq.n	8004b8c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b84:	b292      	uxth	r2, r2
 8004b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b8a:	e0e5      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba8:	b292      	uxth	r2, r2
 8004baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004bae:	e0d3      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d034      	beq.n	8004c24 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0208 	bic.w	r2, r2, #8
 8004be4:	b292      	uxth	r2, r2
 8004be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f009 f8c2 	bl	800dd88 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f008 ff03 	bl	800da10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004c22:	e099      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d027      	beq.n	8004c7e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0208 	orr.w	r2, r2, #8
 8004c40:	b292      	uxth	r2, r2
 8004c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0204 	orr.w	r2, r2, #4
 8004c70:	b292      	uxth	r2, r2
 8004c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f008 feb0 	bl	800d9dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c7c:	e06c      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d040      	beq.n	8004d0a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c9a:	b292      	uxth	r2, r2
 8004c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d12b      	bne.n	8004d02 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0204 	orr.w	r2, r2, #4
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0208 	orr.w	r2, r2, #8
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f009 f844 	bl	800dd88 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004d00:	e02a      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f008 fe6a 	bl	800d9dc <HAL_PCD_SuspendCallback>
    return;
 8004d08:	e026      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00f      	beq.n	8004d34 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d26:	b292      	uxth	r2, r2
 8004d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f008 fe28 	bl	800d982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d32:	e011      	b.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d50:	b292      	uxth	r2, r2
 8004d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d56:	bf00      	nop
  }
}
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_PCD_SetAddress+0x1a>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e013      	b.n	8004da0 <HAL_PCD_SetAddress+0x42>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f006 fe29 	bl	800b9e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	70fb      	strb	r3, [r7, #3]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	803b      	strh	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da0e      	bge.n	8004dec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	705a      	strb	r2, [r3, #1]
 8004dea:	e00e      	b.n	8004e0a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 0207 	and.w	r2, r3, #7
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e16:	883a      	ldrh	r2, [r7, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	78ba      	ldrb	r2, [r7, #2]
 8004e20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e34:	78bb      	ldrb	r3, [r7, #2]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d102      	bne.n	8004e40 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_PCD_EP_Open+0xa6>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e00e      	b.n	8004e6c <HAL_PCD_EP_Open+0xc4>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f004 fc0d 	bl	800967c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	da0e      	bge.n	8004ea6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	705a      	strb	r2, [r3, #1]
 8004ea4:	e00e      	b.n	8004ec4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 0207 	and.w	r2, r3, #7
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_PCD_EP_Close+0x6a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e00e      	b.n	8004efc <HAL_PCD_EP_Close+0x88>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f004 ff59 	bl	8009da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	460b      	mov	r3, r1
 8004f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f14:	7afb      	ldrb	r3, [r7, #11]
 8004f16:	f003 0207 	and.w	r2, r3, #7
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4413      	add	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f44:	7afb      	ldrb	r3, [r7, #11]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f50:	7afb      	ldrb	r3, [r7, #11]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f005 f90c 	bl	800a17e <USB_EPStartXfer>
 8004f66:	e005      	b.n	8004f74 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f005 f905 	bl	800a17e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 0207 	and.w	r2, r3, #7
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004fa0:	681b      	ldr	r3, [r3, #0]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ffa:	7afb      	ldrb	r3, [r7, #11]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	b2da      	uxtb	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6979      	ldr	r1, [r7, #20]
 8005016:	4618      	mov	r0, r3
 8005018:	f005 f8b1 	bl	800a17e <USB_EPStartXfer>
 800501c:	e005      	b.n	800502a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6979      	ldr	r1, [r7, #20]
 8005024:	4618      	mov	r0, r3
 8005026:	f005 f8aa 	bl	800a17e <USB_EPStartXfer>
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	f003 0207 	and.w	r2, r3, #7
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d901      	bls.n	8005052 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e03e      	b.n	80050d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005056:	2b00      	cmp	r3, #0
 8005058:	da0e      	bge.n	8005078 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	705a      	strb	r2, [r3, #1]
 8005076:	e00c      	b.n	8005092 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_PCD_EP_SetStall+0x7e>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e00e      	b.n	80050d0 <HAL_PCD_EP_SetStall+0x9c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f006 fb92 	bl	800b7ea <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	f003 020f 	and.w	r2, r3, #15
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d901      	bls.n	80050f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e040      	b.n	8005178 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	da0e      	bge.n	800511c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	705a      	strb	r2, [r3, #1]
 800511a:	e00e      	b.n	800513a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 0207 	and.w	r2, r3, #7
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_PCD_EP_ClrStall+0x82>
 8005156:	2302      	movs	r3, #2
 8005158:	e00e      	b.n	8005178 <HAL_PCD_EP_ClrStall+0xa0>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	4618      	mov	r0, r3
 800516a:	f006 fb8f 	bl	800b88c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b096      	sub	sp, #88	; 0x58
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005188:	e39c      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005192:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005196:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80051a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f040 815e 	bne.w	800546a <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d150      	bne.n	800525c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	81fb      	strh	r3, [r7, #14]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29b      	uxth	r3, r3
 80051dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3328      	adds	r3, #40	; 0x28
 80051e2:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800520c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	441a      	add	r2, r3
 8005216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005218:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800521a:	2100      	movs	r1, #0
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f008 fb96 	bl	800d94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 834a 	beq.w	80058c4 <PCD_EP_ISR_Handler+0x744>
 8005230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 8345 	bne.w	80058c4 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005246:	b2da      	uxtb	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	b292      	uxth	r2, r2
 800524e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800525a:	e333      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005262:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800526e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005276:	2b00      	cmp	r3, #0
 8005278:	d032      	beq.n	80052e0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	4413      	add	r3, r2
 8005294:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800529e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f006 fc14 	bl	800bae2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052c6:	4013      	ands	r3, r2
 80052c8:	823b      	strh	r3, [r7, #16]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	8a3a      	ldrh	r2, [r7, #16]
 80052d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052d4:	b292      	uxth	r2, r2
 80052d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f008 fb0b 	bl	800d8f4 <HAL_PCD_SetupStageCallback>
 80052de:	e2f1      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052e0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f280 82ed 	bge.w	80058c4 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052f6:	4013      	ands	r3, r2
 80052f8:	83fb      	strh	r3, [r7, #30]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	8bfa      	ldrh	r2, [r7, #30]
 8005300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005304:	b292      	uxth	r2, r2
 8005306:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005310:	b29b      	uxth	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	4413      	add	r3, r2
 8005322:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800532c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d019      	beq.n	800536c <PCD_EP_ISR_Handler+0x1ec>
 8005338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005346:	6959      	ldr	r1, [r3, #20]
 8005348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005350:	b29b      	uxth	r3, r3
 8005352:	f006 fbc6 	bl	800bae2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	441a      	add	r2, r3
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005364:	2100      	movs	r1, #0
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f008 fad6 	bl	800d918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 82a3 	bne.w	80058c4 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b3e      	cmp	r3, #62	; 0x3e
 80053a4:	d918      	bls.n	80053d8 <PCD_EP_ISR_Handler+0x258>
 80053a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
 80053ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <PCD_EP_ISR_Handler+0x240>
 80053ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053bc:	3b01      	subs	r3, #1
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	029b      	lsls	r3, r3, #10
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e029      	b.n	800542c <PCD_EP_ISR_Handler+0x2ac>
 80053d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d112      	bne.n	8005406 <PCD_EP_ISR_Handler+0x286>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fe:	b29a      	uxth	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	e012      	b.n	800542c <PCD_EP_ISR_Handler+0x2ac>
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	647b      	str	r3, [r7, #68]	; 0x44
 800540e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <PCD_EP_ISR_Handler+0x2a0>
 800541a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541c:	3301      	adds	r3, #1
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29a      	uxth	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	827b      	strh	r3, [r7, #18]
 800543e:	8a7b      	ldrh	r3, [r7, #18]
 8005440:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005444:	827b      	strh	r3, [r7, #18]
 8005446:	8a7b      	ldrh	r3, [r7, #18]
 8005448:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800544c:	827b      	strh	r3, [r7, #18]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	8a7b      	ldrh	r3, [r7, #18]
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]
 8005468:	e22c      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800547e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005482:	2b00      	cmp	r3, #0
 8005484:	f280 80f6 	bge.w	8005674 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29a      	uxth	r2, r3
 800549a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800549e:	4013      	ands	r3, r2
 80054a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80054b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ba:	b292      	uxth	r2, r2
 80054bc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054be:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d6:	7b1b      	ldrb	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d123      	bne.n	8005524 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005500:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005504:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 808e 	beq.w	800562a <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005514:	6959      	ldr	r1, [r3, #20]
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	88da      	ldrh	r2, [r3, #6]
 800551a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800551e:	f006 fae0 	bl	800bae2 <USB_ReadPMA>
 8005522:	e082      	b.n	800562a <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005526:	78db      	ldrb	r3, [r3, #3]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d10a      	bne.n	8005542 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800552c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005530:	461a      	mov	r2, r3
 8005532:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f9d3 	bl	80058e0 <HAL_PCD_EP_DB_Receive>
 800553a:	4603      	mov	r3, r0
 800553c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005540:	e073      	b.n	800562a <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	441a      	add	r2, r3
 800556e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005582:	b29b      	uxth	r3, r3
 8005584:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d022      	beq.n	80055e6 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80055c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02c      	beq.n	800562a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d6:	6959      	ldr	r1, [r3, #20]
 80055d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055da:	891a      	ldrh	r2, [r3, #8]
 80055dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055e0:	f006 fa7f 	bl	800bae2 <USB_ReadPMA>
 80055e4:	e021      	b.n	800562a <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800560e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	6959      	ldr	r1, [r3, #20]
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005620:	895a      	ldrh	r2, [r3, #10]
 8005622:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005626:	f006 fa5c 	bl	800bae2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005632:	441a      	add	r2, r3
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005640:	441a      	add	r2, r3
 8005642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005644:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <PCD_EP_ISR_Handler+0x4da>
 800564e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	429a      	cmp	r2, r3
 8005658:	d206      	bcs.n	8005668 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800565a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f008 f959 	bl	800d918 <HAL_PCD_DataOutStageCallback>
 8005666:	e005      	b.n	8005674 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800566e:	4618      	mov	r0, r3
 8005670:	f004 fd85 	bl	800a17e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005674:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8121 	beq.w	80058c4 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8005682:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80056d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d4:	78db      	ldrb	r3, [r3, #3]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	f000 80a2 	beq.w	8005820 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80056dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056de:	2200      	movs	r2, #0
 80056e0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	7b1b      	ldrb	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8093 	beq.w	8005812 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d046      	beq.n	8005786 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d126      	bne.n	800574e <PCD_EP_ISR_Handler+0x5ce>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	4413      	add	r3, r2
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	00da      	lsls	r2, r3, #3
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	4413      	add	r3, r2
 8005722:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005732:	b29a      	uxth	r2, r3
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005746:	b29a      	uxth	r2, r3
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	e061      	b.n	8005812 <PCD_EP_ISR_Handler+0x692>
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d15d      	bne.n	8005812 <PCD_EP_ISR_Handler+0x692>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005764:	b29b      	uxth	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	4413      	add	r3, r2
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	00da      	lsls	r2, r3, #3
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	4413      	add	r3, r2
 8005778:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	2200      	movs	r2, #0
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e045      	b.n	8005812 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800578c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d126      	bne.n	80057e2 <PCD_EP_ISR_Handler+0x662>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	4413      	add	r3, r2
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	00da      	lsls	r2, r3, #3
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057da:	b29a      	uxth	r2, r3
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e017      	b.n	8005812 <PCD_EP_ISR_Handler+0x692>
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d113      	bne.n	8005812 <PCD_EP_ISR_Handler+0x692>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f8:	4413      	add	r3, r2
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	00da      	lsls	r2, r3, #3
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	4413      	add	r3, r2
 8005806:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800580a:	63bb      	str	r3, [r7, #56]	; 0x38
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	2200      	movs	r2, #0
 8005810:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f008 f898 	bl	800d94e <HAL_PCD_DataInStageCallback>
 800581e:	e051      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005820:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d144      	bne.n	80058b6 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	4413      	add	r3, r2
 8005846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005850:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800585c:	429a      	cmp	r2, r3
 800585e:	d907      	bls.n	8005870 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8005860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	619a      	str	r2, [r3, #24]
 800586e:	e002      	b.n	8005876 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f008 f862 	bl	800d94e <HAL_PCD_DataInStageCallback>
 800588a:	e01b      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005894:	441a      	add	r2, r3
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800589a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058a2:	441a      	add	r2, r3
 80058a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058ae:	4618      	mov	r0, r3
 80058b0:	f004 fc65 	bl	800a17e <USB_EPStartXfer>
 80058b4:	e006      	b.n	80058c4 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80058b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80058ba:	461a      	mov	r2, r3
 80058bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f917 	bl	8005af2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f6ff ac5a 	blt.w	800518a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3758      	adds	r7, #88	; 0x58
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d07c      	beq.n	80059f2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	4413      	add	r3, r2
 8005912:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800591c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	8b7b      	ldrh	r3, [r7, #26]
 8005924:	429a      	cmp	r2, r3
 8005926:	d306      	bcc.n	8005936 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	8b7b      	ldrh	r3, [r7, #26]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	619a      	str	r2, [r3, #24]
 8005934:	e002      	b.n	800593c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d123      	bne.n	800598c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	833b      	strh	r3, [r7, #24]
 8005960:	8b3b      	ldrh	r3, [r7, #24]
 8005962:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005966:	833b      	strh	r3, [r7, #24]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	8b3b      	ldrh	r3, [r7, #24]
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d01f      	beq.n	80059d6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b0:	82fb      	strh	r3, [r7, #22]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	8afb      	ldrh	r3, [r7, #22]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059d6:	8b7b      	ldrh	r3, [r7, #26]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8085 	beq.w	8005ae8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6959      	ldr	r1, [r3, #20]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	891a      	ldrh	r2, [r3, #8]
 80059ea:	8b7b      	ldrh	r3, [r7, #26]
 80059ec:	f006 f879 	bl	800bae2 <USB_ReadPMA>
 80059f0:	e07a      	b.n	8005ae8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	8b7b      	ldrh	r3, [r7, #26]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d306      	bcc.n	8005a30 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	8b7b      	ldrh	r3, [r7, #26]
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	619a      	str	r2, [r3, #24]
 8005a2e:	e002      	b.n	8005a36 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d123      	bne.n	8005a86 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	83fb      	strh	r3, [r7, #30]
 8005a5a:	8bfb      	ldrh	r3, [r7, #30]
 8005a5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a60:	83fb      	strh	r3, [r7, #30]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	8bfb      	ldrh	r3, [r7, #30]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d11f      	bne.n	8005ad0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	83bb      	strh	r3, [r7, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	8bbb      	ldrh	r3, [r7, #28]
 8005abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ad0:	8b7b      	ldrh	r3, [r7, #26]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	6959      	ldr	r1, [r3, #20]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	895a      	ldrh	r2, [r3, #10]
 8005ae2:	8b7b      	ldrh	r3, [r7, #26]
 8005ae4:	f005 fffd 	bl	800bae2 <USB_ReadPMA>
    }
  }

  return count;
 8005ae8:	8b7b      	ldrh	r3, [r7, #26]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b0a2      	sub	sp, #136	; 0x88
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 81c5 	beq.w	8005e96 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d907      	bls.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	619a      	str	r2, [r3, #24]
 8005b4e:	e002      	b.n	8005b56 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f040 80b9 	bne.w	8005cd2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d126      	bne.n	8005bb6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	4413      	add	r3, r2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00da      	lsls	r2, r3, #3
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e01a      	b.n	8005bec <HAL_PCD_EP_DB_Transmit+0xfa>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d116      	bne.n	8005bec <HAL_PCD_EP_DB_Transmit+0xfa>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	4413      	add	r3, r2
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	00da      	lsls	r2, r3, #3
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2200      	movs	r2, #0
 8005bea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d126      	bne.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x156>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	4413      	add	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	00da      	lsls	r2, r3, #3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e017      	b.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d113      	bne.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4413      	add	r3, r2
 8005c60:	623b      	str	r3, [r7, #32]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	00da      	lsls	r2, r3, #3
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	2200      	movs	r2, #0
 8005c76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f007 fe65 	bl	800d94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 82d2 	beq.w	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	827b      	strh	r3, [r7, #18]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	8a7b      	ldrh	r3, [r7, #18]
 8005cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8013      	strh	r3, [r2, #0]
 8005cd0:	e2b0      	b.n	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d021      	beq.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	f040 8284 	bne.w	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d34:	441a      	add	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d42:	441a      	add	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d309      	bcc.n	8005d68 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a1a      	ldr	r2, [r3, #32]
 8005d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	621a      	str	r2, [r3, #32]
 8005d66:	e015      	b.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005d70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d7e:	e009      	b.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d155      	bne.n	8005e48 <HAL_PCD_EP_DB_Transmit+0x356>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	4413      	add	r3, r2
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	00da      	lsls	r2, r3, #3
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc8:	d916      	bls.n	8005df8 <HAL_PCD_EP_DB_Transmit+0x306>
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	029b      	lsls	r3, r3, #10
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e043      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d112      	bne.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x332>
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	801a      	strh	r2, [r3, #0]
 8005e22:	e02d      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x348>
 8005e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e36:	3301      	adds	r3, #1
 8005e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	801a      	strh	r2, [r3, #0]
 8005e46:	e01b      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d117      	bne.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	643b      	str	r3, [r7, #64]	; 0x40
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	4413      	add	r3, r2
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	00da      	lsls	r2, r3, #3
 8005e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e70:	4413      	add	r3, r2
 8005e72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6959      	ldr	r1, [r3, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	891a      	ldrh	r2, [r3, #8]
 8005e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f005 fde5 	bl	800ba5e <USB_WritePMA>
 8005e94:	e1ce      	b.n	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d307      	bcc.n	8005eda <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	619a      	str	r2, [r3, #24]
 8005ed8:	e002      	b.n	8005ee0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2200      	movs	r2, #0
 8005ede:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 80c4 	bne.w	8006072 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d126      	bne.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f06:	4413      	add	r3, r2
 8005f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	00da      	lsls	r2, r3, #3
 8005f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f18:	667b      	str	r3, [r7, #100]	; 0x64
 8005f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e01a      	b.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d116      	bne.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	673b      	str	r3, [r7, #112]	; 0x70
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5c:	4413      	add	r3, r2
 8005f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	00da      	lsls	r2, r3, #3
 8005f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f72:	2200      	movs	r2, #0
 8005f74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d12f      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	00da      	lsls	r2, r3, #3
 8005fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e017      	b.n	8006014 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d113      	bne.n	8006014 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ffa:	4413      	add	r3, r2
 8005ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	00da      	lsls	r2, r3, #3
 8006004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006006:	4413      	add	r3, r2
 8006008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800600c:	67bb      	str	r3, [r7, #120]	; 0x78
 800600e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006010:	2200      	movs	r2, #0
 8006012:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f007 fc97 	bl	800d94e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006026:	2b00      	cmp	r3, #0
 8006028:	f040 8104 	bne.w	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]
 8006070:	e0e0      	b.n	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d121      	bne.n	80060c0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	f040 80b4 	bne.w	8006234 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060d4:	441a      	add	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060e2:	441a      	add	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d309      	bcc.n	8006108 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006100:	1ad2      	subs	r2, r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	621a      	str	r2, [r3, #32]
 8006106:	e015      	b.n	8006134 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d107      	bne.n	8006120 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800611e:	e009      	b.n	8006134 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	663b      	str	r3, [r7, #96]	; 0x60
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d155      	bne.n	80061ee <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	65bb      	str	r3, [r7, #88]	; 0x58
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006156:	4413      	add	r3, r2
 8006158:	65bb      	str	r3, [r7, #88]	; 0x58
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	00da      	lsls	r2, r3, #3
 8006160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006162:	4413      	add	r3, r2
 8006164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006168:	657b      	str	r3, [r7, #84]	; 0x54
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	2b3e      	cmp	r3, #62	; 0x3e
 800616e:	d916      	bls.n	800619e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	677b      	str	r3, [r7, #116]	; 0x74
 8006176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <HAL_PCD_EP_DB_Transmit+0x694>
 8006180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006182:	3b01      	subs	r3, #1
 8006184:	677b      	str	r3, [r7, #116]	; 0x74
 8006186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006196:	b29a      	uxth	r2, r3
 8006198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e040      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x72e>
 800619e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d112      	bne.n	80061ca <HAL_PCD_EP_DB_Transmit+0x6d8>
 80061a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e02a      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	677b      	str	r3, [r7, #116]	; 0x74
 80061d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80061da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061dc:	3301      	adds	r3, #1
 80061de:	677b      	str	r3, [r7, #116]	; 0x74
 80061e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	029b      	lsls	r3, r3, #10
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	e018      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d114      	bne.n	8006220 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006204:	4413      	add	r3, r2
 8006206:	663b      	str	r3, [r7, #96]	; 0x60
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	00da      	lsls	r2, r3, #3
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	4413      	add	r3, r2
 8006212:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	b29a      	uxth	r2, r3
 800621c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	895a      	ldrh	r2, [r3, #10]
 800622c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622e:	b29b      	uxth	r3, r3
 8006230:	f005 fc15 	bl	800ba5e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624e:	823b      	strh	r3, [r7, #16]
 8006250:	8a3b      	ldrh	r3, [r7, #16]
 8006252:	f083 0310 	eor.w	r3, r3, #16
 8006256:	823b      	strh	r3, [r7, #16]
 8006258:	8a3b      	ldrh	r3, [r7, #16]
 800625a:	f083 0320 	eor.w	r3, r3, #32
 800625e:	823b      	strh	r3, [r7, #16]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8a3b      	ldrh	r3, [r7, #16]
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3788      	adds	r7, #136	; 0x88
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800628e:	b480      	push	{r7}
 8006290:	b087      	sub	sp, #28
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	817b      	strh	r3, [r7, #10]
 800629c:	4613      	mov	r3, r2
 800629e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80062a0:	897b      	ldrh	r3, [r7, #10]
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ac:	897b      	ldrh	r3, [r7, #10]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e009      	b.n	80062d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062c4:	897a      	ldrh	r2, [r7, #10]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062d8:	893b      	ldrh	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d107      	bne.n	80062ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	80da      	strh	r2, [r3, #6]
 80062ec:	e00b      	b.n	8006306 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2201      	movs	r2, #1
 80062f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	b29a      	uxth	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006338:	b29b      	uxth	r3, r3
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800634c:	b29b      	uxth	r3, r3
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d141      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006376:	4b4b      	ldr	r3, [pc, #300]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006382:	d131      	bne.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006384:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638a:	4a46      	ldr	r2, [pc, #280]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006394:	4b43      	ldr	r3, [pc, #268]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800639c:	4a41      	ldr	r2, [pc, #260]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063a4:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2232      	movs	r2, #50	; 0x32
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	0c9b      	lsrs	r3, r3, #18
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ba:	e002      	b.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3b01      	subs	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c2:	4b38      	ldr	r3, [pc, #224]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d102      	bne.n	80063d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f2      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d6:	4b33      	ldr	r3, [pc, #204]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e2:	d158      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e057      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e8:	4b2e      	ldr	r3, [pc, #184]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ee:	4a2d      	ldr	r2, [pc, #180]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063f8:	e04d      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006400:	d141      	bne.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006402:	4b28      	ldr	r3, [pc, #160]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640e:	d131      	bne.n	8006474 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006410:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006416:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006420:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800642e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2232      	movs	r2, #50	; 0x32
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	0c9b      	lsrs	r3, r3, #18
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006446:	e002      	b.n	800644e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3b01      	subs	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800644e:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645a:	d102      	bne.n	8006462 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f2      	bne.n	8006448 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d112      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e011      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006474:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647a:	4a0a      	ldr	r2, [pc, #40]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006484:	e007      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800648e:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006494:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40007000 	.word	0x40007000
 80064a8:	200026d4 	.word	0x200026d4
 80064ac:	431bde83 	.word	0x431bde83

080064b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e306      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d075      	beq.n	80065ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ce:	4b97      	ldr	r3, [pc, #604]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d8:	4b94      	ldr	r3, [pc, #592]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d102      	bne.n	80064ee <HAL_RCC_OscConfig+0x3e>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d002      	beq.n	80064f4 <HAL_RCC_OscConfig+0x44>
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d10b      	bne.n	800650c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f4:	4b8d      	ldr	r3, [pc, #564]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05b      	beq.n	80065b8 <HAL_RCC_OscConfig+0x108>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d157      	bne.n	80065b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e2e1      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006514:	d106      	bne.n	8006524 <HAL_RCC_OscConfig+0x74>
 8006516:	4b85      	ldr	r3, [pc, #532]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a84      	ldr	r2, [pc, #528]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800651c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e01d      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x98>
 800652e:	4b7f      	ldr	r3, [pc, #508]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a7e      	ldr	r2, [pc, #504]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b7c      	ldr	r3, [pc, #496]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7b      	ldr	r2, [pc, #492]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e00b      	b.n	8006560 <HAL_RCC_OscConfig+0xb0>
 8006548:	4b78      	ldr	r3, [pc, #480]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a77      	ldr	r2, [pc, #476]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b75      	ldr	r3, [pc, #468]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a74      	ldr	r2, [pc, #464]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800655e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fb fc54 	bl	8001e14 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006570:	f7fb fc50 	bl	8001e14 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	; 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e2a6      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006582:	4b6a      	ldr	r3, [pc, #424]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0xc0>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fb fc40 	bl	8001e14 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fb fc3c 	bl	8001e14 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e292      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065aa:	4b60      	ldr	r3, [pc, #384]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0xe8>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d075      	beq.n	80066b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c6:	4b59      	ldr	r3, [pc, #356]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d0:	4b56      	ldr	r3, [pc, #344]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d102      	bne.n	80065e6 <HAL_RCC_OscConfig+0x136>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d002      	beq.n	80065ec <HAL_RCC_OscConfig+0x13c>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d11f      	bne.n	800662c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ec:	4b4f      	ldr	r3, [pc, #316]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_OscConfig+0x154>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e265      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006604:	4b49      	ldr	r3, [pc, #292]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	4946      	ldr	r1, [pc, #280]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006618:	4b45      	ldr	r3, [pc, #276]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7fb fbad 	bl	8001d7c <HAL_InitTick>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d043      	beq.n	80066b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e251      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d023      	beq.n	800667c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006634:	4b3d      	ldr	r3, [pc, #244]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a3c      	ldr	r2, [pc, #240]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800663a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800663e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006640:	f7fb fbe8 	bl	8001e14 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006648:	f7fb fbe4 	bl	8001e14 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e23a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800665a:	4b34      	ldr	r3, [pc, #208]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0f0      	beq.n	8006648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006666:	4b31      	ldr	r3, [pc, #196]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	061b      	lsls	r3, r3, #24
 8006674:	492d      	ldr	r1, [pc, #180]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006676:	4313      	orrs	r3, r2
 8006678:	604b      	str	r3, [r1, #4]
 800667a:	e01a      	b.n	80066b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800667c:	4b2b      	ldr	r3, [pc, #172]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2a      	ldr	r2, [pc, #168]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fb fbc4 	bl	8001e14 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006690:	f7fb fbc0 	bl	8001e14 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e216      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066a2:	4b22      	ldr	r3, [pc, #136]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x1e0>
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d041      	beq.n	8006742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01c      	beq.n	8006700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c6:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80066c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066cc:	4a17      	ldr	r2, [pc, #92]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d6:	f7fb fb9d 	bl	8001e14 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066de:	f7fb fb99 	bl	8001e14 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e1ef      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f0:	4b0e      	ldr	r3, [pc, #56]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 80066f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ef      	beq.n	80066de <HAL_RCC_OscConfig+0x22e>
 80066fe:	e020      	b.n	8006742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006706:	4a09      	ldr	r2, [pc, #36]	; (800672c <HAL_RCC_OscConfig+0x27c>)
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fb fb80 	bl	8001e14 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006716:	e00d      	b.n	8006734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006718:	f7fb fb7c 	bl	8001e14 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d906      	bls.n	8006734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e1d2      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	200026d8 	.word	0x200026d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006734:	4b8c      	ldr	r3, [pc, #560]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1ea      	bne.n	8006718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80a6 	beq.w	800689c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006754:	4b84      	ldr	r3, [pc, #528]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCC_OscConfig+0x2b4>
 8006760:	2301      	movs	r3, #1
 8006762:	e000      	b.n	8006766 <HAL_RCC_OscConfig+0x2b6>
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676a:	4b7f      	ldr	r3, [pc, #508]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800676c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676e:	4a7e      	ldr	r2, [pc, #504]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006774:	6593      	str	r3, [r2, #88]	; 0x58
 8006776:	4b7c      	ldr	r3, [pc, #496]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006782:	2301      	movs	r3, #1
 8006784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006786:	4b79      	ldr	r3, [pc, #484]	; (800696c <HAL_RCC_OscConfig+0x4bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678e:	2b00      	cmp	r3, #0
 8006790:	d118      	bne.n	80067c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006792:	4b76      	ldr	r3, [pc, #472]	; (800696c <HAL_RCC_OscConfig+0x4bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a75      	ldr	r2, [pc, #468]	; (800696c <HAL_RCC_OscConfig+0x4bc>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679e:	f7fb fb39 	bl	8001e14 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fb fb35 	bl	8001e14 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e18b      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b8:	4b6c      	ldr	r3, [pc, #432]	; (800696c <HAL_RCC_OscConfig+0x4bc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d108      	bne.n	80067de <HAL_RCC_OscConfig+0x32e>
 80067cc:	4b66      	ldr	r3, [pc, #408]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d2:	4a65      	ldr	r2, [pc, #404]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067dc:	e024      	b.n	8006828 <HAL_RCC_OscConfig+0x378>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d110      	bne.n	8006808 <HAL_RCC_OscConfig+0x358>
 80067e6:	4b60      	ldr	r3, [pc, #384]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	4a5e      	ldr	r2, [pc, #376]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067f6:	4b5c      	ldr	r3, [pc, #368]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	4a5a      	ldr	r2, [pc, #360]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006806:	e00f      	b.n	8006828 <HAL_RCC_OscConfig+0x378>
 8006808:	4b57      	ldr	r3, [pc, #348]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	4a56      	ldr	r2, [pc, #344]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006818:	4b53      	ldr	r3, [pc, #332]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681e:	4a52      	ldr	r2, [pc, #328]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006820:	f023 0304 	bic.w	r3, r3, #4
 8006824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d016      	beq.n	800685e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006830:	f7fb faf0 	bl	8001e14 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006836:	e00a      	b.n	800684e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006838:	f7fb faec 	bl	8001e14 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	; 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e140      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684e:	4b46      	ldr	r3, [pc, #280]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ed      	beq.n	8006838 <HAL_RCC_OscConfig+0x388>
 800685c:	e015      	b.n	800688a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685e:	f7fb fad9 	bl	8001e14 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006864:	e00a      	b.n	800687c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fb fad5 	bl	8001e14 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f241 3288 	movw	r2, #5000	; 0x1388
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e129      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1ed      	bne.n	8006866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800688a:	7ffb      	ldrb	r3, [r7, #31]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d105      	bne.n	800689c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006890:	4b35      	ldr	r3, [pc, #212]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	4a34      	ldr	r2, [pc, #208]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800689a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03c      	beq.n	8006922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01c      	beq.n	80068ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068b0:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b6:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fb faa8 	bl	8001e14 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c8:	f7fb faa4 	bl	8001e14 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0fa      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068da:	4b23      	ldr	r3, [pc, #140]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ef      	beq.n	80068c8 <HAL_RCC_OscConfig+0x418>
 80068e8:	e01b      	b.n	8006922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ea:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fb fa8b 	bl	8001e14 <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006902:	f7fb fa87 	bl	8001e14 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0dd      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006914:	4b14      	ldr	r3, [pc, #80]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ef      	bne.n	8006902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80d1 	beq.w	8006ace <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800692c:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 030c 	and.w	r3, r3, #12
 8006934:	2b0c      	cmp	r3, #12
 8006936:	f000 808b 	beq.w	8006a50 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d15e      	bne.n	8006a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a08      	ldr	r2, [pc, #32]	; (8006968 <HAL_RCC_OscConfig+0x4b8>)
 8006948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800694c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fb fa61 	bl	8001e14 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006954:	e00c      	b.n	8006970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006956:	f7fb fa5d 	bl	8001e14 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d905      	bls.n	8006970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e0b3      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
 8006968:	40021000 	.word	0x40021000
 800696c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006970:	4b59      	ldr	r3, [pc, #356]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ec      	bne.n	8006956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800697c:	4b56      	ldr	r3, [pc, #344]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	4b56      	ldr	r3, [pc, #344]	; (8006adc <HAL_RCC_OscConfig+0x62c>)
 8006982:	4013      	ands	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6a11      	ldr	r1, [r2, #32]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800698c:	3a01      	subs	r2, #1
 800698e:	0112      	lsls	r2, r2, #4
 8006990:	4311      	orrs	r1, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006996:	0212      	lsls	r2, r2, #8
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800699e:	0852      	lsrs	r2, r2, #1
 80069a0:	3a01      	subs	r2, #1
 80069a2:	0552      	lsls	r2, r2, #21
 80069a4:	4311      	orrs	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069aa:	0852      	lsrs	r2, r2, #1
 80069ac:	3a01      	subs	r2, #1
 80069ae:	0652      	lsls	r2, r2, #25
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069b6:	06d2      	lsls	r2, r2, #27
 80069b8:	430a      	orrs	r2, r1
 80069ba:	4947      	ldr	r1, [pc, #284]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069c0:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a44      	ldr	r2, [pc, #272]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 80069c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4a41      	ldr	r2, [pc, #260]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fb fa1c 	bl	8001e14 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e0:	f7fb fa18 	bl	8001e14 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e06e      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x530>
 80069fe:	e066      	b.n	8006ace <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a00:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a34      	ldr	r2, [pc, #208]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a0c:	4b32      	ldr	r3, [pc, #200]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a18:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4a2e      	ldr	r2, [pc, #184]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fb f9f4 	bl	8001e14 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fb f9f0 	bl	8001e14 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e046      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a42:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x580>
 8006a4e:	e03e      	b.n	8006ace <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e039      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_RCC_OscConfig+0x628>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 0203 	and.w	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d12c      	bne.n	8006aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d123      	bne.n	8006aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d11b      	bne.n	8006aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d113      	bne.n	8006aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d109      	bne.n	8006aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	019f800c 	.word	0x019f800c

08006ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e11e      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af8:	4b91      	ldr	r3, [pc, #580]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d910      	bls.n	8006b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b06:	4b8e      	ldr	r3, [pc, #568]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f023 020f 	bic.w	r2, r3, #15
 8006b0e:	498c      	ldr	r1, [pc, #560]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b16:	4b8a      	ldr	r3, [pc, #552]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e106      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d073      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d129      	bne.n	8006b90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b3c:	4b81      	ldr	r3, [pc, #516]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0f4      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b4c:	f000 f970 	bl	8006e30 <RCC_GetSysClockFreqFromPLLSource>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	4a7c      	ldr	r2, [pc, #496]	; (8006d48 <HAL_RCC_ClockConfig+0x268>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d93f      	bls.n	8006bda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b5a:	4b7a      	ldr	r3, [pc, #488]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d033      	beq.n	8006bda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d12f      	bne.n	8006bda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b7a:	4b72      	ldr	r3, [pc, #456]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b82:	4a70      	ldr	r2, [pc, #448]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b8a:	2380      	movs	r3, #128	; 0x80
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e024      	b.n	8006bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b98:	4b6a      	ldr	r3, [pc, #424]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0c6      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ba8:	4b66      	ldr	r3, [pc, #408]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0be      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bb8:	f000 f8ce 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8006bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4a61      	ldr	r2, [pc, #388]	; (8006d48 <HAL_RCC_ClockConfig+0x268>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d909      	bls.n	8006bda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bc6:	4b5f      	ldr	r3, [pc, #380]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bce:	4a5d      	ldr	r2, [pc, #372]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bda:	4b5a      	ldr	r3, [pc, #360]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 0203 	bic.w	r2, r3, #3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4957      	ldr	r1, [pc, #348]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bec:	f7fb f912 	bl	8001e14 <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf4:	f7fb f90e 	bl	8001e14 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e095      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	4b4e      	ldr	r3, [pc, #312]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 020c 	and.w	r2, r3, #12
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d1eb      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d023      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c34:	4b43      	ldr	r3, [pc, #268]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4a42      	ldr	r2, [pc, #264]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c54:	4a3b      	ldr	r2, [pc, #236]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c5c:	4b39      	ldr	r3, [pc, #228]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4936      	ldr	r1, [pc, #216]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d105      	bne.n	8006c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c76:	4b33      	ldr	r3, [pc, #204]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4a32      	ldr	r2, [pc, #200]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c82:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d21d      	bcs.n	8006ccc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f023 020f 	bic.w	r2, r3, #15
 8006c98:	4929      	ldr	r1, [pc, #164]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ca0:	f7fb f8b8 	bl	8001e14 <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca8:	f7fb f8b4 	bl	8001e14 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e03b      	b.n	8006d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <HAL_RCC_ClockConfig+0x260>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d1ed      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cd8:	4b1a      	ldr	r3, [pc, #104]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4917      	ldr	r1, [pc, #92]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	490f      	ldr	r1, [pc, #60]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d0a:	f000 f825 	bl	8006d58 <HAL_RCC_GetSysClockFreq>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <HAL_RCC_ClockConfig+0x264>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	490c      	ldr	r1, [pc, #48]	; (8006d4c <HAL_RCC_ClockConfig+0x26c>)
 8006d1c:	5ccb      	ldrb	r3, [r1, r3]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	fa22 f303 	lsr.w	r3, r2, r3
 8006d26:	4a0a      	ldr	r2, [pc, #40]	; (8006d50 <HAL_RCC_ClockConfig+0x270>)
 8006d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d2a:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <HAL_RCC_ClockConfig+0x274>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fb f824 	bl	8001d7c <HAL_InitTick>
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40022000 	.word	0x40022000
 8006d44:	40021000 	.word	0x40021000
 8006d48:	04c4b400 	.word	0x04c4b400
 8006d4c:	08010afc 	.word	0x08010afc
 8006d50:	200026d4 	.word	0x200026d4
 8006d54:	200026d8 	.word	0x200026d8

08006d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d5e:	4b2c      	ldr	r3, [pc, #176]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d102      	bne.n	8006d70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d6a:	4b2a      	ldr	r3, [pc, #168]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e047      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d70:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 030c 	and.w	r3, r3, #12
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d102      	bne.n	8006d82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d7c:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	e03e      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	2b0c      	cmp	r3, #12
 8006d8c:	d136      	bne.n	8006dfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d8e:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	091b      	lsrs	r3, r3, #4
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	3301      	adds	r3, #1
 8006da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d10c      	bne.n	8006dc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dac:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006db6:	68d2      	ldr	r2, [r2, #12]
 8006db8:	0a12      	lsrs	r2, r2, #8
 8006dba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	617b      	str	r3, [r7, #20]
      break;
 8006dc4:	e00c      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dc6:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd0:	68d2      	ldr	r2, [r2, #12]
 8006dd2:	0a12      	lsrs	r2, r2, #8
 8006dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006dd8:	fb02 f303 	mul.w	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]
      break;
 8006dde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	0e5b      	lsrs	r3, r3, #25
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e001      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e00:	693b      	ldr	r3, [r7, #16]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40021000 	.word	0x40021000
 8006e14:	00f42400 	.word	0x00f42400

08006e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	200026d4 	.word	0x200026d4

08006e30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	091b      	lsrs	r3, r3, #4
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d10c      	bne.n	8006e6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5c:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e5e:	68d2      	ldr	r2, [r2, #12]
 8006e60:	0a12      	lsrs	r2, r2, #8
 8006e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
 8006e6a:	617b      	str	r3, [r7, #20]
    break;
 8006e6c:	e00c      	b.n	8006e88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e6e:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e76:	4a0e      	ldr	r2, [pc, #56]	; (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e78:	68d2      	ldr	r2, [r2, #12]
 8006e7a:	0a12      	lsrs	r2, r2, #8
 8006e7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]
    break;
 8006e86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e88:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	0e5b      	lsrs	r3, r3, #25
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	3301      	adds	r3, #1
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ea2:	687b      	ldr	r3, [r7, #4]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	00f42400 	.word	0x00f42400

08006eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8098 	beq.w	8007006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eda:	4b43      	ldr	r3, [pc, #268]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10d      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee6:	4b40      	ldr	r3, [pc, #256]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef2:	4b3d      	ldr	r3, [pc, #244]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006efe:	2301      	movs	r3, #1
 8006f00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f02:	4b3a      	ldr	r3, [pc, #232]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a39      	ldr	r2, [pc, #228]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f0e:	f7fa ff81 	bl	8001e14 <HAL_GetTick>
 8006f12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f14:	e009      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f16:	f7fa ff7d 	bl	8001e14 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d902      	bls.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	74fb      	strb	r3, [r7, #19]
        break;
 8006f28:	e005      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f2a:	4b30      	ldr	r3, [pc, #192]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0ef      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f36:	7cfb      	ldrb	r3, [r7, #19]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d159      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01e      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d019      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f58:	4b23      	ldr	r3, [pc, #140]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f64:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	4a1f      	ldr	r2, [pc, #124]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f74:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f84:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d016      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fa ff3d 	bl	8001e14 <HAL_GetTick>
 8006f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9c:	e00b      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9e:	f7fa ff39 	bl	8001e14 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d902      	bls.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8006fb4:	e006      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0ec      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fc4:	7cfb      	ldrb	r3, [r7, #19]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	4903      	ldr	r1, [pc, #12]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fe2:	7cfb      	ldrb	r3, [r7, #19]
 8006fe4:	74bb      	strb	r3, [r7, #18]
 8006fe6:	e005      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fe8:	40021000 	.word	0x40021000
 8006fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff0:	7cfb      	ldrb	r3, [r7, #19]
 8006ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ff4:	7c7b      	ldrb	r3, [r7, #17]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d105      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ffa:	4ba7      	ldr	r3, [pc, #668]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffe:	4aa6      	ldr	r2, [pc, #664]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007012:	4ba1      	ldr	r3, [pc, #644]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007018:	f023 0203 	bic.w	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	499d      	ldr	r1, [pc, #628]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007034:	4b98      	ldr	r3, [pc, #608]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703a:	f023 020c 	bic.w	r2, r3, #12
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4995      	ldr	r1, [pc, #596]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007044:	4313      	orrs	r3, r2
 8007046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007056:	4b90      	ldr	r3, [pc, #576]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	498c      	ldr	r1, [pc, #560]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007078:	4b87      	ldr	r3, [pc, #540]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	4984      	ldr	r1, [pc, #528]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800709a:	4b7f      	ldr	r3, [pc, #508]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	497b      	ldr	r1, [pc, #492]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070bc:	4b76      	ldr	r3, [pc, #472]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	4973      	ldr	r1, [pc, #460]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070de:	4b6e      	ldr	r3, [pc, #440]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	496a      	ldr	r1, [pc, #424]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007100:	4b65      	ldr	r3, [pc, #404]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	4962      	ldr	r1, [pc, #392]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007122:	4b5d      	ldr	r3, [pc, #372]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4959      	ldr	r1, [pc, #356]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007144:	4b54      	ldr	r3, [pc, #336]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800714a:	f023 0203 	bic.w	r2, r3, #3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	4951      	ldr	r1, [pc, #324]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007166:	4b4c      	ldr	r3, [pc, #304]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	4948      	ldr	r1, [pc, #288]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007184:	2b00      	cmp	r3, #0
 8007186:	d015      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007188:	4b43      	ldr	r3, [pc, #268]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	4940      	ldr	r1, [pc, #256]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a6:	d105      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a8:	4b3b      	ldr	r3, [pc, #236]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	4a3a      	ldr	r2, [pc, #232]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d015      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071c0:	4b35      	ldr	r3, [pc, #212]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	4932      	ldr	r1, [pc, #200]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071de:	d105      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071e0:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4a2c      	ldr	r2, [pc, #176]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d015      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071f8:	4b27      	ldr	r3, [pc, #156]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	4924      	ldr	r1, [pc, #144]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007216:	d105      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007218:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4a1e      	ldr	r2, [pc, #120]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007222:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d015      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007230:	4b19      	ldr	r3, [pc, #100]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	4916      	ldr	r1, [pc, #88]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007250:	4b11      	ldr	r3, [pc, #68]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4a10      	ldr	r2, [pc, #64]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800725a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d019      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	4908      	ldr	r1, [pc, #32]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007286:	d109      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007288:	4b03      	ldr	r3, [pc, #12]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	4a02      	ldr	r2, [pc, #8]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007292:	60d3      	str	r3, [r2, #12]
 8007294:	e002      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007296:	bf00      	nop
 8007298:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d015      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	4926      	ldr	r1, [pc, #152]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072c6:	d105      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072c8:	4b21      	ldr	r3, [pc, #132]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4a20      	ldr	r2, [pc, #128]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d015      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80072e0:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ee:	4918      	ldr	r1, [pc, #96]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d105      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007300:	4b13      	ldr	r3, [pc, #76]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a12      	ldr	r2, [pc, #72]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d015      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800731a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800731e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007326:	490a      	ldr	r1, [pc, #40]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007336:	d105      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4a04      	ldr	r2, [pc, #16]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800733e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007342:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007344:	7cbb      	ldrb	r3, [r7, #18]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40021000 	.word	0x40021000

08007354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e09d      	b.n	80074a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d108      	bne.n	8007380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007376:	d009      	beq.n	800738c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	61da      	str	r2, [r3, #28]
 800737e:	e005      	b.n	800738c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fa fab4 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073cc:	d902      	bls.n	80073d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e002      	b.n	80073da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073e2:	d007      	beq.n	80073f4 <HAL_SPI_Init+0xa0>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007436:	ea42 0103 	orr.w	r1, r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	0c1b      	lsrs	r3, r3, #16
 8007450:	f003 0204 	and.w	r2, r3, #4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007470:	ea42 0103 	orr.w	r1, r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007490:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b088      	sub	sp, #32
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_SPI_Transmit+0x22>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e158      	b.n	800777e <HAL_SPI_Transmit+0x2d4>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d4:	f7fa fc9e 	bl	8001e14 <HAL_GetTick>
 80074d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
 80074ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074ee:	e13d      	b.n	800776c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_Transmit+0x52>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007500:	e134      	b.n	800776c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2203      	movs	r2, #3
 8007506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754c:	d10f      	bne.n	800756e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800756c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d007      	beq.n	800758c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800758a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007594:	d94b      	bls.n	800762e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_SPI_Transmit+0xfa>
 800759e:	8afb      	ldrh	r3, [r7, #22]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d13e      	bne.n	8007622 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	881a      	ldrh	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	1c9a      	adds	r2, r3, #2
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075c8:	e02b      	b.n	8007622 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d112      	bne.n	80075fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	881a      	ldrh	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	1c9a      	adds	r2, r3, #2
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075fc:	e011      	b.n	8007622 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fe:	f7fa fc09 	bl	8001e14 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d803      	bhi.n	8007616 <HAL_SPI_Transmit+0x16c>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d102      	bne.n	800761c <HAL_SPI_Transmit+0x172>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007620:	e0a4      	b.n	800776c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1ce      	bne.n	80075ca <HAL_SPI_Transmit+0x120>
 800762c:	e07c      	b.n	8007728 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_SPI_Transmit+0x192>
 8007636:	8afb      	ldrh	r3, [r7, #22]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d170      	bne.n	800771e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b01      	cmp	r3, #1
 8007644:	d912      	bls.n	800766c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	881a      	ldrh	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	1c9a      	adds	r2, r3, #2
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007660:	b29b      	uxth	r3, r3
 8007662:	3b02      	subs	r3, #2
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800766a:	e058      	b.n	800771e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007692:	e044      	b.n	800771e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d12b      	bne.n	80076fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d912      	bls.n	80076d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	881a      	ldrh	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	1c9a      	adds	r2, r3, #2
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b02      	subs	r3, #2
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076d0:	e025      	b.n	800771e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076f8:	e011      	b.n	800771e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076fa:	f7fa fb8b 	bl	8001e14 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d803      	bhi.n	8007712 <HAL_SPI_Transmit+0x268>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d102      	bne.n	8007718 <HAL_SPI_Transmit+0x26e>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800771c:	e026      	b.n	800776c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1b5      	bne.n	8007694 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fd47 	bl	80081c0 <SPI_EndRxTxTransaction>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e000      	b.n	800776c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800776a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800777c:	7ffb      	ldrb	r3, [r7, #31]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e16c      	b.n	8007a82 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80077be:	7dbb      	ldrb	r3, [r7, #22]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d00d      	beq.n	80077e0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ca:	d106      	bne.n	80077da <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d102      	bne.n	80077da <HAL_SPI_TransmitReceive_DMA+0x52>
 80077d4:	7dbb      	ldrb	r3, [r7, #22]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d002      	beq.n	80077e0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80077da:	2302      	movs	r3, #2
 80077dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077de:	e14b      	b.n	8007a78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077ec:	887b      	ldrh	r3, [r7, #2]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f6:	e13f      	b.n	8007a78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b04      	cmp	r3, #4
 8007802:	d003      	beq.n	800780c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2205      	movs	r2, #5
 8007808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	887a      	ldrh	r2, [r7, #2]
 800781c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	887a      	ldrh	r2, [r7, #2]
 8007822:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	887a      	ldrh	r2, [r7, #2]
 800782e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	887a      	ldrh	r2, [r7, #2]
 8007836:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007854:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800785e:	d908      	bls.n	8007872 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	e06f      	b.n	8007952 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007880:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788c:	d126      	bne.n	80078dc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10f      	bne.n	80078ba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078b8:	e010      	b.n	80078dc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3301      	adds	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e6:	d134      	bne.n	8007952 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078f6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d111      	bne.n	800792c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007916:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800791e:	b29b      	uxth	r3, r3
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800792a:	e012      	b.n	8007952 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800793a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007942:	b29b      	uxth	r3, r3
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	b29b      	uxth	r3, r3
 8007948:	3301      	adds	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b04      	cmp	r3, #4
 800795c:	d108      	bne.n	8007970 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007962:	4a4a      	ldr	r2, [pc, #296]	; (8007a8c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	4a49      	ldr	r2, [pc, #292]	; (8007a90 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800796c:	62da      	str	r2, [r3, #44]	; 0x2c
 800796e:	e007      	b.n	8007980 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	4a47      	ldr	r2, [pc, #284]	; (8007a94 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	4a46      	ldr	r2, [pc, #280]	; (8007a98 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007984:	4a45      	ldr	r2, [pc, #276]	; (8007a9c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798c:	2200      	movs	r2, #0
 800798e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	4619      	mov	r1, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80079aa:	f7fc fb63 	bl	8004074 <HAL_DMA_Start_IT>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00c      	beq.n	80079ce <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b8:	f043 0210 	orr.w	r2, r3, #16
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80079cc:	e054      	b.n	8007a78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0201 	orr.w	r2, r2, #1
 80079dc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	2200      	movs	r2, #0
 80079ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	2200      	movs	r2, #0
 80079f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	2200      	movs	r2, #0
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	4619      	mov	r1, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a16:	f7fc fb2d 	bl	8004074 <HAL_DMA_Start_IT>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a24:	f043 0210 	orr.w	r2, r3, #16
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007a38:	e01e      	b.n	8007a78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d007      	beq.n	8007a58 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a56:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0220 	orr.w	r2, r2, #32
 8007a66:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0202 	orr.w	r2, r2, #2
 8007a76:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	08007e31 	.word	0x08007e31
 8007a90:	08007cf9 	.word	0x08007cf9
 8007a94:	08007e4d 	.word	0x08007e4d
 8007a98:	08007da1 	.word	0x08007da1
 8007a9c:	08007e69 	.word	0x08007e69

08007aa0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10f      	bne.n	8007ae4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	099b      	lsrs	r3, r3, #6
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
    return;
 8007ae2:	e0d7      	b.n	8007c94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	085b      	lsrs	r3, r3, #1
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_SPI_IRQHandler+0x66>
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	09db      	lsrs	r3, r3, #7
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    return;
 8007b04:	e0c6      	b.n	8007c94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10c      	bne.n	8007b2c <HAL_SPI_IRQHandler+0x8c>
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	099b      	lsrs	r3, r3, #6
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	0a1b      	lsrs	r3, r3, #8
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80b4 	beq.w	8007c94 <HAL_SPI_IRQHandler+0x1f4>
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80ad 	beq.w	8007c94 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	099b      	lsrs	r3, r3, #6
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d023      	beq.n	8007b8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d011      	beq.n	8007b76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b56:	f043 0204 	orr.w	r2, r3, #4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	e00b      	b.n	8007b8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b76:	2300      	movs	r3, #0
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	613b      	str	r3, [r7, #16]
 8007b8a:	693b      	ldr	r3, [r7, #16]
        return;
 8007b8c:	e082      	b.n	8007c94 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9e:	f043 0201 	orr.w	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	0a1b      	lsrs	r3, r3, #8
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00c      	beq.n	8007bea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	f043 0208 	orr.w	r2, r3, #8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	60bb      	str	r3, [r7, #8]
 8007be8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04f      	beq.n	8007c92 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <HAL_SPI_IRQHandler+0x17e>
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d034      	beq.n	8007c88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0203 	bic.w	r2, r2, #3
 8007c2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3a:	4a18      	ldr	r2, [pc, #96]	; (8007c9c <HAL_SPI_IRQHandler+0x1fc>)
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fc faea 	bl	800421c <HAL_DMA_Abort_IT>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d016      	beq.n	8007c90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <HAL_SPI_IRQHandler+0x1fc>)
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fc fad4 	bl	800421c <HAL_DMA_Abort_IT>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007c86:	e003      	b.n	8007c90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f81d 	bl	8007cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c8e:	e000      	b.n	8007c92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c90:	bf00      	nop
    return;
 8007c92:	bf00      	nop
  }
}
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	08007ea9 	.word	0x08007ea9

08007ca0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cea:	b2db      	uxtb	r3, r3
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d04:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d06:	f7fa f885 	bl	8001e14 <HAL_GetTick>
 8007d0a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b20      	cmp	r3, #32
 8007d18:	d03c      	beq.n	8007d94 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0220 	bic.w	r2, r2, #32
 8007d28:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <SPI_DMAReceiveCplt+0x56>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d3a:	d108      	bne.n	8007d4e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0203 	bic.w	r2, r2, #3
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	e007      	b.n	8007d5e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0201 	bic.w	r2, r2, #1
 8007d5c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	2164      	movs	r1, #100	; 0x64
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f9d4 	bl	8008110 <SPI_EndRxTransaction>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff ff9b 	bl	8007cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d92:	e002      	b.n	8007d9a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7f9 fb73 	bl	8001480 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dae:	f7fa f831 	bl	8001e14 <HAL_GetTick>
 8007db2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d030      	beq.n	8007e24 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0220 	bic.w	r2, r2, #32
 8007dd0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	2164      	movs	r1, #100	; 0x64
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f9f2 	bl	80081c0 <SPI_EndRxTxTransaction>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de6:	f043 0220 	orr.w	r2, r3, #32
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0203 	bic.w	r2, r2, #3
 8007dfc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff ff53 	bl	8007cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e22:	e002      	b.n	8007e2a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7f9 fb3b 	bl	80014a0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff ff2e 	bl	8007ca0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff ff2a 	bl	8007cb4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0203 	bic.w	r2, r2, #3
 8007e84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8a:	f043 0210 	orr.w	r2, r3, #16
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff ff14 	bl	8007cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff feff 	bl	8007cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ee4:	f7f9 ff96 	bl	8001e14 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ef4:	f7f9 ff8e 	bl	8001e14 <HAL_GetTick>
 8007ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007efa:	4b39      	ldr	r3, [pc, #228]	; (8007fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	015b      	lsls	r3, r3, #5
 8007f00:	0d1b      	lsrs	r3, r3, #20
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	fb02 f303 	mul.w	r3, r2, r3
 8007f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f0a:	e054      	b.n	8007fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d050      	beq.n	8007fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f14:	f7f9 ff7e 	bl	8001e14 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d902      	bls.n	8007f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d13d      	bne.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f42:	d111      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4c:	d004      	beq.n	8007f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f56:	d107      	bne.n	8007f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f70:	d10f      	bne.n	8007f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e017      	b.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2301      	moveq	r3, #1
 8007fc8:	2300      	movne	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	79fb      	ldrb	r3, [r7, #7]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d19b      	bne.n	8007f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200026d4 	.word	0x200026d4

08007fe4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08a      	sub	sp, #40	; 0x28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ff6:	f7f9 ff0d 	bl	8001e14 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	4413      	add	r3, r2
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008006:	f7f9 ff05 	bl	8001e14 <HAL_GetTick>
 800800a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008014:	4b3d      	ldr	r3, [pc, #244]	; (800810c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	00da      	lsls	r2, r3, #3
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	0d1b      	lsrs	r3, r3, #20
 8008024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800802c:	e060      	b.n	80080f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008034:	d107      	bne.n	8008046 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008044:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d050      	beq.n	80080f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800804e:	f7f9 fee1 	bl	8001e14 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	429a      	cmp	r2, r3
 800805c:	d902      	bls.n	8008064 <SPI_WaitFifoStateUntilTimeout+0x80>
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d13d      	bne.n	80080e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800807c:	d111      	bne.n	80080a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008086:	d004      	beq.n	8008092 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008090:	d107      	bne.n	80080a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080aa:	d10f      	bne.n	80080cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e010      	b.n	8008102 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4013      	ands	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d196      	bne.n	800802e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3728      	adds	r7, #40	; 0x28
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	200026d4 	.word	0x200026d4

08008110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af02      	add	r7, sp, #8
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008124:	d111      	bne.n	800814a <SPI_EndRxTransaction+0x3a>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812e:	d004      	beq.n	800813a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008138:	d107      	bne.n	800814a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008148:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2200      	movs	r2, #0
 8008152:	2180      	movs	r1, #128	; 0x80
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7ff febd 	bl	8007ed4 <SPI_WaitFlagStateUntilTimeout>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008164:	f043 0220 	orr.w	r2, r3, #32
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e023      	b.n	80081b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008178:	d11d      	bne.n	80081b6 <SPI_EndRxTransaction+0xa6>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008182:	d004      	beq.n	800818e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800818c:	d113      	bne.n	80081b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff ff22 	bl	8007fe4 <SPI_WaitFifoStateUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e000      	b.n	80081b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff ff03 	bl	8007fe4 <SPI_WaitFifoStateUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	f043 0220 	orr.w	r2, r3, #32
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e027      	b.n	8008244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	2180      	movs	r1, #128	; 0x80
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fe68 	bl	8007ed4 <SPI_WaitFlagStateUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820e:	f043 0220 	orr.w	r2, r3, #32
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e014      	b.n	8008244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2200      	movs	r2, #0
 8008222:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fedc 	bl	8007fe4 <SPI_WaitFifoStateUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e000      	b.n	8008244 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e049      	b.n	80082f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7f9 fb98 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f000 fbc6 	bl	8008a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e04c      	b.n	80083ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a26      	ldr	r2, [pc, #152]	; (80083bc <HAL_TIM_Base_Start+0xc0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d022      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832e:	d01d      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <HAL_TIM_Base_Start+0xc4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d018      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a21      	ldr	r2, [pc, #132]	; (80083c4 <HAL_TIM_Base_Start+0xc8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d013      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <HAL_TIM_Base_Start+0xcc>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00e      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <HAL_TIM_Base_Start+0xd0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d009      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1c      	ldr	r2, [pc, #112]	; (80083d0 <HAL_TIM_Base_Start+0xd4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d004      	beq.n	800836c <HAL_TIM_Base_Start+0x70>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a1b      	ldr	r2, [pc, #108]	; (80083d4 <HAL_TIM_Base_Start+0xd8>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d115      	bne.n	8008398 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	4b19      	ldr	r3, [pc, #100]	; (80083d8 <HAL_TIM_Base_Start+0xdc>)
 8008374:	4013      	ands	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b06      	cmp	r3, #6
 800837c:	d015      	beq.n	80083aa <HAL_TIM_Base_Start+0xae>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	d011      	beq.n	80083aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0201 	orr.w	r2, r2, #1
 8008394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008396:	e008      	b.n	80083aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0201 	orr.w	r2, r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e000      	b.n	80083ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40012c00 	.word	0x40012c00
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40013400 	.word	0x40013400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40015000 	.word	0x40015000
 80083d8:	00010007 	.word	0x00010007

080083dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6a1a      	ldr	r2, [r3, #32]
 80083ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80083ee:	4013      	ands	r3, r2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10f      	bne.n	8008414 <HAL_TIM_Base_Stop+0x38>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6a1a      	ldr	r2, [r3, #32]
 80083fa:	f244 4344 	movw	r3, #17476	; 0x4444
 80083fe:	4013      	ands	r3, r2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d107      	bne.n	8008414 <HAL_TIM_Base_Stop+0x38>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e049      	b.n	80084d0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f841 	bl	80084d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2202      	movs	r2, #2
 800845a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3304      	adds	r3, #4
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f000 fad7 	bl	8008a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <HAL_TIM_OC_Start+0x24>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b01      	cmp	r3, #1
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e03c      	b.n	800858a <HAL_TIM_OC_Start+0x9e>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b04      	cmp	r3, #4
 8008514:	d109      	bne.n	800852a <HAL_TIM_OC_Start+0x3e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	bf14      	ite	ne
 8008522:	2301      	movne	r3, #1
 8008524:	2300      	moveq	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	e02f      	b.n	800858a <HAL_TIM_OC_Start+0x9e>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b08      	cmp	r3, #8
 800852e:	d109      	bne.n	8008544 <HAL_TIM_OC_Start+0x58>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	bf14      	ite	ne
 800853c:	2301      	movne	r3, #1
 800853e:	2300      	moveq	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	e022      	b.n	800858a <HAL_TIM_OC_Start+0x9e>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b0c      	cmp	r3, #12
 8008548:	d109      	bne.n	800855e <HAL_TIM_OC_Start+0x72>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b01      	cmp	r3, #1
 8008554:	bf14      	ite	ne
 8008556:	2301      	movne	r3, #1
 8008558:	2300      	moveq	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	e015      	b.n	800858a <HAL_TIM_OC_Start+0x9e>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b10      	cmp	r3, #16
 8008562:	d109      	bne.n	8008578 <HAL_TIM_OC_Start+0x8c>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf14      	ite	ne
 8008570:	2301      	movne	r3, #1
 8008572:	2300      	moveq	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	e008      	b.n	800858a <HAL_TIM_OC_Start+0x9e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	bf14      	ite	ne
 8008584:	2301      	movne	r3, #1
 8008586:	2300      	moveq	r3, #0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e0a6      	b.n	80086e0 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <HAL_TIM_OC_Start+0xb6>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a0:	e023      	b.n	80085ea <HAL_TIM_OC_Start+0xfe>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d104      	bne.n	80085b2 <HAL_TIM_OC_Start+0xc6>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b0:	e01b      	b.n	80085ea <HAL_TIM_OC_Start+0xfe>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d104      	bne.n	80085c2 <HAL_TIM_OC_Start+0xd6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c0:	e013      	b.n	80085ea <HAL_TIM_OC_Start+0xfe>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b0c      	cmp	r3, #12
 80085c6:	d104      	bne.n	80085d2 <HAL_TIM_OC_Start+0xe6>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085d0:	e00b      	b.n	80085ea <HAL_TIM_OC_Start+0xfe>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b10      	cmp	r3, #16
 80085d6:	d104      	bne.n	80085e2 <HAL_TIM_OC_Start+0xf6>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085e0:	e003      	b.n	80085ea <HAL_TIM_OC_Start+0xfe>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2201      	movs	r2, #1
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fe80 	bl	80092f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a3a      	ldr	r2, [pc, #232]	; (80086e8 <HAL_TIM_OC_Start+0x1fc>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d018      	beq.n	8008634 <HAL_TIM_OC_Start+0x148>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a39      	ldr	r2, [pc, #228]	; (80086ec <HAL_TIM_OC_Start+0x200>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d013      	beq.n	8008634 <HAL_TIM_OC_Start+0x148>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a37      	ldr	r2, [pc, #220]	; (80086f0 <HAL_TIM_OC_Start+0x204>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00e      	beq.n	8008634 <HAL_TIM_OC_Start+0x148>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a36      	ldr	r2, [pc, #216]	; (80086f4 <HAL_TIM_OC_Start+0x208>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d009      	beq.n	8008634 <HAL_TIM_OC_Start+0x148>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a34      	ldr	r2, [pc, #208]	; (80086f8 <HAL_TIM_OC_Start+0x20c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d004      	beq.n	8008634 <HAL_TIM_OC_Start+0x148>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a33      	ldr	r2, [pc, #204]	; (80086fc <HAL_TIM_OC_Start+0x210>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d101      	bne.n	8008638 <HAL_TIM_OC_Start+0x14c>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <HAL_TIM_OC_Start+0x14e>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800864c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <HAL_TIM_OC_Start+0x1fc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d022      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d01d      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a26      	ldr	r2, [pc, #152]	; (8008700 <HAL_TIM_OC_Start+0x214>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d018      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a24      	ldr	r2, [pc, #144]	; (8008704 <HAL_TIM_OC_Start+0x218>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d013      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a23      	ldr	r2, [pc, #140]	; (8008708 <HAL_TIM_OC_Start+0x21c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00e      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a19      	ldr	r2, [pc, #100]	; (80086ec <HAL_TIM_OC_Start+0x200>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d009      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <HAL_TIM_OC_Start+0x204>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d004      	beq.n	800869e <HAL_TIM_OC_Start+0x1b2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a18      	ldr	r2, [pc, #96]	; (80086fc <HAL_TIM_OC_Start+0x210>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d115      	bne.n	80086ca <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	4b19      	ldr	r3, [pc, #100]	; (800870c <HAL_TIM_OC_Start+0x220>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b06      	cmp	r3, #6
 80086ae:	d015      	beq.n	80086dc <HAL_TIM_OC_Start+0x1f0>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b6:	d011      	beq.n	80086dc <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0201 	orr.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c8:	e008      	b.n	80086dc <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f042 0201 	orr.w	r2, r2, #1
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e000      	b.n	80086de <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40012c00 	.word	0x40012c00
 80086ec:	40013400 	.word	0x40013400
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800
 80086fc:	40015000 	.word	0x40015000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	00010007 	.word	0x00010007

08008710 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_TIM_OC_ConfigChannel+0x1e>
 800872a:	2302      	movs	r3, #2
 800872c:	e066      	b.n	80087fc <HAL_TIM_OC_ConfigChannel+0xec>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b14      	cmp	r3, #20
 800873a:	d857      	bhi.n	80087ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <HAL_TIM_OC_ConfigChannel+0x34>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008799 	.word	0x08008799
 8008748:	080087ed 	.word	0x080087ed
 800874c:	080087ed 	.word	0x080087ed
 8008750:	080087ed 	.word	0x080087ed
 8008754:	080087a7 	.word	0x080087a7
 8008758:	080087ed 	.word	0x080087ed
 800875c:	080087ed 	.word	0x080087ed
 8008760:	080087ed 	.word	0x080087ed
 8008764:	080087b5 	.word	0x080087b5
 8008768:	080087ed 	.word	0x080087ed
 800876c:	080087ed 	.word	0x080087ed
 8008770:	080087ed 	.word	0x080087ed
 8008774:	080087c3 	.word	0x080087c3
 8008778:	080087ed 	.word	0x080087ed
 800877c:	080087ed 	.word	0x080087ed
 8008780:	080087ed 	.word	0x080087ed
 8008784:	080087d1 	.word	0x080087d1
 8008788:	080087ed 	.word	0x080087ed
 800878c:	080087ed 	.word	0x080087ed
 8008790:	080087ed 	.word	0x080087ed
 8008794:	080087df 	.word	0x080087df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f9e4 	bl	8008b6c <TIM_OC1_SetConfig>
      break;
 80087a4:	e025      	b.n	80087f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fa77 	bl	8008ca0 <TIM_OC2_SetConfig>
      break;
 80087b2:	e01e      	b.n	80087f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fb04 	bl	8008dc8 <TIM_OC3_SetConfig>
      break;
 80087c0:	e017      	b.n	80087f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68b9      	ldr	r1, [r7, #8]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fb8f 	bl	8008eec <TIM_OC4_SetConfig>
      break;
 80087ce:	e010      	b.n	80087f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fc1c 	bl	8009014 <TIM_OC5_SetConfig>
      break;
 80087dc:	e009      	b.n	80087f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fc7f 	bl	80090e8 <TIM_OC6_SetConfig>
      break;
 80087ea:	e002      	b.n	80087f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_TIM_ConfigClockSource+0x1c>
 800881c:	2302      	movs	r3, #2
 800881e:	e0ee      	b.n	80089fe <HAL_TIM_ConfigClockSource+0x1fa>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800883e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800884a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a6b      	ldr	r2, [pc, #428]	; (8008a08 <HAL_TIM_ConfigClockSource+0x204>)
 800885a:	4293      	cmp	r3, r2
 800885c:	f000 80b9 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008860:	4a69      	ldr	r2, [pc, #420]	; (8008a08 <HAL_TIM_ConfigClockSource+0x204>)
 8008862:	4293      	cmp	r3, r2
 8008864:	f200 80be 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008868:	4a68      	ldr	r2, [pc, #416]	; (8008a0c <HAL_TIM_ConfigClockSource+0x208>)
 800886a:	4293      	cmp	r3, r2
 800886c:	f000 80b1 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008870:	4a66      	ldr	r2, [pc, #408]	; (8008a0c <HAL_TIM_ConfigClockSource+0x208>)
 8008872:	4293      	cmp	r3, r2
 8008874:	f200 80b6 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008878:	4a65      	ldr	r2, [pc, #404]	; (8008a10 <HAL_TIM_ConfigClockSource+0x20c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	f000 80a9 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008880:	4a63      	ldr	r2, [pc, #396]	; (8008a10 <HAL_TIM_ConfigClockSource+0x20c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	f200 80ae 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008888:	4a62      	ldr	r2, [pc, #392]	; (8008a14 <HAL_TIM_ConfigClockSource+0x210>)
 800888a:	4293      	cmp	r3, r2
 800888c:	f000 80a1 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008890:	4a60      	ldr	r2, [pc, #384]	; (8008a14 <HAL_TIM_ConfigClockSource+0x210>)
 8008892:	4293      	cmp	r3, r2
 8008894:	f200 80a6 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008898:	4a5f      	ldr	r2, [pc, #380]	; (8008a18 <HAL_TIM_ConfigClockSource+0x214>)
 800889a:	4293      	cmp	r3, r2
 800889c:	f000 8099 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088a0:	4a5d      	ldr	r2, [pc, #372]	; (8008a18 <HAL_TIM_ConfigClockSource+0x214>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	f200 809e 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088ac:	f000 8091 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088b4:	f200 8096 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088bc:	f000 8089 	beq.w	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c4:	f200 808e 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088cc:	d03e      	beq.n	800894c <HAL_TIM_ConfigClockSource+0x148>
 80088ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d2:	f200 8087 	bhi.w	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088da:	f000 8086 	beq.w	80089ea <HAL_TIM_ConfigClockSource+0x1e6>
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e2:	d87f      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088e4:	2b70      	cmp	r3, #112	; 0x70
 80088e6:	d01a      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x11a>
 80088e8:	2b70      	cmp	r3, #112	; 0x70
 80088ea:	d87b      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088ec:	2b60      	cmp	r3, #96	; 0x60
 80088ee:	d050      	beq.n	8008992 <HAL_TIM_ConfigClockSource+0x18e>
 80088f0:	2b60      	cmp	r3, #96	; 0x60
 80088f2:	d877      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088f4:	2b50      	cmp	r3, #80	; 0x50
 80088f6:	d03c      	beq.n	8008972 <HAL_TIM_ConfigClockSource+0x16e>
 80088f8:	2b50      	cmp	r3, #80	; 0x50
 80088fa:	d873      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	d058      	beq.n	80089b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008900:	2b40      	cmp	r3, #64	; 0x40
 8008902:	d86f      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008904:	2b30      	cmp	r3, #48	; 0x30
 8008906:	d064      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008908:	2b30      	cmp	r3, #48	; 0x30
 800890a:	d86b      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 800890c:	2b20      	cmp	r3, #32
 800890e:	d060      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008910:	2b20      	cmp	r3, #32
 8008912:	d867      	bhi.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d05c      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008918:	2b10      	cmp	r3, #16
 800891a:	d05a      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0x1ce>
 800891c:	e062      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6899      	ldr	r1, [r3, #8]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f000 fcc3 	bl	80092b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008940:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	609a      	str	r2, [r3, #8]
      break;
 800894a:	e04f      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	6899      	ldr	r1, [r3, #8]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f000 fcac 	bl	80092b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800896e:	609a      	str	r2, [r3, #8]
      break;
 8008970:	e03c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6859      	ldr	r1, [r3, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	461a      	mov	r2, r3
 8008980:	f000 fc1e 	bl	80091c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2150      	movs	r1, #80	; 0x50
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fc77 	bl	800927e <TIM_ITRx_SetConfig>
      break;
 8008990:	e02c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	6859      	ldr	r1, [r3, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	461a      	mov	r2, r3
 80089a0:	f000 fc3d 	bl	800921e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2160      	movs	r1, #96	; 0x60
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fc67 	bl	800927e <TIM_ITRx_SetConfig>
      break;
 80089b0:	e01c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6859      	ldr	r1, [r3, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	461a      	mov	r2, r3
 80089c0:	f000 fbfe 	bl	80091c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2140      	movs	r1, #64	; 0x40
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fc57 	bl	800927e <TIM_ITRx_SetConfig>
      break;
 80089d0:	e00c      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f000 fc4e 	bl	800927e <TIM_ITRx_SetConfig>
      break;
 80089e2:	e003      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	e000      	b.n	80089ec <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80089ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	00100070 	.word	0x00100070
 8008a0c:	00100050 	.word	0x00100050
 8008a10:	00100040 	.word	0x00100040
 8008a14:	00100030 	.word	0x00100030
 8008a18:	00100020 	.word	0x00100020

08008a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a46      	ldr	r2, [pc, #280]	; (8008b48 <TIM_Base_SetConfig+0x12c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d017      	beq.n	8008a64 <TIM_Base_SetConfig+0x48>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3a:	d013      	beq.n	8008a64 <TIM_Base_SetConfig+0x48>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a43      	ldr	r2, [pc, #268]	; (8008b4c <TIM_Base_SetConfig+0x130>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00f      	beq.n	8008a64 <TIM_Base_SetConfig+0x48>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a42      	ldr	r2, [pc, #264]	; (8008b50 <TIM_Base_SetConfig+0x134>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00b      	beq.n	8008a64 <TIM_Base_SetConfig+0x48>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a41      	ldr	r2, [pc, #260]	; (8008b54 <TIM_Base_SetConfig+0x138>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d007      	beq.n	8008a64 <TIM_Base_SetConfig+0x48>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a40      	ldr	r2, [pc, #256]	; (8008b58 <TIM_Base_SetConfig+0x13c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d003      	beq.n	8008a64 <TIM_Base_SetConfig+0x48>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a3f      	ldr	r2, [pc, #252]	; (8008b5c <TIM_Base_SetConfig+0x140>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d108      	bne.n	8008a76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a33      	ldr	r2, [pc, #204]	; (8008b48 <TIM_Base_SetConfig+0x12c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d023      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a84:	d01f      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a30      	ldr	r2, [pc, #192]	; (8008b4c <TIM_Base_SetConfig+0x130>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01b      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a2f      	ldr	r2, [pc, #188]	; (8008b50 <TIM_Base_SetConfig+0x134>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d017      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a2e      	ldr	r2, [pc, #184]	; (8008b54 <TIM_Base_SetConfig+0x138>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d013      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a2d      	ldr	r2, [pc, #180]	; (8008b58 <TIM_Base_SetConfig+0x13c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00f      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a2d      	ldr	r2, [pc, #180]	; (8008b60 <TIM_Base_SetConfig+0x144>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00b      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a2c      	ldr	r2, [pc, #176]	; (8008b64 <TIM_Base_SetConfig+0x148>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d007      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a2b      	ldr	r2, [pc, #172]	; (8008b68 <TIM_Base_SetConfig+0x14c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d003      	beq.n	8008ac6 <TIM_Base_SetConfig+0xaa>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a26      	ldr	r2, [pc, #152]	; (8008b5c <TIM_Base_SetConfig+0x140>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d108      	bne.n	8008ad8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a12      	ldr	r2, [pc, #72]	; (8008b48 <TIM_Base_SetConfig+0x12c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d013      	beq.n	8008b2c <TIM_Base_SetConfig+0x110>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <TIM_Base_SetConfig+0x13c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00f      	beq.n	8008b2c <TIM_Base_SetConfig+0x110>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a14      	ldr	r2, [pc, #80]	; (8008b60 <TIM_Base_SetConfig+0x144>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00b      	beq.n	8008b2c <TIM_Base_SetConfig+0x110>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a13      	ldr	r2, [pc, #76]	; (8008b64 <TIM_Base_SetConfig+0x148>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d007      	beq.n	8008b2c <TIM_Base_SetConfig+0x110>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a12      	ldr	r2, [pc, #72]	; (8008b68 <TIM_Base_SetConfig+0x14c>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d003      	beq.n	8008b2c <TIM_Base_SetConfig+0x110>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <TIM_Base_SetConfig+0x140>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d103      	bne.n	8008b34 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	691a      	ldr	r2, [r3, #16]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	615a      	str	r2, [r3, #20]
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	40000400 	.word	0x40000400
 8008b50:	40000800 	.word	0x40000800
 8008b54:	40000c00 	.word	0x40000c00
 8008b58:	40013400 	.word	0x40013400
 8008b5c:	40015000 	.word	0x40015000
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400
 8008b68:	40014800 	.word	0x40014800

08008b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	f023 0201 	bic.w	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0303 	bic.w	r3, r3, #3
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f023 0302 	bic.w	r3, r3, #2
 8008bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a30      	ldr	r2, [pc, #192]	; (8008c88 <TIM_OC1_SetConfig+0x11c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d013      	beq.n	8008bf4 <TIM_OC1_SetConfig+0x88>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a2f      	ldr	r2, [pc, #188]	; (8008c8c <TIM_OC1_SetConfig+0x120>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00f      	beq.n	8008bf4 <TIM_OC1_SetConfig+0x88>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a2e      	ldr	r2, [pc, #184]	; (8008c90 <TIM_OC1_SetConfig+0x124>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00b      	beq.n	8008bf4 <TIM_OC1_SetConfig+0x88>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a2d      	ldr	r2, [pc, #180]	; (8008c94 <TIM_OC1_SetConfig+0x128>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d007      	beq.n	8008bf4 <TIM_OC1_SetConfig+0x88>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a2c      	ldr	r2, [pc, #176]	; (8008c98 <TIM_OC1_SetConfig+0x12c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_OC1_SetConfig+0x88>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a2b      	ldr	r2, [pc, #172]	; (8008c9c <TIM_OC1_SetConfig+0x130>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d10c      	bne.n	8008c0e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f023 0308 	bic.w	r3, r3, #8
 8008bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f023 0304 	bic.w	r3, r3, #4
 8008c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <TIM_OC1_SetConfig+0x11c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <TIM_OC1_SetConfig+0xd2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <TIM_OC1_SetConfig+0x120>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00f      	beq.n	8008c3e <TIM_OC1_SetConfig+0xd2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a1b      	ldr	r2, [pc, #108]	; (8008c90 <TIM_OC1_SetConfig+0x124>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00b      	beq.n	8008c3e <TIM_OC1_SetConfig+0xd2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a1a      	ldr	r2, [pc, #104]	; (8008c94 <TIM_OC1_SetConfig+0x128>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d007      	beq.n	8008c3e <TIM_OC1_SetConfig+0xd2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a19      	ldr	r2, [pc, #100]	; (8008c98 <TIM_OC1_SetConfig+0x12c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC1_SetConfig+0xd2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a18      	ldr	r2, [pc, #96]	; (8008c9c <TIM_OC1_SetConfig+0x130>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d111      	bne.n	8008c62 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	bf00      	nop
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	40012c00 	.word	0x40012c00
 8008c8c:	40013400 	.word	0x40013400
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40014400 	.word	0x40014400
 8008c98:	40014800 	.word	0x40014800
 8008c9c:	40015000 	.word	0x40015000

08008ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f023 0210 	bic.w	r2, r3, #16
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f023 0320 	bic.w	r3, r3, #32
 8008cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a2c      	ldr	r2, [pc, #176]	; (8008db0 <TIM_OC2_SetConfig+0x110>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d007      	beq.n	8008d14 <TIM_OC2_SetConfig+0x74>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a2b      	ldr	r2, [pc, #172]	; (8008db4 <TIM_OC2_SetConfig+0x114>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC2_SetConfig+0x74>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a2a      	ldr	r2, [pc, #168]	; (8008db8 <TIM_OC2_SetConfig+0x118>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d10d      	bne.n	8008d30 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a1f      	ldr	r2, [pc, #124]	; (8008db0 <TIM_OC2_SetConfig+0x110>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d013      	beq.n	8008d60 <TIM_OC2_SetConfig+0xc0>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a1e      	ldr	r2, [pc, #120]	; (8008db4 <TIM_OC2_SetConfig+0x114>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00f      	beq.n	8008d60 <TIM_OC2_SetConfig+0xc0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a1e      	ldr	r2, [pc, #120]	; (8008dbc <TIM_OC2_SetConfig+0x11c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00b      	beq.n	8008d60 <TIM_OC2_SetConfig+0xc0>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a1d      	ldr	r2, [pc, #116]	; (8008dc0 <TIM_OC2_SetConfig+0x120>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d007      	beq.n	8008d60 <TIM_OC2_SetConfig+0xc0>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a1c      	ldr	r2, [pc, #112]	; (8008dc4 <TIM_OC2_SetConfig+0x124>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d003      	beq.n	8008d60 <TIM_OC2_SetConfig+0xc0>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a17      	ldr	r2, [pc, #92]	; (8008db8 <TIM_OC2_SetConfig+0x118>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d113      	bne.n	8008d88 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	621a      	str	r2, [r3, #32]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40013400 	.word	0x40013400
 8008db8:	40015000 	.word	0x40015000
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40014400 	.word	0x40014400
 8008dc4:	40014800 	.word	0x40014800

08008dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0303 	bic.w	r3, r3, #3
 8008e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2b      	ldr	r2, [pc, #172]	; (8008ed4 <TIM_OC3_SetConfig+0x10c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d007      	beq.n	8008e3a <TIM_OC3_SetConfig+0x72>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a2a      	ldr	r2, [pc, #168]	; (8008ed8 <TIM_OC3_SetConfig+0x110>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d003      	beq.n	8008e3a <TIM_OC3_SetConfig+0x72>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a29      	ldr	r2, [pc, #164]	; (8008edc <TIM_OC3_SetConfig+0x114>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d10d      	bne.n	8008e56 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <TIM_OC3_SetConfig+0x10c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d013      	beq.n	8008e86 <TIM_OC3_SetConfig+0xbe>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1d      	ldr	r2, [pc, #116]	; (8008ed8 <TIM_OC3_SetConfig+0x110>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00f      	beq.n	8008e86 <TIM_OC3_SetConfig+0xbe>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1d      	ldr	r2, [pc, #116]	; (8008ee0 <TIM_OC3_SetConfig+0x118>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d00b      	beq.n	8008e86 <TIM_OC3_SetConfig+0xbe>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a1c      	ldr	r2, [pc, #112]	; (8008ee4 <TIM_OC3_SetConfig+0x11c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d007      	beq.n	8008e86 <TIM_OC3_SetConfig+0xbe>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <TIM_OC3_SetConfig+0x120>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d003      	beq.n	8008e86 <TIM_OC3_SetConfig+0xbe>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a16      	ldr	r2, [pc, #88]	; (8008edc <TIM_OC3_SetConfig+0x114>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d113      	bne.n	8008eae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	621a      	str	r2, [r3, #32]
}
 8008ec8:	bf00      	nop
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	40013400 	.word	0x40013400
 8008edc:	40015000 	.word	0x40015000
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	40014400 	.word	0x40014400
 8008ee8:	40014800 	.word	0x40014800

08008eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	031b      	lsls	r3, r3, #12
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a2c      	ldr	r2, [pc, #176]	; (8008ffc <TIM_OC4_SetConfig+0x110>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d007      	beq.n	8008f60 <TIM_OC4_SetConfig+0x74>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a2b      	ldr	r2, [pc, #172]	; (8009000 <TIM_OC4_SetConfig+0x114>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_OC4_SetConfig+0x74>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a2a      	ldr	r2, [pc, #168]	; (8009004 <TIM_OC4_SetConfig+0x118>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10d      	bne.n	8008f7c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	031b      	lsls	r3, r3, #12
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <TIM_OC4_SetConfig+0x110>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d013      	beq.n	8008fac <TIM_OC4_SetConfig+0xc0>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <TIM_OC4_SetConfig+0x114>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00f      	beq.n	8008fac <TIM_OC4_SetConfig+0xc0>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <TIM_OC4_SetConfig+0x11c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00b      	beq.n	8008fac <TIM_OC4_SetConfig+0xc0>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a1d      	ldr	r2, [pc, #116]	; (800900c <TIM_OC4_SetConfig+0x120>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d007      	beq.n	8008fac <TIM_OC4_SetConfig+0xc0>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <TIM_OC4_SetConfig+0x124>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <TIM_OC4_SetConfig+0xc0>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a17      	ldr	r2, [pc, #92]	; (8009004 <TIM_OC4_SetConfig+0x118>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d113      	bne.n	8008fd4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	019b      	lsls	r3, r3, #6
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	019b      	lsls	r3, r3, #6
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40012c00 	.word	0x40012c00
 8009000:	40013400 	.word	0x40013400
 8009004:	40015000 	.word	0x40015000
 8009008:	40014000 	.word	0x40014000
 800900c:	40014400 	.word	0x40014400
 8009010:	40014800 	.word	0x40014800

08009014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009058:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	041b      	lsls	r3, r3, #16
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	4313      	orrs	r3, r2
 8009064:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <TIM_OC5_SetConfig+0xbc>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d013      	beq.n	8009096 <TIM_OC5_SetConfig+0x82>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <TIM_OC5_SetConfig+0xc0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00f      	beq.n	8009096 <TIM_OC5_SetConfig+0x82>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <TIM_OC5_SetConfig+0xc4>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00b      	beq.n	8009096 <TIM_OC5_SetConfig+0x82>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a16      	ldr	r2, [pc, #88]	; (80090dc <TIM_OC5_SetConfig+0xc8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d007      	beq.n	8009096 <TIM_OC5_SetConfig+0x82>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <TIM_OC5_SetConfig+0xcc>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d003      	beq.n	8009096 <TIM_OC5_SetConfig+0x82>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a14      	ldr	r2, [pc, #80]	; (80090e4 <TIM_OC5_SetConfig+0xd0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d109      	bne.n	80090aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800909c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	021b      	lsls	r3, r3, #8
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	621a      	str	r2, [r3, #32]
}
 80090c4:	bf00      	nop
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	40012c00 	.word	0x40012c00
 80090d4:	40013400 	.word	0x40013400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800
 80090e4:	40015000 	.word	0x40015000

080090e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	021b      	lsls	r3, r3, #8
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4313      	orrs	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800912e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	051b      	lsls	r3, r3, #20
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a1a      	ldr	r2, [pc, #104]	; (80091a8 <TIM_OC6_SetConfig+0xc0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d013      	beq.n	800916c <TIM_OC6_SetConfig+0x84>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a19      	ldr	r2, [pc, #100]	; (80091ac <TIM_OC6_SetConfig+0xc4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00f      	beq.n	800916c <TIM_OC6_SetConfig+0x84>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a18      	ldr	r2, [pc, #96]	; (80091b0 <TIM_OC6_SetConfig+0xc8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00b      	beq.n	800916c <TIM_OC6_SetConfig+0x84>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a17      	ldr	r2, [pc, #92]	; (80091b4 <TIM_OC6_SetConfig+0xcc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_OC6_SetConfig+0x84>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a16      	ldr	r2, [pc, #88]	; (80091b8 <TIM_OC6_SetConfig+0xd0>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_OC6_SetConfig+0x84>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a15      	ldr	r2, [pc, #84]	; (80091bc <TIM_OC6_SetConfig+0xd4>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d109      	bne.n	8009180 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009172:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	029b      	lsls	r3, r3, #10
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40013400 	.word	0x40013400
 80091b0:	40014000 	.word	0x40014000
 80091b4:	40014400 	.word	0x40014400
 80091b8:	40014800 	.word	0x40014800
 80091bc:	40015000 	.word	0x40015000

080091c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	f023 0201 	bic.w	r2, r3, #1
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f023 030a 	bic.w	r3, r3, #10
 80091fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800921e:	b480      	push	{r7}
 8009220:	b087      	sub	sp, #28
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f023 0210 	bic.w	r2, r3, #16
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	031b      	lsls	r3, r3, #12
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4313      	orrs	r3, r2
 8009252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800925a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	4313      	orrs	r3, r2
 8009264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	621a      	str	r2, [r3, #32]
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	f043 0307 	orr.w	r3, r3, #7
 80092a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	609a      	str	r2, [r3, #8]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	431a      	orrs	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	609a      	str	r2, [r3, #8]
}
 80092ec:	bf00      	nop
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	2201      	movs	r2, #1
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a1a      	ldr	r2, [r3, #32]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a1a      	ldr	r2, [r3, #32]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	fa01 f303 	lsl.w	r3, r1, r3
 8009330:	431a      	orrs	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	621a      	str	r2, [r3, #32]
}
 8009336:	bf00      	nop
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009358:	2302      	movs	r3, #2
 800935a:	e074      	b.n	8009446 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a34      	ldr	r2, [pc, #208]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d009      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a33      	ldr	r2, [pc, #204]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d004      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a31      	ldr	r2, [pc, #196]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d108      	bne.n	80093ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80093b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a21      	ldr	r2, [pc, #132]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d022      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093dc:	d01d      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a1f      	ldr	r2, [pc, #124]	; (8009460 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d018      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d013      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1c      	ldr	r2, [pc, #112]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00e      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a15      	ldr	r2, [pc, #84]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d009      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a18      	ldr	r2, [pc, #96]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d004      	beq.n	800941a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a11      	ldr	r2, [pc, #68]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d10c      	bne.n	8009434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4313      	orrs	r3, r2
 800942a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	40012c00 	.word	0x40012c00
 8009458:	40013400 	.word	0x40013400
 800945c:	40015000 	.word	0x40015000
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00
 800946c:	40014000 	.word	0x40014000

08009470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009488:	2302      	movs	r3, #2
 800948a:	e096      	b.n	80095ba <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a2f      	ldr	r2, [pc, #188]	; (80095c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d009      	beq.n	8009524 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2d      	ldr	r2, [pc, #180]	; (80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d004      	beq.n	8009524 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a2c      	ldr	r2, [pc, #176]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d106      	bne.n	8009532 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a24      	ldr	r2, [pc, #144]	; (80095c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d009      	beq.n	8009550 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a22      	ldr	r2, [pc, #136]	; (80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d004      	beq.n	8009550 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a21      	ldr	r2, [pc, #132]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d12b      	bne.n	80095a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955a:	051b      	lsls	r3, r3, #20
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a11      	ldr	r2, [pc, #68]	; (80095c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d009      	beq.n	800959a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a10      	ldr	r2, [pc, #64]	; (80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d004      	beq.n	800959a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a0e      	ldr	r2, [pc, #56]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d106      	bne.n	80095a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40012c00 	.word	0x40012c00
 80095cc:	40013400 	.word	0x40013400
 80095d0:	40015000 	.word	0x40015000

080095d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800960a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800960e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009616:	b29a      	uxth	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	b29b      	uxth	r3, r3
 800961c:	43db      	mvns	r3, r3
 800961e:	b29b      	uxth	r3, r3
 8009620:	4013      	ands	r3, r2
 8009622:	b29a      	uxth	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009638:	b084      	sub	sp, #16
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	f107 0014 	add.w	r0, r7, #20
 8009646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	b004      	add	sp, #16
 8009678:	4770      	bx	lr
	...

0800967c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800967c:	b480      	push	{r7}
 800967e:	b09d      	sub	sp, #116	; 0x74
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800969e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	78db      	ldrb	r3, [r3, #3]
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d81f      	bhi.n	80096ee <USB_ActivateEndpoint+0x72>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <USB_ActivateEndpoint+0x38>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	080096e1 	.word	0x080096e1
 80096bc:	080096f7 	.word	0x080096f7
 80096c0:	080096d3 	.word	0x080096d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80096c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096d0:	e012      	b.n	80096f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096de:	e00b      	b.n	80096f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096ec:	e004      	b.n	80096f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096f4:	e000      	b.n	80096f8 <USB_ActivateEndpoint+0x7c>
      break;
 80096f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	441a      	add	r2, r3
 8009702:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800970e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009716:	b29b      	uxth	r3, r3
 8009718:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29b      	uxth	r3, r3
 8009728:	b21b      	sxth	r3, r3
 800972a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009732:	b21a      	sxth	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	b21b      	sxth	r3, r3
 800973a:	4313      	orrs	r3, r2
 800973c:	b21b      	sxth	r3, r3
 800973e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	441a      	add	r2, r3
 800974c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800975c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009760:	b29b      	uxth	r3, r3
 8009762:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	7b1b      	ldrb	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f040 8149 	bne.w	8009a00 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8084 	beq.w	8009880 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009782:	b29b      	uxth	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	4413      	add	r3, r2
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	00da      	lsls	r2, r3, #3
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800979a:	617b      	str	r3, [r7, #20]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	88db      	ldrh	r3, [r3, #6]
 80097a0:	085b      	lsrs	r3, r3, #1
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	827b      	strh	r3, [r7, #18]
 80097ba:	8a7b      	ldrh	r3, [r7, #18]
 80097bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01b      	beq.n	80097fc <USB_ActivateEndpoint+0x180>
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097da:	823b      	strh	r3, [r7, #16]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	441a      	add	r2, r3
 80097e6:	8a3b      	ldrh	r3, [r7, #16]
 80097e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d020      	beq.n	8009846 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800981a:	81bb      	strh	r3, [r7, #12]
 800981c:	89bb      	ldrh	r3, [r7, #12]
 800981e:	f083 0320 	eor.w	r3, r3, #32
 8009822:	81bb      	strh	r3, [r7, #12]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	441a      	add	r2, r3
 800982e:	89bb      	ldrh	r3, [r7, #12]
 8009830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009840:	b29b      	uxth	r3, r3
 8009842:	8013      	strh	r3, [r2, #0]
 8009844:	e2a6      	b.n	8009d94 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800985c:	81fb      	strh	r3, [r7, #14]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	441a      	add	r2, r3
 8009868:	89fb      	ldrh	r3, [r7, #14]
 800986a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800986e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987a:	b29b      	uxth	r3, r3
 800987c:	8013      	strh	r3, [r2, #0]
 800987e:	e289      	b.n	8009d94 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	633b      	str	r3, [r7, #48]	; 0x30
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800988a:	b29b      	uxth	r3, r3
 800988c:	461a      	mov	r2, r3
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	4413      	add	r3, r2
 8009892:	633b      	str	r3, [r7, #48]	; 0x30
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	00da      	lsls	r2, r3, #3
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	4413      	add	r3, r2
 800989e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	88db      	ldrh	r3, [r3, #6]
 80098a8:	085b      	lsrs	r3, r3, #1
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098be:	b29b      	uxth	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	4413      	add	r3, r2
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	00da      	lsls	r2, r3, #3
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	4413      	add	r3, r2
 80098d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	2b3e      	cmp	r3, #62	; 0x3e
 80098de:	d918      	bls.n	8009912 <USB_ActivateEndpoint+0x296>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	095b      	lsrs	r3, r3, #5
 80098e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f003 031f 	and.w	r3, r3, #31
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <USB_ActivateEndpoint+0x27e>
 80098f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098f6:	3b01      	subs	r3, #1
 80098f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	029b      	lsls	r3, r3, #10
 8009900:	b29b      	uxth	r3, r3
 8009902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990a:	b29a      	uxth	r2, r3
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	801a      	strh	r2, [r3, #0]
 8009910:	e029      	b.n	8009966 <USB_ActivateEndpoint+0x2ea>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d112      	bne.n	8009940 <USB_ActivateEndpoint+0x2c4>
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	b29b      	uxth	r3, r3
 8009920:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009924:	b29a      	uxth	r2, r3
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009938:	b29a      	uxth	r2, r3
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	801a      	strh	r2, [r3, #0]
 800993e:	e012      	b.n	8009966 <USB_ActivateEndpoint+0x2ea>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	085b      	lsrs	r3, r3, #1
 8009946:	66bb      	str	r3, [r7, #104]	; 0x68
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <USB_ActivateEndpoint+0x2de>
 8009954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009956:	3301      	adds	r3, #1
 8009958:	66bb      	str	r3, [r7, #104]	; 0x68
 800995a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800995c:	b29b      	uxth	r3, r3
 800995e:	029b      	lsls	r3, r3, #10
 8009960:	b29a      	uxth	r2, r3
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	847b      	strh	r3, [r7, #34]	; 0x22
 8009974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01b      	beq.n	80099b6 <USB_ActivateEndpoint+0x33a>
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	b29b      	uxth	r3, r3
 800998c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009994:	843b      	strh	r3, [r7, #32]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	441a      	add	r2, r3
 80099a0:	8c3b      	ldrh	r3, [r7, #32]
 80099a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099cc:	83fb      	strh	r3, [r7, #30]
 80099ce:	8bfb      	ldrh	r3, [r7, #30]
 80099d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099d4:	83fb      	strh	r3, [r7, #30]
 80099d6:	8bfb      	ldrh	r3, [r7, #30]
 80099d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099dc:	83fb      	strh	r3, [r7, #30]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	441a      	add	r2, r3
 80099e8:	8bfb      	ldrh	r3, [r7, #30]
 80099ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8013      	strh	r3, [r2, #0]
 80099fe:	e1c9      	b.n	8009d94 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	78db      	ldrb	r3, [r3, #3]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d11e      	bne.n	8009a46 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	441a      	add	r2, r3
 8009a2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	8013      	strh	r3, [r2, #0]
 8009a44:	e01d      	b.n	8009a82 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	441a      	add	r2, r3
 8009a6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a92:	4413      	add	r3, r2
 8009a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	00da      	lsls	r2, r3, #3
 8009a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	891b      	ldrh	r3, [r3, #8]
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab4:	801a      	strh	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac6:	4413      	add	r3, r2
 8009ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	00da      	lsls	r2, r3, #3
 8009ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	895b      	ldrh	r3, [r3, #10]
 8009ade:	085b      	lsrs	r3, r3, #1
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	785b      	ldrb	r3, [r3, #1]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f040 8093 	bne.w	8009c1a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01b      	beq.n	8009b48 <USB_ActivateEndpoint+0x4cc>
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b26:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	441a      	add	r2, r3
 8009b32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d01b      	beq.n	8009b98 <USB_ActivateEndpoint+0x51c>
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b76:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	441a      	add	r2, r3
 8009b82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bae:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009bb6:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bbe:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	441a      	add	r2, r3
 8009bca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	441a      	add	r2, r3
 8009c02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	8013      	strh	r3, [r2, #0]
 8009c18:	e0bc      	b.n	8009d94 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d01d      	beq.n	8009c72 <USB_ActivateEndpoint+0x5f6>
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	441a      	add	r2, r3
 8009c5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01d      	beq.n	8009cca <USB_ActivateEndpoint+0x64e>
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	441a      	add	r2, r3
 8009cb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	78db      	ldrb	r3, [r3, #3]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d024      	beq.n	8009d1c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cf0:	f083 0320 	eor.w	r3, r3, #32
 8009cf4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	441a      	add	r2, r3
 8009d02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	8013      	strh	r3, [r2, #0]
 8009d1a:	e01d      	b.n	8009d58 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	441a      	add	r2, r3
 8009d40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	441a      	add	r2, r3
 8009d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3774      	adds	r7, #116	; 0x74
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b08d      	sub	sp, #52	; 0x34
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	7b1b      	ldrb	r3, [r3, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 808e 	bne.w	8009ed4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	785b      	ldrb	r3, [r3, #1]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d044      	beq.n	8009e4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	81bb      	strh	r3, [r7, #12]
 8009dce:	89bb      	ldrh	r3, [r7, #12]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01b      	beq.n	8009e10 <USB_DeactivateEndpoint+0x6c>
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dee:	817b      	strh	r3, [r7, #10]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	441a      	add	r2, r3
 8009dfa:	897b      	ldrh	r3, [r7, #10]
 8009dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e26:	813b      	strh	r3, [r7, #8]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	441a      	add	r2, r3
 8009e32:	893b      	ldrh	r3, [r7, #8]
 8009e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	8013      	strh	r3, [r2, #0]
 8009e48:	e192      	b.n	800a170 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	827b      	strh	r3, [r7, #18]
 8009e58:	8a7b      	ldrh	r3, [r7, #18]
 8009e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01b      	beq.n	8009e9a <USB_DeactivateEndpoint+0xf6>
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	823b      	strh	r3, [r7, #16]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	441a      	add	r2, r3
 8009e84:	8a3b      	ldrh	r3, [r7, #16]
 8009e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb0:	81fb      	strh	r3, [r7, #14]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	441a      	add	r2, r3
 8009ebc:	89fb      	ldrh	r3, [r7, #14]
 8009ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	8013      	strh	r3, [r2, #0]
 8009ed2:	e14d      	b.n	800a170 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	785b      	ldrb	r3, [r3, #1]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f040 80a5 	bne.w	800a028 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	843b      	strh	r3, [r7, #32]
 8009eec:	8c3b      	ldrh	r3, [r7, #32]
 8009eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d01b      	beq.n	8009f2e <USB_DeactivateEndpoint+0x18a>
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0c:	83fb      	strh	r3, [r7, #30]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	441a      	add	r2, r3
 8009f18:	8bfb      	ldrh	r3, [r7, #30]
 8009f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	83bb      	strh	r3, [r7, #28]
 8009f3c:	8bbb      	ldrh	r3, [r7, #28]
 8009f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d01b      	beq.n	8009f7e <USB_DeactivateEndpoint+0x1da>
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5c:	837b      	strh	r3, [r7, #26]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	441a      	add	r2, r3
 8009f68:	8b7b      	ldrh	r3, [r7, #26]
 8009f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f94:	833b      	strh	r3, [r7, #24]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	8b3b      	ldrh	r3, [r7, #24]
 8009fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fcc:	82fb      	strh	r3, [r7, #22]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	441a      	add	r2, r3
 8009fd8:	8afb      	ldrh	r3, [r7, #22]
 8009fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a004:	82bb      	strh	r3, [r7, #20]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	441a      	add	r2, r3
 800a010:	8abb      	ldrh	r3, [r7, #20]
 800a012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a01a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a022:	b29b      	uxth	r3, r3
 800a024:	8013      	strh	r3, [r2, #0]
 800a026:	e0a3      	b.n	800a170 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d01b      	beq.n	800a078 <USB_DeactivateEndpoint+0x2d4>
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a056:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	441a      	add	r2, r3
 800a062:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a06c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a074:	b29b      	uxth	r3, r3
 800a076:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01b      	beq.n	800a0c8 <USB_DeactivateEndpoint+0x324>
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a6:	853b      	strh	r3, [r7, #40]	; 0x28
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	441a      	add	r2, r3
 800a0b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0de:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	441a      	add	r2, r3
 800a0ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a116:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	441a      	add	r2, r3
 800a122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a134:	b29b      	uxth	r3, r3
 800a136:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29b      	uxth	r3, r3
 800a146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	441a      	add	r2, r3
 800a15a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a15c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3734      	adds	r7, #52	; 0x34
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b0c2      	sub	sp, #264	; 0x108
 800a182:	af00      	add	r7, sp, #0
 800a184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a18c:	6018      	str	r0, [r3, #0]
 800a18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a196:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	785b      	ldrb	r3, [r3, #1]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	f040 867b 	bne.w	800aea0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699a      	ldr	r2, [r3, #24]
 800a1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d908      	bls.n	800a1d8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1d6:	e007      	b.n	800a1e8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	7b1b      	ldrb	r3, [r3, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d13a      	bne.n	800a26e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6959      	ldr	r1, [r3, #20]
 800a204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	88da      	ldrh	r2, [r3, #6]
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	b29b      	uxth	r3, r3
 800a216:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a21a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a21e:	6800      	ldr	r0, [r0, #0]
 800a220:	f001 fc1d 	bl	800ba5e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	613b      	str	r3, [r7, #16]
 800a230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a23e:	b29b      	uxth	r3, r3
 800a240:	461a      	mov	r2, r3
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	4413      	add	r3, r2
 800a246:	613b      	str	r3, [r7, #16]
 800a248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	00da      	lsls	r2, r3, #3
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4413      	add	r3, r2
 800a25a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a264:	b29a      	uxth	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	801a      	strh	r2, [r3, #0]
 800a26a:	f000 bde3 	b.w	800ae34 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	78db      	ldrb	r3, [r3, #3]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	f040 843a 	bne.w	800aaf4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6a1a      	ldr	r2, [r3, #32]
 800a28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	429a      	cmp	r2, r3
 800a29a:	f240 83b7 	bls.w	800aa0c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	441a      	add	r2, r3
 800a2e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6a1a      	ldr	r2, [r3, #32]
 800a306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30a:	1ad2      	subs	r2, r2, r3
 800a30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 81b3 	beq.w	800a6a6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	633b      	str	r3, [r7, #48]	; 0x30
 800a34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	785b      	ldrb	r3, [r3, #1]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d16d      	bne.n	800a438 <USB_EPStartXfer+0x2ba>
 800a35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
 800a368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a376:	b29b      	uxth	r3, r3
 800a378:	461a      	mov	r2, r3
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	4413      	add	r3, r2
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	00da      	lsls	r2, r3, #3
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	4413      	add	r3, r2
 800a392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a396:	627b      	str	r3, [r7, #36]	; 0x24
 800a398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39c:	2b3e      	cmp	r3, #62	; 0x3e
 800a39e:	d91c      	bls.n	800a3da <USB_EPStartXfer+0x25c>
 800a3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a4:	095b      	lsrs	r3, r3, #5
 800a3a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ae:	f003 031f 	and.w	r3, r3, #31
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d104      	bne.n	800a3c0 <USB_EPStartXfer+0x242>
 800a3b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	029b      	lsls	r3, r3, #10
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	801a      	strh	r2, [r3, #0]
 800a3d8:	e053      	b.n	800a482 <USB_EPStartXfer+0x304>
 800a3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d112      	bne.n	800a408 <USB_EPStartXfer+0x28a>
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	801a      	strh	r2, [r3, #0]
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a400:	b29a      	uxth	r2, r3
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	e03c      	b.n	800a482 <USB_EPStartXfer+0x304>
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <USB_EPStartXfer+0x2aa>
 800a41e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a422:	3301      	adds	r3, #1
 800a424:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a428:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	029b      	lsls	r3, r3, #10
 800a430:	b29a      	uxth	r2, r3
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	801a      	strh	r2, [r3, #0]
 800a436:	e024      	b.n	800a482 <USB_EPStartXfer+0x304>
 800a438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d11c      	bne.n	800a482 <USB_EPStartXfer+0x304>
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	4413      	add	r3, r2
 800a45e:	633b      	str	r3, [r7, #48]	; 0x30
 800a460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	00da      	lsls	r2, r3, #3
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	4413      	add	r3, r2
 800a472:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a476:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	895b      	ldrh	r3, [r3, #10]
 800a48e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6959      	ldr	r1, [r3, #20]
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4b0:	6800      	ldr	r0, [r0, #0]
 800a4b2:	f001 fad4 	bl	800ba5e <USB_WritePMA>
            ep->xfer_buff += len;
 800a4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c6:	441a      	add	r2, r3
 800a4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6a1a      	ldr	r2, [r3, #32]
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d90f      	bls.n	800a510 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6a1a      	ldr	r2, [r3, #32]
 800a4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a500:	1ad2      	subs	r2, r2, r3
 800a502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	621a      	str	r2, [r3, #32]
 800a50e:	e00e      	b.n	800a52e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2200      	movs	r2, #0
 800a52c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	785b      	ldrb	r3, [r3, #1]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d16d      	bne.n	800a61a <USB_EPStartXfer+0x49c>
 800a53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	61bb      	str	r3, [r7, #24]
 800a54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a558:	b29b      	uxth	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	4413      	add	r3, r2
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	00da      	lsls	r2, r3, #3
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	4413      	add	r3, r2
 800a574:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57e:	2b3e      	cmp	r3, #62	; 0x3e
 800a580:	d91c      	bls.n	800a5bc <USB_EPStartXfer+0x43e>
 800a582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a586:	095b      	lsrs	r3, r3, #5
 800a588:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a590:	f003 031f 	and.w	r3, r3, #31
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <USB_EPStartXfer+0x424>
 800a598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a59c:	3b01      	subs	r3, #1
 800a59e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	029b      	lsls	r3, r3, #10
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	801a      	strh	r2, [r3, #0]
 800a5ba:	e059      	b.n	800a670 <USB_EPStartXfer+0x4f2>
 800a5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d112      	bne.n	800a5ea <USB_EPStartXfer+0x46c>
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	e042      	b.n	800a670 <USB_EPStartXfer+0x4f2>
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ee:	085b      	lsrs	r3, r3, #1
 800a5f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <USB_EPStartXfer+0x48c>
 800a600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a604:	3301      	adds	r3, #1
 800a606:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a60a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a60e:	b29b      	uxth	r3, r3
 800a610:	029b      	lsls	r3, r3, #10
 800a612:	b29a      	uxth	r2, r3
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	e02a      	b.n	800a670 <USB_EPStartXfer+0x4f2>
 800a61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	785b      	ldrb	r3, [r3, #1]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d122      	bne.n	800a670 <USB_EPStartXfer+0x4f2>
 800a62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	623b      	str	r3, [r7, #32]
 800a636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a644:	b29b      	uxth	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	4413      	add	r3, r2
 800a64c:	623b      	str	r3, [r7, #32]
 800a64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	00da      	lsls	r2, r3, #3
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	4413      	add	r3, r2
 800a660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a664:	61fb      	str	r3, [r7, #28]
 800a666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	891b      	ldrh	r3, [r3, #8]
 800a67c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6959      	ldr	r1, [r3, #20]
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a690:	b29b      	uxth	r3, r3
 800a692:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a696:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a69a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	f001 f9dd 	bl	800ba5e <USB_WritePMA>
 800a6a4:	e3c6      	b.n	800ae34 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	785b      	ldrb	r3, [r3, #1]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d16d      	bne.n	800a792 <USB_EPStartXfer+0x614>
 800a6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d6:	4413      	add	r3, r2
 800a6d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	00da      	lsls	r2, r3, #3
 800a6e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6f0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f6:	2b3e      	cmp	r3, #62	; 0x3e
 800a6f8:	d91c      	bls.n	800a734 <USB_EPStartXfer+0x5b6>
 800a6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a708:	f003 031f 	and.w	r3, r3, #31
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d104      	bne.n	800a71a <USB_EPStartXfer+0x59c>
 800a710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a714:	3b01      	subs	r3, #1
 800a716:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a71a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a71e:	b29b      	uxth	r3, r3
 800a720:	029b      	lsls	r3, r3, #10
 800a722:	b29b      	uxth	r3, r3
 800a724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a730:	801a      	strh	r2, [r3, #0]
 800a732:	e059      	b.n	800a7e8 <USB_EPStartXfer+0x66a>
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d112      	bne.n	800a762 <USB_EPStartXfer+0x5e4>
 800a73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a746:	b29a      	uxth	r2, r3
 800a748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e042      	b.n	800a7e8 <USB_EPStartXfer+0x66a>
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <USB_EPStartXfer+0x604>
 800a778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a77c:	3301      	adds	r3, #1
 800a77e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a786:	b29b      	uxth	r3, r3
 800a788:	029b      	lsls	r3, r3, #10
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a78e:	801a      	strh	r2, [r3, #0]
 800a790:	e02a      	b.n	800a7e8 <USB_EPStartXfer+0x66a>
 800a792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d122      	bne.n	800a7e8 <USB_EPStartXfer+0x66a>
 800a7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7c2:	4413      	add	r3, r2
 800a7c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	00da      	lsls	r2, r3, #3
 800a7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	891b      	ldrh	r3, [r3, #8]
 800a7f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6959      	ldr	r1, [r3, #20]
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a80e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a812:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a816:	6800      	ldr	r0, [r0, #0]
 800a818:	f001 f921 	bl	800ba5e <USB_WritePMA>
            ep->xfer_buff += len;
 800a81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	695a      	ldr	r2, [r3, #20]
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82c:	441a      	add	r2, r3
 800a82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6a1a      	ldr	r2, [r3, #32]
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	429a      	cmp	r2, r3
 800a854:	d90f      	bls.n	800a876 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6a1a      	ldr	r2, [r3, #32]
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a866:	1ad2      	subs	r2, r2, r3
 800a868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	621a      	str	r2, [r3, #32]
 800a874:	e00e      	b.n	800a894 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2200      	movs	r2, #0
 800a892:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	785b      	ldrb	r3, [r3, #1]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d16d      	bne.n	800a98c <USB_EPStartXfer+0x80e>
 800a8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	4413      	add	r3, r2
 800a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	00da      	lsls	r2, r3, #3
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f0:	2b3e      	cmp	r3, #62	; 0x3e
 800a8f2:	d91c      	bls.n	800a92e <USB_EPStartXfer+0x7b0>
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f8:	095b      	lsrs	r3, r3, #5
 800a8fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	f003 031f 	and.w	r3, r3, #31
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <USB_EPStartXfer+0x796>
 800a90a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90e:	3b01      	subs	r3, #1
 800a910:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a918:	b29b      	uxth	r3, r3
 800a91a:	029b      	lsls	r3, r3, #10
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a926:	b29a      	uxth	r2, r3
 800a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	e053      	b.n	800a9d6 <USB_EPStartXfer+0x858>
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a932:	2b00      	cmp	r3, #0
 800a934:	d112      	bne.n	800a95c <USB_EPStartXfer+0x7de>
 800a936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a940:	b29a      	uxth	r2, r3
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a954:	b29a      	uxth	r2, r3
 800a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	e03c      	b.n	800a9d6 <USB_EPStartXfer+0x858>
 800a95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a960:	085b      	lsrs	r3, r3, #1
 800a962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <USB_EPStartXfer+0x7fe>
 800a972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a976:	3301      	adds	r3, #1
 800a978:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a980:	b29b      	uxth	r3, r3
 800a982:	029b      	lsls	r3, r3, #10
 800a984:	b29a      	uxth	r2, r3
 800a986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a988:	801a      	strh	r2, [r3, #0]
 800a98a:	e024      	b.n	800a9d6 <USB_EPStartXfer+0x858>
 800a98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	785b      	ldrb	r3, [r3, #1]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d11c      	bne.n	800a9d6 <USB_EPStartXfer+0x858>
 800a99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b0:	4413      	add	r3, r2
 800a9b2:	643b      	str	r3, [r7, #64]	; 0x40
 800a9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	00da      	lsls	r2, r3, #3
 800a9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	895b      	ldrh	r3, [r3, #10]
 800a9e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6959      	ldr	r1, [r3, #20]
 800a9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa00:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa04:	6800      	ldr	r0, [r0, #0]
 800aa06:	f001 f82a 	bl	800ba5e <USB_WritePMA>
 800aa0a:	e213      	b.n	800ae34 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa42:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	441a      	add	r2, r3
 800aa60:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa98:	4413      	add	r3, r2
 800aa9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	00da      	lsls	r2, r3, #3
 800aaaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaac:	4413      	add	r3, r2
 800aaae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aab2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aabc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	891b      	ldrh	r3, [r3, #8]
 800aaca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6959      	ldr	r1, [r3, #20]
 800aada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aade:	b29b      	uxth	r3, r3
 800aae0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aae4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aae8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aaec:	6800      	ldr	r0, [r0, #0]
 800aaee:	f000 ffb6 	bl	800ba5e <USB_WritePMA>
 800aaf2:	e19f      	b.n	800ae34 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6a1a      	ldr	r2, [r3, #32]
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	881b      	ldrh	r3, [r3, #0]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 80bc 	beq.w	800acb2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	673b      	str	r3, [r7, #112]	; 0x70
 800ab46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d16d      	bne.n	800ac32 <USB_EPStartXfer+0xab4>
 800ab56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab76:	4413      	add	r3, r2
 800ab78:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00da      	lsls	r2, r3, #3
 800ab88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab90:	667b      	str	r3, [r7, #100]	; 0x64
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab96:	2b3e      	cmp	r3, #62	; 0x3e
 800ab98:	d91c      	bls.n	800abd4 <USB_EPStartXfer+0xa56>
 800ab9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9e:	095b      	lsrs	r3, r3, #5
 800aba0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	f003 031f 	and.w	r3, r3, #31
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <USB_EPStartXfer+0xa3c>
 800abb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abb4:	3b01      	subs	r3, #1
 800abb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	029b      	lsls	r3, r3, #10
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abcc:	b29a      	uxth	r2, r3
 800abce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abd0:	801a      	strh	r2, [r3, #0]
 800abd2:	e053      	b.n	800ac7c <USB_EPStartXfer+0xafe>
 800abd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d112      	bne.n	800ac02 <USB_EPStartXfer+0xa84>
 800abdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e03c      	b.n	800ac7c <USB_EPStartXfer+0xafe>
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac06:	085b      	lsrs	r3, r3, #1
 800ac08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <USB_EPStartXfer+0xaa4>
 800ac18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	029b      	lsls	r3, r3, #10
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e024      	b.n	800ac7c <USB_EPStartXfer+0xafe>
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	785b      	ldrb	r3, [r3, #1]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d11c      	bne.n	800ac7c <USB_EPStartXfer+0xafe>
 800ac42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	461a      	mov	r2, r3
 800ac54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac56:	4413      	add	r3, r2
 800ac58:	673b      	str	r3, [r7, #112]	; 0x70
 800ac5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	00da      	lsls	r2, r3, #3
 800ac68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	895b      	ldrh	r3, [r3, #10]
 800ac88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6959      	ldr	r1, [r3, #20]
 800ac98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aca2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aca6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	f000 fed7 	bl	800ba5e <USB_WritePMA>
 800acb0:	e0c0      	b.n	800ae34 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	785b      	ldrb	r3, [r3, #1]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d16d      	bne.n	800ad9e <USB_EPStartXfer+0xc20>
 800acc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acdc:	b29b      	uxth	r3, r3
 800acde:	461a      	mov	r2, r3
 800ace0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ace2:	4413      	add	r3, r2
 800ace4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ace6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	00da      	lsls	r2, r3, #3
 800acf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acf6:	4413      	add	r3, r2
 800acf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acfc:	67bb      	str	r3, [r7, #120]	; 0x78
 800acfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad02:	2b3e      	cmp	r3, #62	; 0x3e
 800ad04:	d91c      	bls.n	800ad40 <USB_EPStartXfer+0xbc2>
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	f003 031f 	and.w	r3, r3, #31
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d104      	bne.n	800ad26 <USB_EPStartXfer+0xba8>
 800ad1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad20:	3b01      	subs	r3, #1
 800ad22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	029b      	lsls	r3, r3, #10
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad3c:	801a      	strh	r2, [r3, #0]
 800ad3e:	e05f      	b.n	800ae00 <USB_EPStartXfer+0xc82>
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d112      	bne.n	800ad6e <USB_EPStartXfer+0xbf0>
 800ad48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad56:	801a      	strh	r2, [r3, #0]
 800ad58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6a:	801a      	strh	r2, [r3, #0]
 800ad6c:	e048      	b.n	800ae00 <USB_EPStartXfer+0xc82>
 800ad6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad72:	085b      	lsrs	r3, r3, #1
 800ad74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <USB_EPStartXfer+0xc10>
 800ad84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad88:	3301      	adds	r3, #1
 800ad8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	029b      	lsls	r3, r3, #10
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad9a:	801a      	strh	r2, [r3, #0]
 800ad9c:	e030      	b.n	800ae00 <USB_EPStartXfer+0xc82>
 800ad9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	785b      	ldrb	r3, [r3, #1]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d128      	bne.n	800ae00 <USB_EPStartXfer+0xc82>
 800adae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adca:	b29b      	uxth	r3, r3
 800adcc:	461a      	mov	r2, r3
 800adce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800add2:	4413      	add	r3, r2
 800add4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800add8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800addc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	00da      	lsls	r2, r3, #3
 800ade6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adea:	4413      	add	r3, r2
 800adec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	891b      	ldrh	r3, [r3, #8]
 800ae0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6959      	ldr	r1, [r3, #20]
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae2e:	6800      	ldr	r0, [r0, #0]
 800ae30:	f000 fe15 	bl	800ba5e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5a:	817b      	strh	r3, [r7, #10]
 800ae5c:	897b      	ldrh	r3, [r7, #10]
 800ae5e:	f083 0310 	eor.w	r3, r3, #16
 800ae62:	817b      	strh	r3, [r7, #10]
 800ae64:	897b      	ldrh	r3, [r7, #10]
 800ae66:	f083 0320 	eor.w	r3, r3, #32
 800ae6a:	817b      	strh	r3, [r7, #10]
 800ae6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	441a      	add	r2, r3
 800ae86:	897b      	ldrh	r3, [r7, #10]
 800ae88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	8013      	strh	r3, [r2, #0]
 800ae9c:	f000 bc9f 	b.w	800b7de <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	7b1b      	ldrb	r3, [r3, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f040 80ae 	bne.w	800b00e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800aeb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d917      	bls.n	800aefe <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699a      	ldr	r2, [r3, #24]
 800aeea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	619a      	str	r2, [r3, #24]
 800aefc:	e00e      	b.n	800af1c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800aefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800af0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2200      	movs	r2, #0
 800af1a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af38:	b29b      	uxth	r3, r3
 800af3a:	461a      	mov	r2, r3
 800af3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af40:	4413      	add	r3, r2
 800af42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	00da      	lsls	r2, r3, #3
 800af54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af58:	4413      	add	r3, r2
 800af5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af66:	2b3e      	cmp	r3, #62	; 0x3e
 800af68:	d91d      	bls.n	800afa6 <USB_EPStartXfer+0xe28>
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6e:	095b      	lsrs	r3, r3, #5
 800af70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af78:	f003 031f 	and.w	r3, r3, #31
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d104      	bne.n	800af8a <USB_EPStartXfer+0xe0c>
 800af80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af84:	3b01      	subs	r3, #1
 800af86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af8e:	b29b      	uxth	r3, r3
 800af90:	029b      	lsls	r3, r3, #10
 800af92:	b29b      	uxth	r3, r3
 800af94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa2:	801a      	strh	r2, [r3, #0]
 800afa4:	e3e1      	b.n	800b76a <USB_EPStartXfer+0x15ec>
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d116      	bne.n	800afdc <USB_EPStartXfer+0xe5e>
 800afae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afba:	b29a      	uxth	r2, r3
 800afbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	e3c6      	b.n	800b76a <USB_EPStartXfer+0x15ec>
 800afdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe0:	085b      	lsrs	r3, r3, #1
 800afe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <USB_EPStartXfer+0xe7e>
 800aff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aff6:	3301      	adds	r3, #1
 800aff8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800affc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b000:	b29b      	uxth	r3, r3
 800b002:	029b      	lsls	r3, r3, #10
 800b004:	b29a      	uxth	r2, r3
 800b006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b00a:	801a      	strh	r2, [r3, #0]
 800b00c:	e3ad      	b.n	800b76a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	78db      	ldrb	r3, [r3, #3]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	f040 8200 	bne.w	800b420 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	785b      	ldrb	r3, [r3, #1]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f040 8091 	bne.w	800b154 <USB_EPStartXfer+0xfd6>
 800b032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b04e:	b29b      	uxth	r3, r3
 800b050:	461a      	mov	r2, r3
 800b052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b056:	4413      	add	r3, r2
 800b058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	00da      	lsls	r2, r3, #3
 800b06a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b06e:	4413      	add	r3, r2
 800b070:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b3e      	cmp	r3, #62	; 0x3e
 800b086:	d925      	bls.n	800b0d4 <USB_EPStartXfer+0xf56>
 800b088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f003 031f 	and.w	r3, r3, #31
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <USB_EPStartXfer+0xf3a>
 800b0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	029b      	lsls	r3, r3, #10
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0d0:	801a      	strh	r2, [r3, #0]
 800b0d2:	e074      	b.n	800b1be <USB_EPStartXfer+0x1040>
 800b0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d116      	bne.n	800b112 <USB_EPStartXfer+0xf94>
 800b0e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0f6:	801a      	strh	r2, [r3, #0]
 800b0f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b108:	b29a      	uxth	r2, r3
 800b10a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b10e:	801a      	strh	r2, [r3, #0]
 800b110:	e055      	b.n	800b1be <USB_EPStartXfer+0x1040>
 800b112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	d004      	beq.n	800b142 <USB_EPStartXfer+0xfc4>
 800b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13c:	3301      	adds	r3, #1
 800b13e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b146:	b29b      	uxth	r3, r3
 800b148:	029b      	lsls	r3, r3, #10
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b150:	801a      	strh	r2, [r3, #0]
 800b152:	e034      	b.n	800b1be <USB_EPStartXfer+0x1040>
 800b154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	785b      	ldrb	r3, [r3, #1]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d12c      	bne.n	800b1be <USB_EPStartXfer+0x1040>
 800b164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b180:	b29b      	uxth	r3, r3
 800b182:	461a      	mov	r2, r3
 800b184:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b188:	4413      	add	r3, r2
 800b18a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	00da      	lsls	r2, r3, #3
 800b19c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1bc:	801a      	strh	r2, [r3, #0]
 800b1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	785b      	ldrb	r3, [r3, #1]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f040 8091 	bne.w	800b300 <USB_EPStartXfer+0x1182>
 800b1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b202:	4413      	add	r3, r2
 800b204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	00da      	lsls	r2, r3, #3
 800b216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b21a:	4413      	add	r3, r2
 800b21c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	2b3e      	cmp	r3, #62	; 0x3e
 800b232:	d925      	bls.n	800b280 <USB_EPStartXfer+0x1102>
 800b234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	095b      	lsrs	r3, r3, #5
 800b242:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 031f 	and.w	r3, r3, #31
 800b256:	2b00      	cmp	r3, #0
 800b258:	d104      	bne.n	800b264 <USB_EPStartXfer+0x10e6>
 800b25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b25e:	3b01      	subs	r3, #1
 800b260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b268:	b29b      	uxth	r3, r3
 800b26a:	029b      	lsls	r3, r3, #10
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b276:	b29a      	uxth	r2, r3
 800b278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	e06d      	b.n	800b35c <USB_EPStartXfer+0x11de>
 800b280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d116      	bne.n	800b2be <USB_EPStartXfer+0x1140>
 800b290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29b      	uxth	r3, r3
 800b298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2a2:	801a      	strh	r2, [r3, #0]
 800b2a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2ba:	801a      	strh	r2, [r3, #0]
 800b2bc:	e04e      	b.n	800b35c <USB_EPStartXfer+0x11de>
 800b2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	085b      	lsrs	r3, r3, #1
 800b2cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d004      	beq.n	800b2ee <USB_EPStartXfer+0x1170>
 800b2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	029b      	lsls	r3, r3, #10
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2fc:	801a      	strh	r2, [r3, #0]
 800b2fe:	e02d      	b.n	800b35c <USB_EPStartXfer+0x11de>
 800b300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	785b      	ldrb	r3, [r3, #1]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d125      	bne.n	800b35c <USB_EPStartXfer+0x11de>
 800b310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b31e:	b29b      	uxth	r3, r3
 800b320:	461a      	mov	r2, r3
 800b322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b326:	4413      	add	r3, r2
 800b328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	00da      	lsls	r2, r3, #3
 800b33a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b33e:	4413      	add	r3, r2
 800b340:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b344:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	b29a      	uxth	r2, r3
 800b356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b35a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 81fe 	beq.w	800b76a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b38e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d005      	beq.n	800b3a6 <USB_EPStartXfer+0x1228>
 800b39a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10d      	bne.n	800b3c2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b3a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f040 81db 	bne.w	800b76a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b3b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f040 81d4 	bne.w	800b76a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3e8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	441a      	add	r2, r3
 800b406:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b40a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b40e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	8013      	strh	r3, [r2, #0]
 800b41e:	e1a4      	b.n	800b76a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	78db      	ldrb	r3, [r3, #3]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	f040 819a 	bne.w	800b766 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	699a      	ldr	r2, [r3, #24]
 800b43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d917      	bls.n	800b47e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	699a      	ldr	r2, [r3, #24]
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	619a      	str	r2, [r3, #24]
 800b47c:	e00e      	b.n	800b49c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2200      	movs	r2, #0
 800b49a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	785b      	ldrb	r3, [r3, #1]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d178      	bne.n	800b59e <USB_EPStartXfer+0x1420>
 800b4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	00da      	lsls	r2, r3, #3
 800b4e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f6:	2b3e      	cmp	r3, #62	; 0x3e
 800b4f8:	d91d      	bls.n	800b536 <USB_EPStartXfer+0x13b8>
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	095b      	lsrs	r3, r3, #5
 800b500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b508:	f003 031f 	and.w	r3, r3, #31
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d104      	bne.n	800b51a <USB_EPStartXfer+0x139c>
 800b510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b514:	3b01      	subs	r3, #1
 800b516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b51e:	b29b      	uxth	r3, r3
 800b520:	029b      	lsls	r3, r3, #10
 800b522:	b29b      	uxth	r3, r3
 800b524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b532:	801a      	strh	r2, [r3, #0]
 800b534:	e064      	b.n	800b600 <USB_EPStartXfer+0x1482>
 800b536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d116      	bne.n	800b56c <USB_EPStartXfer+0x13ee>
 800b53e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	b29b      	uxth	r3, r3
 800b546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b550:	801a      	strh	r2, [r3, #0]
 800b552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	b29b      	uxth	r3, r3
 800b55a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b55e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b562:	b29a      	uxth	r2, r3
 800b564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b568:	801a      	strh	r2, [r3, #0]
 800b56a:	e049      	b.n	800b600 <USB_EPStartXfer+0x1482>
 800b56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b570:	085b      	lsrs	r3, r3, #1
 800b572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <USB_EPStartXfer+0x140e>
 800b582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b586:	3301      	adds	r3, #1
 800b588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b590:	b29b      	uxth	r3, r3
 800b592:	029b      	lsls	r3, r3, #10
 800b594:	b29a      	uxth	r2, r3
 800b596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b59a:	801a      	strh	r2, [r3, #0]
 800b59c:	e030      	b.n	800b600 <USB_EPStartXfer+0x1482>
 800b59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	785b      	ldrb	r3, [r3, #1]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d128      	bne.n	800b600 <USB_EPStartXfer+0x1482>
 800b5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	00da      	lsls	r2, r3, #3
 800b5e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5fe:	801a      	strh	r2, [r3, #0]
 800b600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b604:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d178      	bne.n	800b710 <USB_EPStartXfer+0x1592>
 800b61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	461a      	mov	r2, r3
 800b63e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b642:	4413      	add	r3, r2
 800b644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	00da      	lsls	r2, r3, #3
 800b656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b65a:	4413      	add	r3, r2
 800b65c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	2b3e      	cmp	r3, #62	; 0x3e
 800b66a:	d91d      	bls.n	800b6a8 <USB_EPStartXfer+0x152a>
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	095b      	lsrs	r3, r3, #5
 800b672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	f003 031f 	and.w	r3, r3, #31
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d104      	bne.n	800b68c <USB_EPStartXfer+0x150e>
 800b682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b686:	3b01      	subs	r3, #1
 800b688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b68c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b690:	b29b      	uxth	r3, r3
 800b692:	029b      	lsls	r3, r3, #10
 800b694:	b29b      	uxth	r3, r3
 800b696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b69a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6a4:	801a      	strh	r2, [r3, #0]
 800b6a6:	e060      	b.n	800b76a <USB_EPStartXfer+0x15ec>
 800b6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d116      	bne.n	800b6de <USB_EPStartXfer+0x1560>
 800b6b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c2:	801a      	strh	r2, [r3, #0]
 800b6c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6da:	801a      	strh	r2, [r3, #0]
 800b6dc:	e045      	b.n	800b76a <USB_EPStartXfer+0x15ec>
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	085b      	lsrs	r3, r3, #1
 800b6e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <USB_EPStartXfer+0x1580>
 800b6f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b702:	b29b      	uxth	r3, r3
 800b704:	029b      	lsls	r3, r3, #10
 800b706:	b29a      	uxth	r2, r3
 800b708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b70c:	801a      	strh	r2, [r3, #0]
 800b70e:	e02c      	b.n	800b76a <USB_EPStartXfer+0x15ec>
 800b710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	785b      	ldrb	r3, [r3, #1]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d124      	bne.n	800b76a <USB_EPStartXfer+0x15ec>
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b72e:	b29b      	uxth	r3, r3
 800b730:	461a      	mov	r2, r3
 800b732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b736:	4413      	add	r3, r2
 800b738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	00da      	lsls	r2, r3, #3
 800b74a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b74e:	4413      	add	r3, r2
 800b750:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b762:	801a      	strh	r2, [r3, #0]
 800b764:	e001      	b.n	800b76a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e03a      	b.n	800b7e0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	b29b      	uxth	r3, r3
 800b788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b790:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b798:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b79c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	441a      	add	r2, r3
 800b7c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d020      	beq.n	800b83e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b80e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b812:	81bb      	strh	r3, [r7, #12]
 800b814:	89bb      	ldrh	r3, [r7, #12]
 800b816:	f083 0310 	eor.w	r3, r3, #16
 800b81a:	81bb      	strh	r3, [r7, #12]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	441a      	add	r2, r3
 800b826:	89bb      	ldrh	r3, [r7, #12]
 800b828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b82c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	b29b      	uxth	r3, r3
 800b83a:	8013      	strh	r3, [r2, #0]
 800b83c:	e01f      	b.n	800b87e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b854:	81fb      	strh	r3, [r7, #14]
 800b856:	89fb      	ldrh	r3, [r7, #14]
 800b858:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b85c:	81fb      	strh	r3, [r7, #14]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	441a      	add	r2, r3
 800b868:	89fb      	ldrh	r3, [r7, #14]
 800b86a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b86e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	7b1b      	ldrb	r3, [r3, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f040 809d 	bne.w	800b9da <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d04c      	beq.n	800b942 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	823b      	strh	r3, [r7, #16]
 800b8b6:	8a3b      	ldrh	r3, [r7, #16]
 800b8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d01b      	beq.n	800b8f8 <USB_EPClearStall+0x6c>
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d6:	81fb      	strh	r3, [r7, #14]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	441a      	add	r2, r3
 800b8e2:	89fb      	ldrh	r3, [r7, #14]
 800b8e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	78db      	ldrb	r3, [r3, #3]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d06c      	beq.n	800b9da <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b916:	81bb      	strh	r3, [r7, #12]
 800b918:	89bb      	ldrh	r3, [r7, #12]
 800b91a:	f083 0320 	eor.w	r3, r3, #32
 800b91e:	81bb      	strh	r3, [r7, #12]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	441a      	add	r2, r3
 800b92a:	89bb      	ldrh	r3, [r7, #12]
 800b92c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	8013      	strh	r3, [r2, #0]
 800b940:	e04b      	b.n	800b9da <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	82fb      	strh	r3, [r7, #22]
 800b950:	8afb      	ldrh	r3, [r7, #22]
 800b952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01b      	beq.n	800b992 <USB_EPClearStall+0x106>
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b96c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b970:	82bb      	strh	r3, [r7, #20]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	441a      	add	r2, r3
 800b97c:	8abb      	ldrh	r3, [r7, #20]
 800b97e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b98e:	b29b      	uxth	r3, r3
 800b990:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a8:	827b      	strh	r3, [r7, #18]
 800b9aa:	8a7b      	ldrh	r3, [r7, #18]
 800b9ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b9b0:	827b      	strh	r3, [r7, #18]
 800b9b2:	8a7b      	ldrh	r3, [r7, #18]
 800b9b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b9b8:	827b      	strh	r3, [r7, #18]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	441a      	add	r2, r3
 800b9c4:	8a7b      	ldrh	r3, [r7, #18]
 800b9c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9f4:	78fb      	ldrb	r3, [r7, #3]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2280      	movs	r2, #128	; 0x80
 800b9fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba50:	68fb      	ldr	r3, [r7, #12]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b08d      	sub	sp, #52	; 0x34
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	80fb      	strh	r3, [r7, #6]
 800ba70:	4613      	mov	r3, r2
 800ba72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba74:	88bb      	ldrh	r3, [r7, #4]
 800ba76:	3301      	adds	r3, #1
 800ba78:	085b      	lsrs	r3, r3, #1
 800ba7a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba84:	88fa      	ldrh	r2, [r7, #6]
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	4413      	add	r3, r2
 800ba8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba8e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba94:	e01b      	b.n	800bace <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	3301      	adds	r3, #1
 800baa0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	021b      	lsls	r3, r3, #8
 800baaa:	b29b      	uxth	r3, r3
 800baac:	461a      	mov	r2, r3
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	3302      	adds	r3, #2
 800bac0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	3301      	adds	r3, #1
 800bac6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	3b01      	subs	r3, #1
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1e0      	bne.n	800ba96 <USB_WritePMA+0x38>
  }
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	3734      	adds	r7, #52	; 0x34
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b08b      	sub	sp, #44	; 0x2c
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	4611      	mov	r1, r2
 800baee:	461a      	mov	r2, r3
 800baf0:	460b      	mov	r3, r1
 800baf2:	80fb      	strh	r3, [r7, #6]
 800baf4:	4613      	mov	r3, r2
 800baf6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800baf8:	88bb      	ldrh	r3, [r7, #4]
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb08:	88fa      	ldrh	r2, [r7, #6]
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb12:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	627b      	str	r3, [r7, #36]	; 0x24
 800bb18:	e018      	b.n	800bb4c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	3302      	adds	r3, #2
 800bb26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	3301      	adds	r3, #1
 800bb34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	0a1b      	lsrs	r3, r3, #8
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	3301      	adds	r3, #1
 800bb44:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1e3      	bne.n	800bb1a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bb52:	88bb      	ldrh	r3, [r7, #4]
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d007      	beq.n	800bb6e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	701a      	strb	r2, [r3, #0]
  }
}
 800bb6e:	bf00      	nop
 800bb70:	372c      	adds	r7, #44	; 0x2c
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb86:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb8a:	f002 f933 	bl	800ddf4 <USBD_static_malloc>
 800bb8e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d105      	bne.n	800bba2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb9e:	2302      	movs	r3, #2
 800bba0:	e066      	b.n	800bc70 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7c1b      	ldrb	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d119      	bne.n	800bbe6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	2181      	movs	r1, #129	; 0x81
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 ffbf 	bl	800db3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbca:	2202      	movs	r2, #2
 800bbcc:	2101      	movs	r1, #1
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f001 ffb5 	bl	800db3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2210      	movs	r2, #16
 800bbe0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbe4:	e016      	b.n	800bc14 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbe6:	2340      	movs	r3, #64	; 0x40
 800bbe8:	2202      	movs	r2, #2
 800bbea:	2181      	movs	r1, #129	; 0x81
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f001 ffa6 	bl	800db3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbf8:	2340      	movs	r3, #64	; 0x40
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f001 ff9d 	bl	800db3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2210      	movs	r2, #16
 800bc10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc14:	2308      	movs	r3, #8
 800bc16:	2203      	movs	r2, #3
 800bc18:	2182      	movs	r1, #130	; 0x82
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f001 ff8f 	bl	800db3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7c1b      	ldrb	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d109      	bne.n	800bc5e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc54:	2101      	movs	r1, #1
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f002 f861 	bl	800dd1e <USBD_LL_PrepareReceive>
 800bc5c:	e007      	b.n	800bc6e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc64:	2340      	movs	r3, #64	; 0x40
 800bc66:	2101      	movs	r1, #1
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f002 f858 	bl	800dd1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc84:	2181      	movs	r1, #129	; 0x81
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f001 ff7f 	bl	800db8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc92:	2101      	movs	r1, #1
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f001 ff78 	bl	800db8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bca2:	2182      	movs	r1, #130	; 0x82
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f001 ff70 	bl	800db8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00e      	beq.n	800bce2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f002 f89b 	bl	800de10 <USBD_static_free>
    pdev->pClassData = NULL;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e0af      	b.n	800be74 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d03f      	beq.n	800bda0 <USBD_CDC_Setup+0xb4>
 800bd20:	2b20      	cmp	r3, #32
 800bd22:	f040 809f 	bne.w	800be64 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	88db      	ldrh	r3, [r3, #6]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d02e      	beq.n	800bd8c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	da16      	bge.n	800bd66 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bd44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	88d2      	ldrh	r2, [r2, #6]
 800bd4a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	88db      	ldrh	r3, [r3, #6]
 800bd50:	2b07      	cmp	r3, #7
 800bd52:	bf28      	it	cs
 800bd54:	2307      	movcs	r3, #7
 800bd56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	89fa      	ldrh	r2, [r7, #14]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f001 faeb 	bl	800d33a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bd64:	e085      	b.n	800be72 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	785a      	ldrb	r2, [r3, #1]
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	88db      	ldrh	r3, [r3, #6]
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd7c:	6939      	ldr	r1, [r7, #16]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	88db      	ldrh	r3, [r3, #6]
 800bd82:	461a      	mov	r2, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f001 fb04 	bl	800d392 <USBD_CtlPrepareRx>
      break;
 800bd8a:	e072      	b.n	800be72 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	7850      	ldrb	r0, [r2, #1]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	4798      	blx	r3
      break;
 800bd9e:	e068      	b.n	800be72 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	2b0b      	cmp	r3, #11
 800bda6:	d852      	bhi.n	800be4e <USBD_CDC_Setup+0x162>
 800bda8:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <USBD_CDC_Setup+0xc4>)
 800bdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdae:	bf00      	nop
 800bdb0:	0800bde1 	.word	0x0800bde1
 800bdb4:	0800be5d 	.word	0x0800be5d
 800bdb8:	0800be4f 	.word	0x0800be4f
 800bdbc:	0800be4f 	.word	0x0800be4f
 800bdc0:	0800be4f 	.word	0x0800be4f
 800bdc4:	0800be4f 	.word	0x0800be4f
 800bdc8:	0800be4f 	.word	0x0800be4f
 800bdcc:	0800be4f 	.word	0x0800be4f
 800bdd0:	0800be4f 	.word	0x0800be4f
 800bdd4:	0800be4f 	.word	0x0800be4f
 800bdd8:	0800be0b 	.word	0x0800be0b
 800bddc:	0800be35 	.word	0x0800be35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d107      	bne.n	800bdfc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdec:	f107 030a 	add.w	r3, r7, #10
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 faa0 	bl	800d33a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdfa:	e032      	b.n	800be62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fa2a 	bl	800d258 <USBD_CtlError>
            ret = USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	75fb      	strb	r3, [r7, #23]
          break;
 800be08:	e02b      	b.n	800be62 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d107      	bne.n	800be26 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be16:	f107 030d 	add.w	r3, r7, #13
 800be1a:	2201      	movs	r2, #1
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f001 fa8b 	bl	800d33a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be24:	e01d      	b.n	800be62 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 fa15 	bl	800d258 <USBD_CtlError>
            ret = USBD_FAIL;
 800be2e:	2303      	movs	r3, #3
 800be30:	75fb      	strb	r3, [r7, #23]
          break;
 800be32:	e016      	b.n	800be62 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d00f      	beq.n	800be60 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f001 fa08 	bl	800d258 <USBD_CtlError>
            ret = USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be4c:	e008      	b.n	800be60 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f001 fa01 	bl	800d258 <USBD_CtlError>
          ret = USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	75fb      	strb	r3, [r7, #23]
          break;
 800be5a:	e002      	b.n	800be62 <USBD_CDC_Setup+0x176>
          break;
 800be5c:	bf00      	nop
 800be5e:	e008      	b.n	800be72 <USBD_CDC_Setup+0x186>
          break;
 800be60:	bf00      	nop
      }
      break;
 800be62:	e006      	b.n	800be72 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 f9f6 	bl	800d258 <USBD_CtlError>
      ret = USBD_FAIL;
 800be6c:	2303      	movs	r3, #3
 800be6e:	75fb      	strb	r3, [r7, #23]
      break;
 800be70:	bf00      	nop
  }

  return (uint8_t)ret;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3718      	adds	r7, #24
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e04f      	b.n	800bf3e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bea6:	78fa      	ldrb	r2, [r7, #3]
 800bea8:	6879      	ldr	r1, [r7, #4]
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	440b      	add	r3, r1
 800beb4:	3318      	adds	r3, #24
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d029      	beq.n	800bf10 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bebc:	78fa      	ldrb	r2, [r7, #3]
 800bebe:	6879      	ldr	r1, [r7, #4]
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	3318      	adds	r3, #24
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	78f9      	ldrb	r1, [r7, #3]
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	460b      	mov	r3, r1
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	440b      	add	r3, r1
 800bed8:	00db      	lsls	r3, r3, #3
 800beda:	4403      	add	r3, r0
 800bedc:	3338      	adds	r3, #56	; 0x38
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	fbb2 f1f3 	udiv	r1, r2, r3
 800bee4:	fb01 f303 	mul.w	r3, r1, r3
 800bee8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800beea:	2b00      	cmp	r3, #0
 800beec:	d110      	bne.n	800bf10 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800beee:	78fa      	ldrb	r2, [r7, #3]
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	3318      	adds	r3, #24
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf02:	78f9      	ldrb	r1, [r7, #3]
 800bf04:	2300      	movs	r3, #0
 800bf06:	2200      	movs	r2, #0
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f001 fee7 	bl	800dcdc <USBD_LL_Transmit>
 800bf0e:	e015      	b.n	800bf3c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00b      	beq.n	800bf3c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf38:	78fa      	ldrb	r2, [r7, #3]
 800bf3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e015      	b.n	800bf94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f001 fef7 	bl	800dd60 <USBD_LL_GetRxDataSize>
 800bf72:	4602      	mov	r2, r0
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf8e:	4611      	mov	r1, r2
 800bf90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e01b      	b.n	800bfee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d015      	beq.n	800bfec <USBD_CDC_EP0_RxReady+0x50>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfc6:	2bff      	cmp	r3, #255	; 0xff
 800bfc8:	d010      	beq.n	800bfec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bfd8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfe0:	b292      	uxth	r2, r2
 800bfe2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	22ff      	movs	r2, #255	; 0xff
 800bfe8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2243      	movs	r2, #67	; 0x43
 800c004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c006:	4b03      	ldr	r3, [pc, #12]	; (800c014 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c008:	4618      	mov	r0, r3
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	20002768 	.word	0x20002768

0800c018 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2243      	movs	r2, #67	; 0x43
 800c024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c028:	4618      	mov	r0, r3
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr
 800c034:	20002724 	.word	0x20002724

0800c038 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2243      	movs	r2, #67	; 0x43
 800c044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c046:	4b03      	ldr	r3, [pc, #12]	; (800c054 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c048:	4618      	mov	r0, r3
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	200027ac 	.word	0x200027ac

0800c058 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	220a      	movs	r2, #10
 800c064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c066:	4b03      	ldr	r3, [pc, #12]	; (800c074 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	200026e0 	.word	0x200026e0

0800c078 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c088:	2303      	movs	r3, #3
 800c08a:	e004      	b.n	800c096 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b087      	sub	sp, #28
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	60b9      	str	r1, [r7, #8]
 800c0ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e008      	b.n	800c0d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	371c      	adds	r7, #28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b085      	sub	sp, #20
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e004      	b.n	800c104 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c11e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c120:	2301      	movs	r3, #1
 800c122:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c12e:	2303      	movs	r3, #3
 800c130:	e01a      	b.n	800c168 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d114      	bne.n	800c166 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2201      	movs	r2, #1
 800c140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c15a:	2181      	movs	r1, #129	; 0x81
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f001 fdbd 	bl	800dcdc <USBD_LL_Transmit>

    ret = USBD_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c166:	7bfb      	ldrb	r3, [r7, #15]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c17e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e016      	b.n	800c1bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7c1b      	ldrb	r3, [r3, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c19c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f001 fdbb 	bl	800dd1e <USBD_LL_PrepareReceive>
 800c1a8:	e007      	b.n	800c1ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1b0:	2340      	movs	r3, #64	; 0x40
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f001 fdb2 	bl	800dd1e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c1d8:	4817      	ldr	r0, [pc, #92]	; (800c238 <USBD_Init+0x74>)
 800c1da:	f002 faff 	bl	800e7dc <iprintf>
 800c1de:	4817      	ldr	r0, [pc, #92]	; (800c23c <USBD_Init+0x78>)
 800c1e0:	f002 fafc 	bl	800e7dc <iprintf>
 800c1e4:	200a      	movs	r0, #10
 800c1e6:	f002 fb11 	bl	800e80c <putchar>
#endif
    return USBD_FAIL;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e01f      	b.n	800c22e <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	79fa      	ldrb	r2, [r7, #7]
 800c220:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f001 fc10 	bl	800da48 <USBD_LL_Init>
 800c228:	4603      	mov	r3, r0
 800c22a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	08010a7c 	.word	0x08010a7c
 800c23c:	08010a84 	.word	0x08010a84

0800c240 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c254:	4812      	ldr	r0, [pc, #72]	; (800c2a0 <USBD_RegisterClass+0x60>)
 800c256:	f002 fac1 	bl	800e7dc <iprintf>
 800c25a:	4812      	ldr	r0, [pc, #72]	; (800c2a4 <USBD_RegisterClass+0x64>)
 800c25c:	f002 fabe 	bl	800e7dc <iprintf>
 800c260:	200a      	movs	r0, #10
 800c262:	f002 fad3 	bl	800e80c <putchar>
#endif
    return USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	e016      	b.n	800c298 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00b      	beq.n	800c296 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c286:	f107 020e 	add.w	r2, r7, #14
 800c28a:	4610      	mov	r0, r2
 800c28c:	4798      	blx	r3
 800c28e:	4602      	mov	r2, r0
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	08010a7c 	.word	0x08010a7c
 800c2a4:	08010a9c 	.word	0x08010a9c

0800c2a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f001 fc29 	bl	800db08 <USBD_LL_Start>
 800c2b6:	4603      	mov	r3, r0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
 800c2de:	460b      	mov	r3, r1
 800c2e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d009      	beq.n	800c304 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	78fa      	ldrb	r2, [r7, #3]
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	4798      	blx	r3
 800c300:	4603      	mov	r3, r0
 800c302:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	460b      	mov	r3, r1
 800c318:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c320:	2b00      	cmp	r3, #0
 800c322:	d007      	beq.n	800c334 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	78fa      	ldrb	r2, [r7, #3]
 800c32e:	4611      	mov	r1, r2
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	4798      	blx	r3
  }

  return USBD_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f000 ff47 	bl	800d1e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c364:	461a      	mov	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c372:	f003 031f 	and.w	r3, r3, #31
 800c376:	2b02      	cmp	r3, #2
 800c378:	d01a      	beq.n	800c3b0 <USBD_LL_SetupStage+0x72>
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d822      	bhi.n	800c3c4 <USBD_LL_SetupStage+0x86>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <USBD_LL_SetupStage+0x4a>
 800c382:	2b01      	cmp	r3, #1
 800c384:	d00a      	beq.n	800c39c <USBD_LL_SetupStage+0x5e>
 800c386:	e01d      	b.n	800c3c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f9ef 	bl	800c774 <USBD_StdDevReq>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
      break;
 800c39a:	e020      	b.n	800c3de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fa53 	bl	800c850 <USBD_StdItfReq>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ae:	e016      	b.n	800c3de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fa92 	bl	800c8e2 <USBD_StdEPReq>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c2:	e00c      	b.n	800c3de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f001 fbf8 	bl	800dbc8 <USBD_LL_StallEP>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
      break;
 800c3dc:	bf00      	nop
  }

  return ret;
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c3f6:	7afb      	ldrb	r3, [r7, #11]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d138      	bne.n	800c46e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d14a      	bne.n	800c4a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	689a      	ldr	r2, [r3, #8]
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	429a      	cmp	r2, r3
 800c418:	d913      	bls.n	800c442 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	1ad2      	subs	r2, r2, r3
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	4293      	cmp	r3, r2
 800c432:	bf28      	it	cs
 800c434:	4613      	movcs	r3, r2
 800c436:	461a      	mov	r2, r3
 800c438:	6879      	ldr	r1, [r7, #4]
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f000 ffc6 	bl	800d3cc <USBD_CtlContinueRx>
 800c440:	e030      	b.n	800c4a4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d10b      	bne.n	800c466 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d005      	beq.n	800c466 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f000 ffc1 	bl	800d3ee <USBD_CtlSendStatus>
 800c46c:	e01a      	b.n	800c4a4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b03      	cmp	r3, #3
 800c478:	d114      	bne.n	800c4a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00e      	beq.n	800c4a4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	7afa      	ldrb	r2, [r7, #11]
 800c490:	4611      	mov	r1, r2
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	4798      	blx	r3
 800c496:	4603      	mov	r3, r0
 800c498:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
 800c4a2:	e000      	b.n	800c4a6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b086      	sub	sp, #24
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	607a      	str	r2, [r7, #4]
 800c4ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d16b      	bne.n	800c59a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3314      	adds	r3, #20
 800c4c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d156      	bne.n	800c580 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	689a      	ldr	r2, [r3, #8]
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d914      	bls.n	800c508 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	689a      	ldr	r2, [r3, #8]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	1ad2      	subs	r2, r2, r3
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 ff3b 	bl	800d370 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	2100      	movs	r1, #0
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fc0c 	bl	800dd1e <USBD_LL_PrepareReceive>
 800c506:	e03b      	b.n	800c580 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	68da      	ldr	r2, [r3, #12]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	429a      	cmp	r2, r3
 800c512:	d11c      	bne.n	800c54e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d316      	bcc.n	800c54e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d20f      	bcs.n	800c54e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c52e:	2200      	movs	r2, #0
 800c530:	2100      	movs	r1, #0
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 ff1c 	bl	800d370 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c540:	2300      	movs	r3, #0
 800c542:	2200      	movs	r2, #0
 800c544:	2100      	movs	r1, #0
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f001 fbe9 	bl	800dd1e <USBD_LL_PrepareReceive>
 800c54c:	e018      	b.n	800c580 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b03      	cmp	r3, #3
 800c558:	d10b      	bne.n	800c572 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c572:	2180      	movs	r1, #128	; 0x80
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f001 fb27 	bl	800dbc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 ff4a 	bl	800d414 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c586:	2b01      	cmp	r3, #1
 800c588:	d122      	bne.n	800c5d0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff fe98 	bl	800c2c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c598:	e01a      	b.n	800c5d0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d114      	bne.n	800c5d0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00e      	beq.n	800c5d0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	7afa      	ldrb	r2, [r7, #11]
 800c5bc:	4611      	mov	r1, r2
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	4798      	blx	r3
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5c6:	7dfb      	ldrb	r3, [r7, #23]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
 800c5ce:	e000      	b.n	800c5d2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b082      	sub	sp, #8
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e02f      	b.n	800c66e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00f      	beq.n	800c638 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d009      	beq.n	800c638 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	6852      	ldr	r2, [r2, #4]
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	4611      	mov	r1, r2
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c638:	2340      	movs	r3, #64	; 0x40
 800c63a:	2200      	movs	r2, #0
 800c63c:	2100      	movs	r1, #0
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 fa7d 	bl	800db3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2240      	movs	r2, #64	; 0x40
 800c650:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c654:	2340      	movs	r3, #64	; 0x40
 800c656:	2200      	movs	r2, #0
 800c658:	2180      	movs	r1, #128	; 0x80
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f001 fa6f 	bl	800db3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2240      	movs	r2, #64	; 0x40
 800c66a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	78fa      	ldrb	r2, [r7, #3]
 800c686:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2204      	movs	r2, #4
 800c6b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d106      	bne.n	800c6e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c704:	2303      	movs	r3, #3
 800c706:	e012      	b.n	800c72e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b03      	cmp	r3, #3
 800c712:	d10b      	bne.n	800c72c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c71a:	69db      	ldr	r3, [r3, #28]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c736:	b480      	push	{r7}
 800c738:	b087      	sub	sp, #28
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	3301      	adds	r3, #1
 800c74c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c754:	8a3b      	ldrh	r3, [r7, #16]
 800c756:	021b      	lsls	r3, r3, #8
 800c758:	b21a      	sxth	r2, r3
 800c75a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c75e:	4313      	orrs	r3, r2
 800c760:	b21b      	sxth	r3, r3
 800c762:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c764:	89fb      	ldrh	r3, [r7, #14]
}
 800c766:	4618      	mov	r0, r3
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
	...

0800c774 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c78a:	2b40      	cmp	r3, #64	; 0x40
 800c78c:	d005      	beq.n	800c79a <USBD_StdDevReq+0x26>
 800c78e:	2b40      	cmp	r3, #64	; 0x40
 800c790:	d853      	bhi.n	800c83a <USBD_StdDevReq+0xc6>
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00b      	beq.n	800c7ae <USBD_StdDevReq+0x3a>
 800c796:	2b20      	cmp	r3, #32
 800c798:	d14f      	bne.n	800c83a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	4798      	blx	r3
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ac:	e04a      	b.n	800c844 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	785b      	ldrb	r3, [r3, #1]
 800c7b2:	2b09      	cmp	r3, #9
 800c7b4:	d83b      	bhi.n	800c82e <USBD_StdDevReq+0xba>
 800c7b6:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <USBD_StdDevReq+0x48>)
 800c7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7bc:	0800c811 	.word	0x0800c811
 800c7c0:	0800c825 	.word	0x0800c825
 800c7c4:	0800c82f 	.word	0x0800c82f
 800c7c8:	0800c81b 	.word	0x0800c81b
 800c7cc:	0800c82f 	.word	0x0800c82f
 800c7d0:	0800c7ef 	.word	0x0800c7ef
 800c7d4:	0800c7e5 	.word	0x0800c7e5
 800c7d8:	0800c82f 	.word	0x0800c82f
 800c7dc:	0800c807 	.word	0x0800c807
 800c7e0:	0800c7f9 	.word	0x0800c7f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f9de 	bl	800cba8 <USBD_GetDescriptor>
          break;
 800c7ec:	e024      	b.n	800c838 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fb6d 	bl	800ced0 <USBD_SetAddress>
          break;
 800c7f6:	e01f      	b.n	800c838 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fbac 	bl	800cf58 <USBD_SetConfig>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
          break;
 800c804:	e018      	b.n	800c838 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fc4b 	bl	800d0a4 <USBD_GetConfig>
          break;
 800c80e:	e013      	b.n	800c838 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fc7c 	bl	800d110 <USBD_GetStatus>
          break;
 800c818:	e00e      	b.n	800c838 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fcab 	bl	800d178 <USBD_SetFeature>
          break;
 800c822:	e009      	b.n	800c838 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fcba 	bl	800d1a0 <USBD_ClrFeature>
          break;
 800c82c:	e004      	b.n	800c838 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fd11 	bl	800d258 <USBD_CtlError>
          break;
 800c836:	bf00      	nop
      }
      break;
 800c838:	e004      	b.n	800c844 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fd0b 	bl	800d258 <USBD_CtlError>
      break;
 800c842:	bf00      	nop
  }

  return ret;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop

0800c850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c866:	2b40      	cmp	r3, #64	; 0x40
 800c868:	d005      	beq.n	800c876 <USBD_StdItfReq+0x26>
 800c86a:	2b40      	cmp	r3, #64	; 0x40
 800c86c:	d82f      	bhi.n	800c8ce <USBD_StdItfReq+0x7e>
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <USBD_StdItfReq+0x26>
 800c872:	2b20      	cmp	r3, #32
 800c874:	d12b      	bne.n	800c8ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	3b01      	subs	r3, #1
 800c880:	2b02      	cmp	r3, #2
 800c882:	d81d      	bhi.n	800c8c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	889b      	ldrh	r3, [r3, #4]
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d813      	bhi.n	800c8b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	4798      	blx	r3
 800c89c:	4603      	mov	r3, r0
 800c89e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	88db      	ldrh	r3, [r3, #6]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d110      	bne.n	800c8ca <USBD_StdItfReq+0x7a>
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10d      	bne.n	800c8ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fd9d 	bl	800d3ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c8b4:	e009      	b.n	800c8ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fccd 	bl	800d258 <USBD_CtlError>
          break;
 800c8be:	e004      	b.n	800c8ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fcc8 	bl	800d258 <USBD_CtlError>
          break;
 800c8c8:	e000      	b.n	800c8cc <USBD_StdItfReq+0x7c>
          break;
 800c8ca:	bf00      	nop
      }
      break;
 800c8cc:	e004      	b.n	800c8d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fcc1 	bl	800d258 <USBD_CtlError>
      break;
 800c8d6:	bf00      	nop
  }

  return ret;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	889b      	ldrh	r3, [r3, #4]
 800c8f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8fe:	2b40      	cmp	r3, #64	; 0x40
 800c900:	d007      	beq.n	800c912 <USBD_StdEPReq+0x30>
 800c902:	2b40      	cmp	r3, #64	; 0x40
 800c904:	f200 8145 	bhi.w	800cb92 <USBD_StdEPReq+0x2b0>
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00c      	beq.n	800c926 <USBD_StdEPReq+0x44>
 800c90c:	2b20      	cmp	r3, #32
 800c90e:	f040 8140 	bne.w	800cb92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	4798      	blx	r3
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]
      break;
 800c924:	e13a      	b.n	800cb9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	785b      	ldrb	r3, [r3, #1]
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d007      	beq.n	800c93e <USBD_StdEPReq+0x5c>
 800c92e:	2b03      	cmp	r3, #3
 800c930:	f300 8129 	bgt.w	800cb86 <USBD_StdEPReq+0x2a4>
 800c934:	2b00      	cmp	r3, #0
 800c936:	d07f      	beq.n	800ca38 <USBD_StdEPReq+0x156>
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d03c      	beq.n	800c9b6 <USBD_StdEPReq+0xd4>
 800c93c:	e123      	b.n	800cb86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c944:	b2db      	uxtb	r3, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d002      	beq.n	800c950 <USBD_StdEPReq+0x6e>
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d016      	beq.n	800c97c <USBD_StdEPReq+0x9a>
 800c94e:	e02c      	b.n	800c9aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00d      	beq.n	800c972 <USBD_StdEPReq+0x90>
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b80      	cmp	r3, #128	; 0x80
 800c95a:	d00a      	beq.n	800c972 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 f931 	bl	800dbc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c966:	2180      	movs	r1, #128	; 0x80
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 f92d 	bl	800dbc8 <USBD_LL_StallEP>
 800c96e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c970:	e020      	b.n	800c9b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fc6f 	bl	800d258 <USBD_CtlError>
              break;
 800c97a:	e01b      	b.n	800c9b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	885b      	ldrh	r3, [r3, #2]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10e      	bne.n	800c9a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c984:	7bbb      	ldrb	r3, [r7, #14]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00b      	beq.n	800c9a2 <USBD_StdEPReq+0xc0>
 800c98a:	7bbb      	ldrb	r3, [r7, #14]
 800c98c:	2b80      	cmp	r3, #128	; 0x80
 800c98e:	d008      	beq.n	800c9a2 <USBD_StdEPReq+0xc0>
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	88db      	ldrh	r3, [r3, #6]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d104      	bne.n	800c9a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c998:	7bbb      	ldrb	r3, [r7, #14]
 800c99a:	4619      	mov	r1, r3
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f001 f913 	bl	800dbc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fd23 	bl	800d3ee <USBD_CtlSendStatus>

              break;
 800c9a8:	e004      	b.n	800c9b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fc53 	bl	800d258 <USBD_CtlError>
              break;
 800c9b2:	bf00      	nop
          }
          break;
 800c9b4:	e0ec      	b.n	800cb90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d002      	beq.n	800c9c8 <USBD_StdEPReq+0xe6>
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d016      	beq.n	800c9f4 <USBD_StdEPReq+0x112>
 800c9c6:	e030      	b.n	800ca2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9c8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00d      	beq.n	800c9ea <USBD_StdEPReq+0x108>
 800c9ce:	7bbb      	ldrb	r3, [r7, #14]
 800c9d0:	2b80      	cmp	r3, #128	; 0x80
 800c9d2:	d00a      	beq.n	800c9ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f001 f8f5 	bl	800dbc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9de:	2180      	movs	r1, #128	; 0x80
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f001 f8f1 	bl	800dbc8 <USBD_LL_StallEP>
 800c9e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9e8:	e025      	b.n	800ca36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fc33 	bl	800d258 <USBD_CtlError>
              break;
 800c9f2:	e020      	b.n	800ca36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	885b      	ldrh	r3, [r3, #2]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d11b      	bne.n	800ca34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f001 f8fb 	bl	800dc06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fcec 	bl	800d3ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	4798      	blx	r3
 800ca24:	4603      	mov	r3, r0
 800ca26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ca28:	e004      	b.n	800ca34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fc13 	bl	800d258 <USBD_CtlError>
              break;
 800ca32:	e000      	b.n	800ca36 <USBD_StdEPReq+0x154>
              break;
 800ca34:	bf00      	nop
          }
          break;
 800ca36:	e0ab      	b.n	800cb90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d002      	beq.n	800ca4a <USBD_StdEPReq+0x168>
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	d032      	beq.n	800caae <USBD_StdEPReq+0x1cc>
 800ca48:	e097      	b.n	800cb7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d007      	beq.n	800ca60 <USBD_StdEPReq+0x17e>
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	2b80      	cmp	r3, #128	; 0x80
 800ca54:	d004      	beq.n	800ca60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fbfd 	bl	800d258 <USBD_CtlError>
                break;
 800ca5e:	e091      	b.n	800cb84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	da0b      	bge.n	800ca80 <USBD_StdEPReq+0x19e>
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	3310      	adds	r3, #16
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	e00b      	b.n	800ca98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
 800ca82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	4413      	add	r3, r2
 800ca96:	3304      	adds	r3, #4
 800ca98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2202      	movs	r2, #2
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fc47 	bl	800d33a <USBD_CtlSendData>
              break;
 800caac:	e06a      	b.n	800cb84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800caae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	da11      	bge.n	800cada <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	f003 020f 	and.w	r2, r3, #15
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	440b      	add	r3, r1
 800cac8:	3324      	adds	r3, #36	; 0x24
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d117      	bne.n	800cb00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fbc0 	bl	800d258 <USBD_CtlError>
                  break;
 800cad8:	e054      	b.n	800cb84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	f003 020f 	and.w	r2, r3, #15
 800cae0:	6879      	ldr	r1, [r7, #4]
 800cae2:	4613      	mov	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	440b      	add	r3, r1
 800caec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d104      	bne.n	800cb00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fbad 	bl	800d258 <USBD_CtlError>
                  break;
 800cafe:	e041      	b.n	800cb84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	da0b      	bge.n	800cb20 <USBD_StdEPReq+0x23e>
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	3310      	adds	r3, #16
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	e00b      	b.n	800cb38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
 800cb22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	4413      	add	r3, r2
 800cb36:	3304      	adds	r3, #4
 800cb38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <USBD_StdEPReq+0x264>
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	2b80      	cmp	r3, #128	; 0x80
 800cb44:	d103      	bne.n	800cb4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	e00e      	b.n	800cb6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f001 f876 	bl	800dc44 <USBD_LL_IsStallEP>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2201      	movs	r2, #1
 800cb62:	601a      	str	r2, [r3, #0]
 800cb64:	e002      	b.n	800cb6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2202      	movs	r2, #2
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 fbe1 	bl	800d33a <USBD_CtlSendData>
              break;
 800cb78:	e004      	b.n	800cb84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fb6b 	bl	800d258 <USBD_CtlError>
              break;
 800cb82:	bf00      	nop
          }
          break;
 800cb84:	e004      	b.n	800cb90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fb65 	bl	800d258 <USBD_CtlError>
          break;
 800cb8e:	bf00      	nop
      }
      break;
 800cb90:	e004      	b.n	800cb9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fb5f 	bl	800d258 <USBD_CtlError>
      break;
 800cb9a:	bf00      	nop
  }

  return ret;
 800cb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	885b      	ldrh	r3, [r3, #2]
 800cbc2:	0a1b      	lsrs	r3, r3, #8
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	2b0e      	cmp	r3, #14
 800cbca:	f200 8152 	bhi.w	800ce72 <USBD_GetDescriptor+0x2ca>
 800cbce:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <USBD_GetDescriptor+0x2c>)
 800cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd4:	0800cc45 	.word	0x0800cc45
 800cbd8:	0800cc5d 	.word	0x0800cc5d
 800cbdc:	0800cc9d 	.word	0x0800cc9d
 800cbe0:	0800ce73 	.word	0x0800ce73
 800cbe4:	0800ce73 	.word	0x0800ce73
 800cbe8:	0800ce13 	.word	0x0800ce13
 800cbec:	0800ce3f 	.word	0x0800ce3f
 800cbf0:	0800ce73 	.word	0x0800ce73
 800cbf4:	0800ce73 	.word	0x0800ce73
 800cbf8:	0800ce73 	.word	0x0800ce73
 800cbfc:	0800ce73 	.word	0x0800ce73
 800cc00:	0800ce73 	.word	0x0800ce73
 800cc04:	0800ce73 	.word	0x0800ce73
 800cc08:	0800ce73 	.word	0x0800ce73
 800cc0c:	0800cc11 	.word	0x0800cc11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00b      	beq.n	800cc34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc22:	69db      	ldr	r3, [r3, #28]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	7c12      	ldrb	r2, [r2, #16]
 800cc28:	f107 0108 	add.w	r1, r7, #8
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	4798      	blx	r3
 800cc30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc32:	e126      	b.n	800ce82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fb0e 	bl	800d258 <USBD_CtlError>
        err++;
 800cc3c:	7afb      	ldrb	r3, [r7, #11]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	72fb      	strb	r3, [r7, #11]
      break;
 800cc42:	e11e      	b.n	800ce82 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	7c12      	ldrb	r2, [r2, #16]
 800cc50:	f107 0108 	add.w	r1, r7, #8
 800cc54:	4610      	mov	r0, r2
 800cc56:	4798      	blx	r3
 800cc58:	60f8      	str	r0, [r7, #12]
      break;
 800cc5a:	e112      	b.n	800ce82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7c1b      	ldrb	r3, [r3, #16]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10d      	bne.n	800cc80 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6c:	f107 0208 	add.w	r2, r7, #8
 800cc70:	4610      	mov	r0, r2
 800cc72:	4798      	blx	r3
 800cc74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc7e:	e100      	b.n	800ce82 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc88:	f107 0208 	add.w	r2, r7, #8
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4798      	blx	r3
 800cc90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3301      	adds	r3, #1
 800cc96:	2202      	movs	r2, #2
 800cc98:	701a      	strb	r2, [r3, #0]
      break;
 800cc9a:	e0f2      	b.n	800ce82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	885b      	ldrh	r3, [r3, #2]
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b05      	cmp	r3, #5
 800cca4:	f200 80ac 	bhi.w	800ce00 <USBD_GetDescriptor+0x258>
 800cca8:	a201      	add	r2, pc, #4	; (adr r2, 800ccb0 <USBD_GetDescriptor+0x108>)
 800ccaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccae:	bf00      	nop
 800ccb0:	0800ccc9 	.word	0x0800ccc9
 800ccb4:	0800ccfd 	.word	0x0800ccfd
 800ccb8:	0800cd31 	.word	0x0800cd31
 800ccbc:	0800cd65 	.word	0x0800cd65
 800ccc0:	0800cd99 	.word	0x0800cd99
 800ccc4:	0800cdcd 	.word	0x0800cdcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00b      	beq.n	800ccec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	7c12      	ldrb	r2, [r2, #16]
 800cce0:	f107 0108 	add.w	r1, r7, #8
 800cce4:	4610      	mov	r0, r2
 800cce6:	4798      	blx	r3
 800cce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccea:	e091      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fab2 	bl	800d258 <USBD_CtlError>
            err++;
 800ccf4:	7afb      	ldrb	r3, [r7, #11]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccfa:	e089      	b.n	800ce10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00b      	beq.n	800cd20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7c12      	ldrb	r2, [r2, #16]
 800cd14:	f107 0108 	add.w	r1, r7, #8
 800cd18:	4610      	mov	r0, r2
 800cd1a:	4798      	blx	r3
 800cd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd1e:	e077      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fa98 	bl	800d258 <USBD_CtlError>
            err++;
 800cd28:	7afb      	ldrb	r3, [r7, #11]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd2e:	e06f      	b.n	800ce10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	7c12      	ldrb	r2, [r2, #16]
 800cd48:	f107 0108 	add.w	r1, r7, #8
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4798      	blx	r3
 800cd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd52:	e05d      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fa7e 	bl	800d258 <USBD_CtlError>
            err++;
 800cd5c:	7afb      	ldrb	r3, [r7, #11]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	72fb      	strb	r3, [r7, #11]
          break;
 800cd62:	e055      	b.n	800ce10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	7c12      	ldrb	r2, [r2, #16]
 800cd7c:	f107 0108 	add.w	r1, r7, #8
 800cd80:	4610      	mov	r0, r2
 800cd82:	4798      	blx	r3
 800cd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd86:	e043      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fa64 	bl	800d258 <USBD_CtlError>
            err++;
 800cd90:	7afb      	ldrb	r3, [r7, #11]
 800cd92:	3301      	adds	r3, #1
 800cd94:	72fb      	strb	r3, [r7, #11]
          break;
 800cd96:	e03b      	b.n	800ce10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdaa:	695b      	ldr	r3, [r3, #20]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	7c12      	ldrb	r2, [r2, #16]
 800cdb0:	f107 0108 	add.w	r1, r7, #8
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	4798      	blx	r3
 800cdb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdba:	e029      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fa4a 	bl	800d258 <USBD_CtlError>
            err++;
 800cdc4:	7afb      	ldrb	r3, [r7, #11]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdca:	e021      	b.n	800ce10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00b      	beq.n	800cdf0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	7c12      	ldrb	r2, [r2, #16]
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdee:	e00f      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa30 	bl	800d258 <USBD_CtlError>
            err++;
 800cdf8:	7afb      	ldrb	r3, [r7, #11]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	72fb      	strb	r3, [r7, #11]
          break;
 800cdfe:	e007      	b.n	800ce10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 fa28 	bl	800d258 <USBD_CtlError>
          err++;
 800ce08:	7afb      	ldrb	r3, [r7, #11]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ce0e:	bf00      	nop
      }
      break;
 800ce10:	e037      	b.n	800ce82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7c1b      	ldrb	r3, [r3, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce22:	f107 0208 	add.w	r2, r7, #8
 800ce26:	4610      	mov	r0, r2
 800ce28:	4798      	blx	r3
 800ce2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce2c:	e029      	b.n	800ce82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fa11 	bl	800d258 <USBD_CtlError>
        err++;
 800ce36:	7afb      	ldrb	r3, [r7, #11]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce3c:	e021      	b.n	800ce82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7c1b      	ldrb	r3, [r3, #16]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10d      	bne.n	800ce62 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4e:	f107 0208 	add.w	r2, r7, #8
 800ce52:	4610      	mov	r0, r2
 800ce54:	4798      	blx	r3
 800ce56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	2207      	movs	r2, #7
 800ce5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce60:	e00f      	b.n	800ce82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f9f7 	bl	800d258 <USBD_CtlError>
        err++;
 800ce6a:	7afb      	ldrb	r3, [r7, #11]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	72fb      	strb	r3, [r7, #11]
      break;
 800ce70:	e007      	b.n	800ce82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f9ef 	bl	800d258 <USBD_CtlError>
      err++;
 800ce7a:	7afb      	ldrb	r3, [r7, #11]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ce80:	bf00      	nop
  }

  if (err != 0U)
 800ce82:	7afb      	ldrb	r3, [r7, #11]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d11e      	bne.n	800cec6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	88db      	ldrh	r3, [r3, #6]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d016      	beq.n	800cebe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce90:	893b      	ldrh	r3, [r7, #8]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00e      	beq.n	800ceb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	88da      	ldrh	r2, [r3, #6]
 800ce9a:	893b      	ldrh	r3, [r7, #8]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	bf28      	it	cs
 800cea0:	4613      	movcs	r3, r2
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cea6:	893b      	ldrh	r3, [r7, #8]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	68f9      	ldr	r1, [r7, #12]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fa44 	bl	800d33a <USBD_CtlSendData>
 800ceb2:	e009      	b.n	800cec8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f9ce 	bl	800d258 <USBD_CtlError>
 800cebc:	e004      	b.n	800cec8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fa95 	bl	800d3ee <USBD_CtlSendStatus>
 800cec4:	e000      	b.n	800cec8 <USBD_GetDescriptor+0x320>
    return;
 800cec6:	bf00      	nop
  }
}
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop

0800ced0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	889b      	ldrh	r3, [r3, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d131      	bne.n	800cf46 <USBD_SetAddress+0x76>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	88db      	ldrh	r3, [r3, #6]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d12d      	bne.n	800cf46 <USBD_SetAddress+0x76>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	885b      	ldrh	r3, [r3, #2]
 800ceee:	2b7f      	cmp	r3, #127	; 0x7f
 800cef0:	d829      	bhi.n	800cf46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	885b      	ldrh	r3, [r3, #2]
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cefc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d104      	bne.n	800cf14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf0a:	6839      	ldr	r1, [r7, #0]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 f9a3 	bl	800d258 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf12:	e01d      	b.n	800cf50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7bfa      	ldrb	r2, [r7, #15]
 800cf18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 febc 	bl	800dc9e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fa61 	bl	800d3ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d004      	beq.n	800cf3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2202      	movs	r2, #2
 800cf36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf3a:	e009      	b.n	800cf50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf44:	e004      	b.n	800cf50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f985 	bl	800d258 <USBD_CtlError>
  }
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	885b      	ldrh	r3, [r3, #2]
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	4b4c      	ldr	r3, [pc, #304]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cf6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf70:	4b4b      	ldr	r3, [pc, #300]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d905      	bls.n	800cf84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f96c 	bl	800d258 <USBD_CtlError>
    return USBD_FAIL;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e088      	b.n	800d096 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d002      	beq.n	800cf96 <USBD_SetConfig+0x3e>
 800cf90:	2b03      	cmp	r3, #3
 800cf92:	d025      	beq.n	800cfe0 <USBD_SetConfig+0x88>
 800cf94:	e071      	b.n	800d07a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf96:	4b42      	ldr	r3, [pc, #264]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d01c      	beq.n	800cfd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf9e:	4b40      	ldr	r3, [pc, #256]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfa8:	4b3d      	ldr	r3, [pc, #244]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff f991 	bl	800c2d6 <USBD_SetClassConfig>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d004      	beq.n	800cfc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f949 	bl	800d258 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfc6:	e065      	b.n	800d094 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fa10 	bl	800d3ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2203      	movs	r2, #3
 800cfd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cfd6:	e05d      	b.n	800d094 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fa08 	bl	800d3ee <USBD_CtlSendStatus>
      break;
 800cfde:	e059      	b.n	800d094 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cfe0:	4b2f      	ldr	r3, [pc, #188]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d112      	bne.n	800d00e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cff0:	4b2b      	ldr	r3, [pc, #172]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	461a      	mov	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cffa:	4b29      	ldr	r3, [pc, #164]	; (800d0a0 <USBD_SetConfig+0x148>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	4619      	mov	r1, r3
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff f984 	bl	800c30e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f9f1 	bl	800d3ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d00c:	e042      	b.n	800d094 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d00e:	4b24      	ldr	r3, [pc, #144]	; (800d0a0 <USBD_SetConfig+0x148>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d02a      	beq.n	800d072 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	b2db      	uxtb	r3, r3
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff f972 	bl	800c30e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d02a:	4b1d      	ldr	r3, [pc, #116]	; (800d0a0 <USBD_SetConfig+0x148>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	461a      	mov	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d034:	4b1a      	ldr	r3, [pc, #104]	; (800d0a0 <USBD_SetConfig+0x148>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	4619      	mov	r1, r3
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff f94b 	bl	800c2d6 <USBD_SetClassConfig>
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00f      	beq.n	800d06a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f903 	bl	800d258 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	b2db      	uxtb	r3, r3
 800d058:	4619      	mov	r1, r3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f7ff f957 	bl	800c30e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2202      	movs	r2, #2
 800d064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d068:	e014      	b.n	800d094 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f9bf 	bl	800d3ee <USBD_CtlSendStatus>
      break;
 800d070:	e010      	b.n	800d094 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f9bb 	bl	800d3ee <USBD_CtlSendStatus>
      break;
 800d078:	e00c      	b.n	800d094 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f8eb 	bl	800d258 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d082:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <USBD_SetConfig+0x148>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	4619      	mov	r1, r3
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff f940 	bl	800c30e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d08e:	2303      	movs	r3, #3
 800d090:	73fb      	strb	r3, [r7, #15]
      break;
 800d092:	bf00      	nop
  }

  return ret;
 800d094:	7bfb      	ldrb	r3, [r7, #15]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20002ccc 	.word	0x20002ccc

0800d0a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	88db      	ldrh	r3, [r3, #6]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d004      	beq.n	800d0c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f8cd 	bl	800d258 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d0be:	e023      	b.n	800d108 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	dc02      	bgt.n	800d0d2 <USBD_GetConfig+0x2e>
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	dc03      	bgt.n	800d0d8 <USBD_GetConfig+0x34>
 800d0d0:	e015      	b.n	800d0fe <USBD_GetConfig+0x5a>
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d00b      	beq.n	800d0ee <USBD_GetConfig+0x4a>
 800d0d6:	e012      	b.n	800d0fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	3308      	adds	r3, #8
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 f927 	bl	800d33a <USBD_CtlSendData>
        break;
 800d0ec:	e00c      	b.n	800d108 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f91f 	bl	800d33a <USBD_CtlSendData>
        break;
 800d0fc:	e004      	b.n	800d108 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f8a9 	bl	800d258 <USBD_CtlError>
        break;
 800d106:	bf00      	nop
}
 800d108:	bf00      	nop
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d120:	b2db      	uxtb	r3, r3
 800d122:	3b01      	subs	r3, #1
 800d124:	2b02      	cmp	r3, #2
 800d126:	d81e      	bhi.n	800d166 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	88db      	ldrh	r3, [r3, #6]
 800d12c:	2b02      	cmp	r3, #2
 800d12e:	d004      	beq.n	800d13a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f890 	bl	800d258 <USBD_CtlError>
        break;
 800d138:	e01a      	b.n	800d170 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d146:	2b00      	cmp	r3, #0
 800d148:	d005      	beq.n	800d156 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	f043 0202 	orr.w	r2, r3, #2
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	330c      	adds	r3, #12
 800d15a:	2202      	movs	r2, #2
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f8eb 	bl	800d33a <USBD_CtlSendData>
      break;
 800d164:	e004      	b.n	800d170 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f875 	bl	800d258 <USBD_CtlError>
      break;
 800d16e:	bf00      	nop
  }
}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	885b      	ldrh	r3, [r3, #2]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d106      	bne.n	800d198 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2201      	movs	r2, #1
 800d18e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f92b 	bl	800d3ee <USBD_CtlSendStatus>
  }
}
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d80b      	bhi.n	800d1d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	885b      	ldrh	r3, [r3, #2]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d10c      	bne.n	800d1da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f910 	bl	800d3ee <USBD_CtlSendStatus>
      }
      break;
 800d1ce:	e004      	b.n	800d1da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f840 	bl	800d258 <USBD_CtlError>
      break;
 800d1d8:	e000      	b.n	800d1dc <USBD_ClrFeature+0x3c>
      break;
 800d1da:	bf00      	nop
  }
}
 800d1dc:	bf00      	nop
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	781a      	ldrb	r2, [r3, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3301      	adds	r3, #1
 800d20c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f7ff fa91 	bl	800c736 <SWAPBYTE>
 800d214:	4603      	mov	r3, r0
 800d216:	461a      	mov	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3301      	adds	r3, #1
 800d220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3301      	adds	r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7ff fa84 	bl	800c736 <SWAPBYTE>
 800d22e:	4603      	mov	r3, r0
 800d230:	461a      	mov	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	3301      	adds	r3, #1
 800d23a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3301      	adds	r3, #1
 800d240:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f7ff fa77 	bl	800c736 <SWAPBYTE>
 800d248:	4603      	mov	r3, r0
 800d24a:	461a      	mov	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	80da      	strh	r2, [r3, #6]
}
 800d250:	bf00      	nop
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d262:	2180      	movs	r1, #128	; 0x80
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 fcaf 	bl	800dbc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d26a:	2100      	movs	r1, #0
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fcab 	bl	800dbc8 <USBD_LL_StallEP>
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b086      	sub	sp, #24
 800d27e:	af00      	add	r7, sp, #0
 800d280:	60f8      	str	r0, [r7, #12]
 800d282:	60b9      	str	r1, [r7, #8]
 800d284:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d286:	2300      	movs	r3, #0
 800d288:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d036      	beq.n	800d2fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d294:	6938      	ldr	r0, [r7, #16]
 800d296:	f000 f836 	bl	800d306 <USBD_GetLen>
 800d29a:	4603      	mov	r3, r0
 800d29c:	3301      	adds	r3, #1
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	7812      	ldrb	r2, [r2, #0]
 800d2b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2b4:	7dfb      	ldrb	r3, [r7, #23]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d2ba:	7dfb      	ldrb	r3, [r7, #23]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	4413      	add	r3, r2
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d2ca:	e013      	b.n	800d2f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d2cc:	7dfb      	ldrb	r3, [r7, #23]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	7812      	ldrb	r2, [r2, #0]
 800d2d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	613b      	str	r3, [r7, #16]
    idx++;
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2ee:	7dfb      	ldrb	r3, [r7, #23]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e7      	bne.n	800d2cc <USBD_GetString+0x52>
 800d2fc:	e000      	b.n	800d300 <USBD_GetString+0x86>
    return;
 800d2fe:	bf00      	nop
  }
}
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d306:	b480      	push	{r7}
 800d308:	b085      	sub	sp, #20
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d316:	e005      	b.n	800d324 <USBD_GetLen+0x1e>
  {
    len++;
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	3301      	adds	r3, #1
 800d31c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3301      	adds	r3, #1
 800d322:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1f5      	bne.n	800d318 <USBD_GetLen+0x12>
  }

  return len;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	60f8      	str	r0, [r7, #12]
 800d342:	60b9      	str	r1, [r7, #8]
 800d344:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2202      	movs	r2, #2
 800d34a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	2100      	movs	r1, #0
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fcbb 	bl	800dcdc <USBD_LL_Transmit>

  return USBD_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	2100      	movs	r1, #0
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f000 fcaa 	bl	800dcdc <USBD_LL_Transmit>

  return USBD_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d392:	b580      	push	{r7, lr}
 800d394:	b084      	sub	sp, #16
 800d396:	af00      	add	r7, sp, #0
 800d398:	60f8      	str	r0, [r7, #12]
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f000 fcae 	bl	800dd1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f000 fc9d 	bl	800dd1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2204      	movs	r2, #4
 800d3fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3fe:	2300      	movs	r3, #0
 800d400:	2200      	movs	r2, #0
 800d402:	2100      	movs	r1, #0
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fc69 	bl	800dcdc <USBD_LL_Transmit>

  return USBD_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2205      	movs	r2, #5
 800d420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d424:	2300      	movs	r3, #0
 800d426:	2200      	movs	r2, #0
 800d428:	2100      	movs	r1, #0
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fc77 	bl	800dd1e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d440:	2200      	movs	r2, #0
 800d442:	4912      	ldr	r1, [pc, #72]	; (800d48c <MX_USB_Device_Init+0x50>)
 800d444:	4812      	ldr	r0, [pc, #72]	; (800d490 <MX_USB_Device_Init+0x54>)
 800d446:	f7fe febd 	bl	800c1c4 <USBD_Init>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d450:	f7f4 f944 	bl	80016dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d454:	490f      	ldr	r1, [pc, #60]	; (800d494 <MX_USB_Device_Init+0x58>)
 800d456:	480e      	ldr	r0, [pc, #56]	; (800d490 <MX_USB_Device_Init+0x54>)
 800d458:	f7fe fef2 	bl	800c240 <USBD_RegisterClass>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d462:	f7f4 f93b 	bl	80016dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d466:	490c      	ldr	r1, [pc, #48]	; (800d498 <MX_USB_Device_Init+0x5c>)
 800d468:	4809      	ldr	r0, [pc, #36]	; (800d490 <MX_USB_Device_Init+0x54>)
 800d46a:	f7fe fe05 	bl	800c078 <USBD_CDC_RegisterInterface>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d474:	f7f4 f932 	bl	80016dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d478:	4805      	ldr	r0, [pc, #20]	; (800d490 <MX_USB_Device_Init+0x54>)
 800d47a:	f7fe ff15 	bl	800c2a8 <USBD_Start>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d484:	f7f4 f92a 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d488:	bf00      	nop
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20002804 	.word	0x20002804
 800d490:	20002cd0 	.word	0x20002cd0
 800d494:	200026ec 	.word	0x200026ec
 800d498:	200027f0 	.word	0x200027f0

0800d49c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	4905      	ldr	r1, [pc, #20]	; (800d4b8 <CDC_Init_FS+0x1c>)
 800d4a4:	4805      	ldr	r0, [pc, #20]	; (800d4bc <CDC_Init_FS+0x20>)
 800d4a6:	f7fe fdfc 	bl	800c0a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d4aa:	4905      	ldr	r1, [pc, #20]	; (800d4c0 <CDC_Init_FS+0x24>)
 800d4ac:	4803      	ldr	r0, [pc, #12]	; (800d4bc <CDC_Init_FS+0x20>)
 800d4ae:	f7fe fe16 	bl	800c0de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d4b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	200037a0 	.word	0x200037a0
 800d4bc:	20002cd0 	.word	0x20002cd0
 800d4c0:	20002fa0 	.word	0x20002fa0

0800d4c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	6039      	str	r1, [r7, #0]
 800d4de:	71fb      	strb	r3, [r7, #7]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	2b23      	cmp	r3, #35	; 0x23
 800d4e8:	d84a      	bhi.n	800d580 <CDC_Control_FS+0xac>
 800d4ea:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <CDC_Control_FS+0x1c>)
 800d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f0:	0800d581 	.word	0x0800d581
 800d4f4:	0800d581 	.word	0x0800d581
 800d4f8:	0800d581 	.word	0x0800d581
 800d4fc:	0800d581 	.word	0x0800d581
 800d500:	0800d581 	.word	0x0800d581
 800d504:	0800d581 	.word	0x0800d581
 800d508:	0800d581 	.word	0x0800d581
 800d50c:	0800d581 	.word	0x0800d581
 800d510:	0800d581 	.word	0x0800d581
 800d514:	0800d581 	.word	0x0800d581
 800d518:	0800d581 	.word	0x0800d581
 800d51c:	0800d581 	.word	0x0800d581
 800d520:	0800d581 	.word	0x0800d581
 800d524:	0800d581 	.word	0x0800d581
 800d528:	0800d581 	.word	0x0800d581
 800d52c:	0800d581 	.word	0x0800d581
 800d530:	0800d581 	.word	0x0800d581
 800d534:	0800d581 	.word	0x0800d581
 800d538:	0800d581 	.word	0x0800d581
 800d53c:	0800d581 	.word	0x0800d581
 800d540:	0800d581 	.word	0x0800d581
 800d544:	0800d581 	.word	0x0800d581
 800d548:	0800d581 	.word	0x0800d581
 800d54c:	0800d581 	.word	0x0800d581
 800d550:	0800d581 	.word	0x0800d581
 800d554:	0800d581 	.word	0x0800d581
 800d558:	0800d581 	.word	0x0800d581
 800d55c:	0800d581 	.word	0x0800d581
 800d560:	0800d581 	.word	0x0800d581
 800d564:	0800d581 	.word	0x0800d581
 800d568:	0800d581 	.word	0x0800d581
 800d56c:	0800d581 	.word	0x0800d581
 800d570:	0800d581 	.word	0x0800d581
 800d574:	0800d581 	.word	0x0800d581
 800d578:	0800d581 	.word	0x0800d581
 800d57c:	0800d581 	.word	0x0800d581
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d580:	bf00      	nop
  }

  return (USBD_OK);
 800d582:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  input_received_flag = 1;
 800d59a:	4b11      	ldr	r3, [pc, #68]	; (800d5e0 <CDC_Receive_FS+0x50>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
 800d5a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	480f      	ldr	r0, [pc, #60]	; (800d5e4 <CDC_Receive_FS+0x54>)
 800d5a8:	f000 fca6 	bl	800def8 <memset>
  uint8_t len = (uint8_t) Len;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	73fb      	strb	r3, [r7, #15]
  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	480b      	ldr	r0, [pc, #44]	; (800d5e4 <CDC_Receive_FS+0x54>)
 800d5b8:	f000 fc90 	bl	800dedc <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fc98 	bl	800def8 <memset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	4807      	ldr	r0, [pc, #28]	; (800d5e8 <CDC_Receive_FS+0x58>)
 800d5cc:	f7fe fd87 	bl	800c0de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d5d0:	4805      	ldr	r0, [pc, #20]	; (800d5e8 <CDC_Receive_FS+0x58>)
 800d5d2:	f7fe fdcd 	bl	800c170 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d5d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20003fa0 	.word	0x20003fa0
 800d5e4:	20002fa0 	.word	0x20002fa0
 800d5e8:	20002cd0 	.word	0x20002cd0

0800d5ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d5fc:	4b0d      	ldr	r3, [pc, #52]	; (800d634 <CDC_Transmit_FS+0x48>)
 800d5fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d602:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d001      	beq.n	800d612 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d60e:	2301      	movs	r3, #1
 800d610:	e00b      	b.n	800d62a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d612:	887b      	ldrh	r3, [r7, #2]
 800d614:	461a      	mov	r2, r3
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	4806      	ldr	r0, [pc, #24]	; (800d634 <CDC_Transmit_FS+0x48>)
 800d61a:	f7fe fd42 	bl	800c0a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d61e:	4805      	ldr	r0, [pc, #20]	; (800d634 <CDC_Transmit_FS+0x48>)
 800d620:	f7fe fd76 	bl	800c110 <USBD_CDC_TransmitPacket>
 800d624:	4603      	mov	r3, r0
 800d626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d628:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20002cd0 	.word	0x20002cd0

0800d638 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d638:	b480      	push	{r7}
 800d63a:	b087      	sub	sp, #28
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	4613      	mov	r3, r2
 800d644:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d64a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	371c      	adds	r7, #28
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
	...

0800d65c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	4603      	mov	r3, r0
 800d664:	6039      	str	r1, [r7, #0]
 800d666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2212      	movs	r2, #18
 800d66c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d66e:	4b03      	ldr	r3, [pc, #12]	; (800d67c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	20002824 	.word	0x20002824

0800d680 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	6039      	str	r1, [r7, #0]
 800d68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2204      	movs	r2, #4
 800d690:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d692:	4b03      	ldr	r3, [pc, #12]	; (800d6a0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d694:	4618      	mov	r0, r3
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr
 800d6a0:	20002838 	.word	0x20002838

0800d6a4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	6039      	str	r1, [r7, #0]
 800d6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6b0:	79fb      	ldrb	r3, [r7, #7]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d105      	bne.n	800d6c2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	4907      	ldr	r1, [pc, #28]	; (800d6d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d6ba:	4808      	ldr	r0, [pc, #32]	; (800d6dc <USBD_CDC_ProductStrDescriptor+0x38>)
 800d6bc:	f7ff fddd 	bl	800d27a <USBD_GetString>
 800d6c0:	e004      	b.n	800d6cc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	4904      	ldr	r1, [pc, #16]	; (800d6d8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d6c6:	4805      	ldr	r0, [pc, #20]	; (800d6dc <USBD_CDC_ProductStrDescriptor+0x38>)
 800d6c8:	f7ff fdd7 	bl	800d27a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6cc:	4b02      	ldr	r3, [pc, #8]	; (800d6d8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20003fa4 	.word	0x20003fa4
 800d6dc:	08010ab4 	.word	0x08010ab4

0800d6e0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d6ec:	683a      	ldr	r2, [r7, #0]
 800d6ee:	4904      	ldr	r1, [pc, #16]	; (800d700 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d6f0:	4804      	ldr	r0, [pc, #16]	; (800d704 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d6f2:	f7ff fdc2 	bl	800d27a <USBD_GetString>
  return USBD_StrDesc;
 800d6f6:	4b02      	ldr	r3, [pc, #8]	; (800d700 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	20003fa4 	.word	0x20003fa4
 800d704:	08010acc 	.word	0x08010acc

0800d708 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	4603      	mov	r3, r0
 800d710:	6039      	str	r1, [r7, #0]
 800d712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	221a      	movs	r2, #26
 800d718:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d71a:	f000 f843 	bl	800d7a4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d71e:	4b02      	ldr	r3, [pc, #8]	; (800d728 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	2000283c 	.word	0x2000283c

0800d72c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	4603      	mov	r3, r0
 800d734:	6039      	str	r1, [r7, #0]
 800d736:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d738:	79fb      	ldrb	r3, [r7, #7]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d105      	bne.n	800d74a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	4907      	ldr	r1, [pc, #28]	; (800d760 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d742:	4808      	ldr	r0, [pc, #32]	; (800d764 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d744:	f7ff fd99 	bl	800d27a <USBD_GetString>
 800d748:	e004      	b.n	800d754 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	4904      	ldr	r1, [pc, #16]	; (800d760 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d74e:	4805      	ldr	r0, [pc, #20]	; (800d764 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d750:	f7ff fd93 	bl	800d27a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d754:	4b02      	ldr	r3, [pc, #8]	; (800d760 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d756:	4618      	mov	r0, r3
 800d758:	3708      	adds	r7, #8
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20003fa4 	.word	0x20003fa4
 800d764:	08010ae0 	.word	0x08010ae0

0800d768 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d105      	bne.n	800d786 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	4907      	ldr	r1, [pc, #28]	; (800d79c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d77e:	4808      	ldr	r0, [pc, #32]	; (800d7a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d780:	f7ff fd7b 	bl	800d27a <USBD_GetString>
 800d784:	e004      	b.n	800d790 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	4904      	ldr	r1, [pc, #16]	; (800d79c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d78a:	4805      	ldr	r0, [pc, #20]	; (800d7a0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d78c:	f7ff fd75 	bl	800d27a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d790:	4b02      	ldr	r3, [pc, #8]	; (800d79c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20003fa4 	.word	0x20003fa4
 800d7a0:	08010aec 	.word	0x08010aec

0800d7a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d7aa:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <Get_SerialNum+0x44>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d7b0:	4b0e      	ldr	r3, [pc, #56]	; (800d7ec <Get_SerialNum+0x48>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d7b6:	4b0e      	ldr	r3, [pc, #56]	; (800d7f0 <Get_SerialNum+0x4c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d009      	beq.n	800d7de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7ca:	2208      	movs	r2, #8
 800d7cc:	4909      	ldr	r1, [pc, #36]	; (800d7f4 <Get_SerialNum+0x50>)
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 f814 	bl	800d7fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d7d4:	2204      	movs	r2, #4
 800d7d6:	4908      	ldr	r1, [pc, #32]	; (800d7f8 <Get_SerialNum+0x54>)
 800d7d8:	68b8      	ldr	r0, [r7, #8]
 800d7da:	f000 f80f 	bl	800d7fc <IntToUnicode>
  }
}
 800d7de:	bf00      	nop
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	1fff7590 	.word	0x1fff7590
 800d7ec:	1fff7594 	.word	0x1fff7594
 800d7f0:	1fff7598 	.word	0x1fff7598
 800d7f4:	2000283e 	.word	0x2000283e
 800d7f8:	2000284e 	.word	0x2000284e

0800d7fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b087      	sub	sp, #28
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	4613      	mov	r3, r2
 800d808:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d80e:	2300      	movs	r3, #0
 800d810:	75fb      	strb	r3, [r7, #23]
 800d812:	e027      	b.n	800d864 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	0f1b      	lsrs	r3, r3, #28
 800d818:	2b09      	cmp	r3, #9
 800d81a:	d80b      	bhi.n	800d834 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	0f1b      	lsrs	r3, r3, #28
 800d820:	b2da      	uxtb	r2, r3
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4619      	mov	r1, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	440b      	add	r3, r1
 800d82c:	3230      	adds	r2, #48	; 0x30
 800d82e:	b2d2      	uxtb	r2, r2
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	e00a      	b.n	800d84a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	0f1b      	lsrs	r3, r3, #28
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
 800d83c:	005b      	lsls	r3, r3, #1
 800d83e:	4619      	mov	r1, r3
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	440b      	add	r3, r1
 800d844:	3237      	adds	r2, #55	; 0x37
 800d846:	b2d2      	uxtb	r2, r2
 800d848:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d850:	7dfb      	ldrb	r3, [r7, #23]
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	3301      	adds	r3, #1
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	4413      	add	r3, r2
 800d85a:	2200      	movs	r2, #0
 800d85c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	3301      	adds	r3, #1
 800d862:	75fb      	strb	r3, [r7, #23]
 800d864:	7dfa      	ldrb	r2, [r7, #23]
 800d866:	79fb      	ldrb	r3, [r7, #7]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d3d3      	bcc.n	800d814 <IntToUnicode+0x18>
  }
}
 800d86c:	bf00      	nop
 800d86e:	bf00      	nop
 800d870:	371c      	adds	r7, #28
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
	...

0800d87c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b098      	sub	sp, #96	; 0x60
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d884:	f107 030c 	add.w	r3, r7, #12
 800d888:	2254      	movs	r2, #84	; 0x54
 800d88a:	2100      	movs	r1, #0
 800d88c:	4618      	mov	r0, r3
 800d88e:	f000 fb33 	bl	800def8 <memset>
  if(pcdHandle->Instance==USB)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a15      	ldr	r2, [pc, #84]	; (800d8ec <HAL_PCD_MspInit+0x70>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d123      	bne.n	800d8e4 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d89c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d8a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8a6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7f9 fb03 	bl	8006eb8 <HAL_RCCEx_PeriphCLKConfig>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800d8b8:	f7f3 ff10 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d8bc:	4b0c      	ldr	r3, [pc, #48]	; (800d8f0 <HAL_PCD_MspInit+0x74>)
 800d8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8c0:	4a0b      	ldr	r2, [pc, #44]	; (800d8f0 <HAL_PCD_MspInit+0x74>)
 800d8c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8c6:	6593      	str	r3, [r2, #88]	; 0x58
 800d8c8:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <HAL_PCD_MspInit+0x74>)
 800d8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8d0:	60bb      	str	r3, [r7, #8]
 800d8d2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	2014      	movs	r0, #20
 800d8da:	f7f5 feca 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d8de:	2014      	movs	r0, #20
 800d8e0:	f7f5 fee1 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d8e4:	bf00      	nop
 800d8e6:	3760      	adds	r7, #96	; 0x60
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	40005c00 	.word	0x40005c00
 800d8f0:	40021000 	.word	0x40021000

0800d8f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d908:	4619      	mov	r1, r3
 800d90a:	4610      	mov	r0, r2
 800d90c:	f7fe fd17 	bl	800c33e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d92a:	78fa      	ldrb	r2, [r7, #3]
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	4613      	mov	r3, r2
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	4413      	add	r3, r2
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	440b      	add	r3, r1
 800d938:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	4619      	mov	r1, r3
 800d942:	f7fe fd51 	bl	800c3e8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	460b      	mov	r3, r1
 800d958:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d960:	78fa      	ldrb	r2, [r7, #3]
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	4613      	mov	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	440b      	add	r3, r1
 800d96e:	333c      	adds	r3, #60	; 0x3c
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	78fb      	ldrb	r3, [r7, #3]
 800d974:	4619      	mov	r1, r3
 800d976:	f7fe fd9a 	bl	800c4ae <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d97a:	bf00      	nop
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b082      	sub	sp, #8
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d990:	4618      	mov	r0, r3
 800d992:	f7fe feae 	bl	800c6f2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d996:	bf00      	nop
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d001      	beq.n	800d9b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d9b2:	f7f3 fe93 	bl	80016dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9bc:	7bfa      	ldrb	r2, [r7, #15]
 800d9be:	4611      	mov	r1, r2
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fe fe58 	bl	800c676 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fe fe04 	bl	800c5da <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d9d2:	bf00      	nop
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
	...

0800d9dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fe fe53 	bl	800c696 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d005      	beq.n	800da04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9f8:	4b04      	ldr	r3, [pc, #16]	; (800da0c <HAL_PCD_SuspendCallback+0x30>)
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	4a03      	ldr	r2, [pc, #12]	; (800da0c <HAL_PCD_SuspendCallback+0x30>)
 800d9fe:	f043 0306 	orr.w	r3, r3, #6
 800da02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	e000ed00 	.word	0xe000ed00

0800da10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da20:	4b08      	ldr	r3, [pc, #32]	; (800da44 <HAL_PCD_ResumeCallback+0x34>)
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	4a07      	ldr	r2, [pc, #28]	; (800da44 <HAL_PCD_ResumeCallback+0x34>)
 800da26:	f023 0306 	bic.w	r3, r3, #6
 800da2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800da2c:	f000 f9fa 	bl	800de24 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800da36:	4618      	mov	r0, r3
 800da38:	f7fe fe43 	bl	800c6c2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	e000ed00 	.word	0xe000ed00

0800da48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800da50:	4a2b      	ldr	r2, [pc, #172]	; (800db00 <USBD_LL_Init+0xb8>)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a29      	ldr	r2, [pc, #164]	; (800db00 <USBD_LL_Init+0xb8>)
 800da5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800da60:	4b27      	ldr	r3, [pc, #156]	; (800db00 <USBD_LL_Init+0xb8>)
 800da62:	4a28      	ldr	r2, [pc, #160]	; (800db04 <USBD_LL_Init+0xbc>)
 800da64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800da66:	4b26      	ldr	r3, [pc, #152]	; (800db00 <USBD_LL_Init+0xb8>)
 800da68:	2208      	movs	r2, #8
 800da6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da6c:	4b24      	ldr	r3, [pc, #144]	; (800db00 <USBD_LL_Init+0xb8>)
 800da6e:	2202      	movs	r2, #2
 800da70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da72:	4b23      	ldr	r3, [pc, #140]	; (800db00 <USBD_LL_Init+0xb8>)
 800da74:	2202      	movs	r2, #2
 800da76:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800da78:	4b21      	ldr	r3, [pc, #132]	; (800db00 <USBD_LL_Init+0xb8>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da7e:	4b20      	ldr	r3, [pc, #128]	; (800db00 <USBD_LL_Init+0xb8>)
 800da80:	2200      	movs	r2, #0
 800da82:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da84:	4b1e      	ldr	r3, [pc, #120]	; (800db00 <USBD_LL_Init+0xb8>)
 800da86:	2200      	movs	r2, #0
 800da88:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da8a:	4b1d      	ldr	r3, [pc, #116]	; (800db00 <USBD_LL_Init+0xb8>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da90:	481b      	ldr	r0, [pc, #108]	; (800db00 <USBD_LL_Init+0xb8>)
 800da92:	f7f6 ff36 	bl	8004902 <HAL_PCD_Init>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800da9c:	f7f3 fe1e 	bl	80016dc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800daa6:	2318      	movs	r3, #24
 800daa8:	2200      	movs	r2, #0
 800daaa:	2100      	movs	r1, #0
 800daac:	f7f8 fbef 	bl	800628e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dab6:	2358      	movs	r3, #88	; 0x58
 800dab8:	2200      	movs	r2, #0
 800daba:	2180      	movs	r1, #128	; 0x80
 800dabc:	f7f8 fbe7 	bl	800628e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dac6:	23c0      	movs	r3, #192	; 0xc0
 800dac8:	2200      	movs	r2, #0
 800daca:	2181      	movs	r1, #129	; 0x81
 800dacc:	f7f8 fbdf 	bl	800628e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dad6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dada:	2200      	movs	r2, #0
 800dadc:	2101      	movs	r1, #1
 800dade:	f7f8 fbd6 	bl	800628e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800daec:	2200      	movs	r2, #0
 800daee:	2182      	movs	r1, #130	; 0x82
 800daf0:	f7f8 fbcd 	bl	800628e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	200041a4 	.word	0x200041a4
 800db04:	40005c00 	.word	0x40005c00

0800db08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db1e:	4618      	mov	r0, r3
 800db20:	f7f6 ffd4 	bl	8004acc <HAL_PCD_Start>
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 f980 	bl	800de30 <USBD_Get_USB_Status>
 800db30:	4603      	mov	r3, r0
 800db32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db34:	7bbb      	ldrb	r3, [r7, #14]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
 800db46:	4608      	mov	r0, r1
 800db48:	4611      	mov	r1, r2
 800db4a:	461a      	mov	r2, r3
 800db4c:	4603      	mov	r3, r0
 800db4e:	70fb      	strb	r3, [r7, #3]
 800db50:	460b      	mov	r3, r1
 800db52:	70bb      	strb	r3, [r7, #2]
 800db54:	4613      	mov	r3, r2
 800db56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db66:	78bb      	ldrb	r3, [r7, #2]
 800db68:	883a      	ldrh	r2, [r7, #0]
 800db6a:	78f9      	ldrb	r1, [r7, #3]
 800db6c:	f7f7 f91c 	bl	8004da8 <HAL_PCD_EP_Open>
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f95a 	bl	800de30 <USBD_Get_USB_Status>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db80:	7bbb      	ldrb	r3, [r7, #14]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b084      	sub	sp, #16
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	460b      	mov	r3, r1
 800db94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dba4:	78fa      	ldrb	r2, [r7, #3]
 800dba6:	4611      	mov	r1, r2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7f7 f963 	bl	8004e74 <HAL_PCD_EP_Close>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 f93b 	bl	800de30 <USBD_Get_USB_Status>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbe2:	78fa      	ldrb	r2, [r7, #3]
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f7 fa24 	bl	8005034 <HAL_PCD_EP_SetStall>
 800dbec:	4603      	mov	r3, r0
 800dbee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f91c 	bl	800de30 <USBD_Get_USB_Status>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc20:	78fa      	ldrb	r2, [r7, #3]
 800dc22:	4611      	mov	r1, r2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7f7 fa57 	bl	80050d8 <HAL_PCD_EP_ClrStall>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc2e:	7bfb      	ldrb	r3, [r7, #15]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 f8fd 	bl	800de30 <USBD_Get_USB_Status>
 800dc36:	4603      	mov	r3, r0
 800dc38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	da0c      	bge.n	800dc7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc60:	78fb      	ldrb	r3, [r7, #3]
 800dc62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc66:	68f9      	ldr	r1, [r7, #12]
 800dc68:	1c5a      	adds	r2, r3, #1
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	440b      	add	r3, r1
 800dc74:	3302      	adds	r3, #2
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	e00b      	b.n	800dc92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc7a:	78fb      	ldrb	r3, [r7, #3]
 800dc7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc80:	68f9      	ldr	r1, [r7, #12]
 800dc82:	4613      	mov	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	440b      	add	r3, r1
 800dc8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dc90:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3714      	adds	r7, #20
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	460b      	mov	r3, r1
 800dca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcb8:	78fa      	ldrb	r2, [r7, #3]
 800dcba:	4611      	mov	r1, r2
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f7 f84e 	bl	8004d5e <HAL_PCD_SetAddress>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc6:	7bfb      	ldrb	r3, [r7, #15]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 f8b1 	bl	800de30 <USBD_Get_USB_Status>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	607a      	str	r2, [r7, #4]
 800dce6:	603b      	str	r3, [r7, #0]
 800dce8:	460b      	mov	r3, r1
 800dcea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dcfa:	7af9      	ldrb	r1, [r7, #11]
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	f7f7 f955 	bl	8004fae <HAL_PCD_EP_Transmit>
 800dd04:	4603      	mov	r3, r0
 800dd06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 f890 	bl	800de30 <USBD_Get_USB_Status>
 800dd10:	4603      	mov	r3, r0
 800dd12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd14:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b086      	sub	sp, #24
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd3c:	7af9      	ldrb	r1, [r7, #11]
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	f7f7 f8df 	bl	8004f04 <HAL_PCD_EP_Receive>
 800dd46:	4603      	mov	r3, r0
 800dd48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 f86f 	bl	800de30 <USBD_Get_USB_Status>
 800dd52:	4603      	mov	r3, r0
 800dd54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd56:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd72:	78fa      	ldrb	r2, [r7, #3]
 800dd74:	4611      	mov	r1, r2
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7f7 f901 	bl	8004f7e <HAL_PCD_EP_GetRxCount>
 800dd7c:	4603      	mov	r3, r0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
	...

0800dd88 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dd94:	78fb      	ldrb	r3, [r7, #3]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <HAL_PCDEx_LPM_Callback+0x18>
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d013      	beq.n	800ddc6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dd9e:	e023      	b.n	800dde8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d007      	beq.n	800ddb8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dda8:	f000 f83c 	bl	800de24 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddac:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	4a0f      	ldr	r2, [pc, #60]	; (800ddf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ddb2:	f023 0306 	bic.w	r3, r3, #6
 800ddb6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fe fc7f 	bl	800c6c2 <USBD_LL_Resume>
    break;
 800ddc4:	e010      	b.n	800dde8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe fc62 	bl	800c696 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d005      	beq.n	800dde6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	4a04      	ldr	r2, [pc, #16]	; (800ddf0 <HAL_PCDEx_LPM_Callback+0x68>)
 800dde0:	f043 0306 	orr.w	r3, r3, #6
 800dde4:	6113      	str	r3, [r2, #16]
    break;
 800dde6:	bf00      	nop
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	e000ed00 	.word	0xe000ed00

0800ddf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ddfc:	4b03      	ldr	r3, [pc, #12]	; (800de0c <USBD_static_malloc+0x18>)
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	20004498 	.word	0x20004498

0800de10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]

}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800de28:	f7f2 ff90 	bl	8000d4c <SystemClock_Config>
}
 800de2c:	bf00      	nop
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	2b03      	cmp	r3, #3
 800de42:	d817      	bhi.n	800de74 <USBD_Get_USB_Status+0x44>
 800de44:	a201      	add	r2, pc, #4	; (adr r2, 800de4c <USBD_Get_USB_Status+0x1c>)
 800de46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4a:	bf00      	nop
 800de4c:	0800de5d 	.word	0x0800de5d
 800de50:	0800de63 	.word	0x0800de63
 800de54:	0800de69 	.word	0x0800de69
 800de58:	0800de6f 	.word	0x0800de6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	73fb      	strb	r3, [r7, #15]
    break;
 800de60:	e00b      	b.n	800de7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de62:	2303      	movs	r3, #3
 800de64:	73fb      	strb	r3, [r7, #15]
    break;
 800de66:	e008      	b.n	800de7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de68:	2301      	movs	r3, #1
 800de6a:	73fb      	strb	r3, [r7, #15]
    break;
 800de6c:	e005      	b.n	800de7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de6e:	2303      	movs	r3, #3
 800de70:	73fb      	strb	r3, [r7, #15]
    break;
 800de72:	e002      	b.n	800de7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de74:	2303      	movs	r3, #3
 800de76:	73fb      	strb	r3, [r7, #15]
    break;
 800de78:	bf00      	nop
  }
  return usb_status;
 800de7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <__errno>:
 800de88:	4b01      	ldr	r3, [pc, #4]	; (800de90 <__errno+0x8>)
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	20002858 	.word	0x20002858

0800de94 <__libc_init_array>:
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	4d0d      	ldr	r5, [pc, #52]	; (800decc <__libc_init_array+0x38>)
 800de98:	4c0d      	ldr	r4, [pc, #52]	; (800ded0 <__libc_init_array+0x3c>)
 800de9a:	1b64      	subs	r4, r4, r5
 800de9c:	10a4      	asrs	r4, r4, #2
 800de9e:	2600      	movs	r6, #0
 800dea0:	42a6      	cmp	r6, r4
 800dea2:	d109      	bne.n	800deb8 <__libc_init_array+0x24>
 800dea4:	4d0b      	ldr	r5, [pc, #44]	; (800ded4 <__libc_init_array+0x40>)
 800dea6:	4c0c      	ldr	r4, [pc, #48]	; (800ded8 <__libc_init_array+0x44>)
 800dea8:	f002 fdac 	bl	8010a04 <_init>
 800deac:	1b64      	subs	r4, r4, r5
 800deae:	10a4      	asrs	r4, r4, #2
 800deb0:	2600      	movs	r6, #0
 800deb2:	42a6      	cmp	r6, r4
 800deb4:	d105      	bne.n	800dec2 <__libc_init_array+0x2e>
 800deb6:	bd70      	pop	{r4, r5, r6, pc}
 800deb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800debc:	4798      	blx	r3
 800debe:	3601      	adds	r6, #1
 800dec0:	e7ee      	b.n	800dea0 <__libc_init_array+0xc>
 800dec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dec6:	4798      	blx	r3
 800dec8:	3601      	adds	r6, #1
 800deca:	e7f2      	b.n	800deb2 <__libc_init_array+0x1e>
 800decc:	08010ee4 	.word	0x08010ee4
 800ded0:	08010ee4 	.word	0x08010ee4
 800ded4:	08010ee4 	.word	0x08010ee4
 800ded8:	08010ee8 	.word	0x08010ee8

0800dedc <memcpy>:
 800dedc:	440a      	add	r2, r1
 800dede:	4291      	cmp	r1, r2
 800dee0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dee4:	d100      	bne.n	800dee8 <memcpy+0xc>
 800dee6:	4770      	bx	lr
 800dee8:	b510      	push	{r4, lr}
 800deea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def2:	4291      	cmp	r1, r2
 800def4:	d1f9      	bne.n	800deea <memcpy+0xe>
 800def6:	bd10      	pop	{r4, pc}

0800def8 <memset>:
 800def8:	4402      	add	r2, r0
 800defa:	4603      	mov	r3, r0
 800defc:	4293      	cmp	r3, r2
 800defe:	d100      	bne.n	800df02 <memset+0xa>
 800df00:	4770      	bx	lr
 800df02:	f803 1b01 	strb.w	r1, [r3], #1
 800df06:	e7f9      	b.n	800defc <memset+0x4>

0800df08 <__cvt>:
 800df08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df0c:	ec55 4b10 	vmov	r4, r5, d0
 800df10:	2d00      	cmp	r5, #0
 800df12:	460e      	mov	r6, r1
 800df14:	4619      	mov	r1, r3
 800df16:	462b      	mov	r3, r5
 800df18:	bfbb      	ittet	lt
 800df1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df1e:	461d      	movlt	r5, r3
 800df20:	2300      	movge	r3, #0
 800df22:	232d      	movlt	r3, #45	; 0x2d
 800df24:	700b      	strb	r3, [r1, #0]
 800df26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df2c:	4691      	mov	r9, r2
 800df2e:	f023 0820 	bic.w	r8, r3, #32
 800df32:	bfbc      	itt	lt
 800df34:	4622      	movlt	r2, r4
 800df36:	4614      	movlt	r4, r2
 800df38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df3c:	d005      	beq.n	800df4a <__cvt+0x42>
 800df3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df42:	d100      	bne.n	800df46 <__cvt+0x3e>
 800df44:	3601      	adds	r6, #1
 800df46:	2102      	movs	r1, #2
 800df48:	e000      	b.n	800df4c <__cvt+0x44>
 800df4a:	2103      	movs	r1, #3
 800df4c:	ab03      	add	r3, sp, #12
 800df4e:	9301      	str	r3, [sp, #4]
 800df50:	ab02      	add	r3, sp, #8
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	ec45 4b10 	vmov	d0, r4, r5
 800df58:	4653      	mov	r3, sl
 800df5a:	4632      	mov	r2, r6
 800df5c:	f000 fcf8 	bl	800e950 <_dtoa_r>
 800df60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df64:	4607      	mov	r7, r0
 800df66:	d102      	bne.n	800df6e <__cvt+0x66>
 800df68:	f019 0f01 	tst.w	r9, #1
 800df6c:	d022      	beq.n	800dfb4 <__cvt+0xac>
 800df6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df72:	eb07 0906 	add.w	r9, r7, r6
 800df76:	d110      	bne.n	800df9a <__cvt+0x92>
 800df78:	783b      	ldrb	r3, [r7, #0]
 800df7a:	2b30      	cmp	r3, #48	; 0x30
 800df7c:	d10a      	bne.n	800df94 <__cvt+0x8c>
 800df7e:	2200      	movs	r2, #0
 800df80:	2300      	movs	r3, #0
 800df82:	4620      	mov	r0, r4
 800df84:	4629      	mov	r1, r5
 800df86:	f7f2 fdc7 	bl	8000b18 <__aeabi_dcmpeq>
 800df8a:	b918      	cbnz	r0, 800df94 <__cvt+0x8c>
 800df8c:	f1c6 0601 	rsb	r6, r6, #1
 800df90:	f8ca 6000 	str.w	r6, [sl]
 800df94:	f8da 3000 	ldr.w	r3, [sl]
 800df98:	4499      	add	r9, r3
 800df9a:	2200      	movs	r2, #0
 800df9c:	2300      	movs	r3, #0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 fdb9 	bl	8000b18 <__aeabi_dcmpeq>
 800dfa6:	b108      	cbz	r0, 800dfac <__cvt+0xa4>
 800dfa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfac:	2230      	movs	r2, #48	; 0x30
 800dfae:	9b03      	ldr	r3, [sp, #12]
 800dfb0:	454b      	cmp	r3, r9
 800dfb2:	d307      	bcc.n	800dfc4 <__cvt+0xbc>
 800dfb4:	9b03      	ldr	r3, [sp, #12]
 800dfb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfb8:	1bdb      	subs	r3, r3, r7
 800dfba:	4638      	mov	r0, r7
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	b004      	add	sp, #16
 800dfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc4:	1c59      	adds	r1, r3, #1
 800dfc6:	9103      	str	r1, [sp, #12]
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	e7f0      	b.n	800dfae <__cvt+0xa6>

0800dfcc <__exponent>:
 800dfcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	bfb8      	it	lt
 800dfd4:	4249      	neglt	r1, r1
 800dfd6:	f803 2b02 	strb.w	r2, [r3], #2
 800dfda:	bfb4      	ite	lt
 800dfdc:	222d      	movlt	r2, #45	; 0x2d
 800dfde:	222b      	movge	r2, #43	; 0x2b
 800dfe0:	2909      	cmp	r1, #9
 800dfe2:	7042      	strb	r2, [r0, #1]
 800dfe4:	dd2a      	ble.n	800e03c <__exponent+0x70>
 800dfe6:	f10d 0407 	add.w	r4, sp, #7
 800dfea:	46a4      	mov	ip, r4
 800dfec:	270a      	movs	r7, #10
 800dfee:	46a6      	mov	lr, r4
 800dff0:	460a      	mov	r2, r1
 800dff2:	fb91 f6f7 	sdiv	r6, r1, r7
 800dff6:	fb07 1516 	mls	r5, r7, r6, r1
 800dffa:	3530      	adds	r5, #48	; 0x30
 800dffc:	2a63      	cmp	r2, #99	; 0x63
 800dffe:	f104 34ff 	add.w	r4, r4, #4294967295
 800e002:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e006:	4631      	mov	r1, r6
 800e008:	dcf1      	bgt.n	800dfee <__exponent+0x22>
 800e00a:	3130      	adds	r1, #48	; 0x30
 800e00c:	f1ae 0502 	sub.w	r5, lr, #2
 800e010:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e014:	1c44      	adds	r4, r0, #1
 800e016:	4629      	mov	r1, r5
 800e018:	4561      	cmp	r1, ip
 800e01a:	d30a      	bcc.n	800e032 <__exponent+0x66>
 800e01c:	f10d 0209 	add.w	r2, sp, #9
 800e020:	eba2 020e 	sub.w	r2, r2, lr
 800e024:	4565      	cmp	r5, ip
 800e026:	bf88      	it	hi
 800e028:	2200      	movhi	r2, #0
 800e02a:	4413      	add	r3, r2
 800e02c:	1a18      	subs	r0, r3, r0
 800e02e:	b003      	add	sp, #12
 800e030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e032:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e036:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e03a:	e7ed      	b.n	800e018 <__exponent+0x4c>
 800e03c:	2330      	movs	r3, #48	; 0x30
 800e03e:	3130      	adds	r1, #48	; 0x30
 800e040:	7083      	strb	r3, [r0, #2]
 800e042:	70c1      	strb	r1, [r0, #3]
 800e044:	1d03      	adds	r3, r0, #4
 800e046:	e7f1      	b.n	800e02c <__exponent+0x60>

0800e048 <_printf_float>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	ed2d 8b02 	vpush	{d8}
 800e050:	b08d      	sub	sp, #52	; 0x34
 800e052:	460c      	mov	r4, r1
 800e054:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e058:	4616      	mov	r6, r2
 800e05a:	461f      	mov	r7, r3
 800e05c:	4605      	mov	r5, r0
 800e05e:	f001 fb5b 	bl	800f718 <_localeconv_r>
 800e062:	f8d0 a000 	ldr.w	sl, [r0]
 800e066:	4650      	mov	r0, sl
 800e068:	f7f2 f8da 	bl	8000220 <strlen>
 800e06c:	2300      	movs	r3, #0
 800e06e:	930a      	str	r3, [sp, #40]	; 0x28
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	9305      	str	r3, [sp, #20]
 800e074:	f8d8 3000 	ldr.w	r3, [r8]
 800e078:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e07c:	3307      	adds	r3, #7
 800e07e:	f023 0307 	bic.w	r3, r3, #7
 800e082:	f103 0208 	add.w	r2, r3, #8
 800e086:	f8c8 2000 	str.w	r2, [r8]
 800e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e092:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e09a:	9307      	str	r3, [sp, #28]
 800e09c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0a0:	ee08 0a10 	vmov	s16, r0
 800e0a4:	4b9f      	ldr	r3, [pc, #636]	; (800e324 <_printf_float+0x2dc>)
 800e0a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ae:	f7f2 fd65 	bl	8000b7c <__aeabi_dcmpun>
 800e0b2:	bb88      	cbnz	r0, 800e118 <_printf_float+0xd0>
 800e0b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0b8:	4b9a      	ldr	r3, [pc, #616]	; (800e324 <_printf_float+0x2dc>)
 800e0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e0be:	f7f2 fd3f 	bl	8000b40 <__aeabi_dcmple>
 800e0c2:	bb48      	cbnz	r0, 800e118 <_printf_float+0xd0>
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	4640      	mov	r0, r8
 800e0ca:	4649      	mov	r1, r9
 800e0cc:	f7f2 fd2e 	bl	8000b2c <__aeabi_dcmplt>
 800e0d0:	b110      	cbz	r0, 800e0d8 <_printf_float+0x90>
 800e0d2:	232d      	movs	r3, #45	; 0x2d
 800e0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0d8:	4b93      	ldr	r3, [pc, #588]	; (800e328 <_printf_float+0x2e0>)
 800e0da:	4894      	ldr	r0, [pc, #592]	; (800e32c <_printf_float+0x2e4>)
 800e0dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e0e0:	bf94      	ite	ls
 800e0e2:	4698      	movls	r8, r3
 800e0e4:	4680      	movhi	r8, r0
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	6123      	str	r3, [r4, #16]
 800e0ea:	9b05      	ldr	r3, [sp, #20]
 800e0ec:	f023 0204 	bic.w	r2, r3, #4
 800e0f0:	6022      	str	r2, [r4, #0]
 800e0f2:	f04f 0900 	mov.w	r9, #0
 800e0f6:	9700      	str	r7, [sp, #0]
 800e0f8:	4633      	mov	r3, r6
 800e0fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	4628      	mov	r0, r5
 800e100:	f000 f9d8 	bl	800e4b4 <_printf_common>
 800e104:	3001      	adds	r0, #1
 800e106:	f040 8090 	bne.w	800e22a <_printf_float+0x1e2>
 800e10a:	f04f 30ff 	mov.w	r0, #4294967295
 800e10e:	b00d      	add	sp, #52	; 0x34
 800e110:	ecbd 8b02 	vpop	{d8}
 800e114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e118:	4642      	mov	r2, r8
 800e11a:	464b      	mov	r3, r9
 800e11c:	4640      	mov	r0, r8
 800e11e:	4649      	mov	r1, r9
 800e120:	f7f2 fd2c 	bl	8000b7c <__aeabi_dcmpun>
 800e124:	b140      	cbz	r0, 800e138 <_printf_float+0xf0>
 800e126:	464b      	mov	r3, r9
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bfbc      	itt	lt
 800e12c:	232d      	movlt	r3, #45	; 0x2d
 800e12e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e132:	487f      	ldr	r0, [pc, #508]	; (800e330 <_printf_float+0x2e8>)
 800e134:	4b7f      	ldr	r3, [pc, #508]	; (800e334 <_printf_float+0x2ec>)
 800e136:	e7d1      	b.n	800e0dc <_printf_float+0x94>
 800e138:	6863      	ldr	r3, [r4, #4]
 800e13a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e13e:	9206      	str	r2, [sp, #24]
 800e140:	1c5a      	adds	r2, r3, #1
 800e142:	d13f      	bne.n	800e1c4 <_printf_float+0x17c>
 800e144:	2306      	movs	r3, #6
 800e146:	6063      	str	r3, [r4, #4]
 800e148:	9b05      	ldr	r3, [sp, #20]
 800e14a:	6861      	ldr	r1, [r4, #4]
 800e14c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e150:	2300      	movs	r3, #0
 800e152:	9303      	str	r3, [sp, #12]
 800e154:	ab0a      	add	r3, sp, #40	; 0x28
 800e156:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e15a:	ab09      	add	r3, sp, #36	; 0x24
 800e15c:	ec49 8b10 	vmov	d0, r8, r9
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	6022      	str	r2, [r4, #0]
 800e164:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e168:	4628      	mov	r0, r5
 800e16a:	f7ff fecd 	bl	800df08 <__cvt>
 800e16e:	9b06      	ldr	r3, [sp, #24]
 800e170:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e172:	2b47      	cmp	r3, #71	; 0x47
 800e174:	4680      	mov	r8, r0
 800e176:	d108      	bne.n	800e18a <_printf_float+0x142>
 800e178:	1cc8      	adds	r0, r1, #3
 800e17a:	db02      	blt.n	800e182 <_printf_float+0x13a>
 800e17c:	6863      	ldr	r3, [r4, #4]
 800e17e:	4299      	cmp	r1, r3
 800e180:	dd41      	ble.n	800e206 <_printf_float+0x1be>
 800e182:	f1ab 0b02 	sub.w	fp, fp, #2
 800e186:	fa5f fb8b 	uxtb.w	fp, fp
 800e18a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e18e:	d820      	bhi.n	800e1d2 <_printf_float+0x18a>
 800e190:	3901      	subs	r1, #1
 800e192:	465a      	mov	r2, fp
 800e194:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e198:	9109      	str	r1, [sp, #36]	; 0x24
 800e19a:	f7ff ff17 	bl	800dfcc <__exponent>
 800e19e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1a0:	1813      	adds	r3, r2, r0
 800e1a2:	2a01      	cmp	r2, #1
 800e1a4:	4681      	mov	r9, r0
 800e1a6:	6123      	str	r3, [r4, #16]
 800e1a8:	dc02      	bgt.n	800e1b0 <_printf_float+0x168>
 800e1aa:	6822      	ldr	r2, [r4, #0]
 800e1ac:	07d2      	lsls	r2, r2, #31
 800e1ae:	d501      	bpl.n	800e1b4 <_printf_float+0x16c>
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	6123      	str	r3, [r4, #16]
 800e1b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d09c      	beq.n	800e0f6 <_printf_float+0xae>
 800e1bc:	232d      	movs	r3, #45	; 0x2d
 800e1be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1c2:	e798      	b.n	800e0f6 <_printf_float+0xae>
 800e1c4:	9a06      	ldr	r2, [sp, #24]
 800e1c6:	2a47      	cmp	r2, #71	; 0x47
 800e1c8:	d1be      	bne.n	800e148 <_printf_float+0x100>
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1bc      	bne.n	800e148 <_printf_float+0x100>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e7b9      	b.n	800e146 <_printf_float+0xfe>
 800e1d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e1d6:	d118      	bne.n	800e20a <_printf_float+0x1c2>
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	6863      	ldr	r3, [r4, #4]
 800e1dc:	dd0b      	ble.n	800e1f6 <_printf_float+0x1ae>
 800e1de:	6121      	str	r1, [r4, #16]
 800e1e0:	b913      	cbnz	r3, 800e1e8 <_printf_float+0x1a0>
 800e1e2:	6822      	ldr	r2, [r4, #0]
 800e1e4:	07d0      	lsls	r0, r2, #31
 800e1e6:	d502      	bpl.n	800e1ee <_printf_float+0x1a6>
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	440b      	add	r3, r1
 800e1ec:	6123      	str	r3, [r4, #16]
 800e1ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800e1f0:	f04f 0900 	mov.w	r9, #0
 800e1f4:	e7de      	b.n	800e1b4 <_printf_float+0x16c>
 800e1f6:	b913      	cbnz	r3, 800e1fe <_printf_float+0x1b6>
 800e1f8:	6822      	ldr	r2, [r4, #0]
 800e1fa:	07d2      	lsls	r2, r2, #31
 800e1fc:	d501      	bpl.n	800e202 <_printf_float+0x1ba>
 800e1fe:	3302      	adds	r3, #2
 800e200:	e7f4      	b.n	800e1ec <_printf_float+0x1a4>
 800e202:	2301      	movs	r3, #1
 800e204:	e7f2      	b.n	800e1ec <_printf_float+0x1a4>
 800e206:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e20a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20c:	4299      	cmp	r1, r3
 800e20e:	db05      	blt.n	800e21c <_printf_float+0x1d4>
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	6121      	str	r1, [r4, #16]
 800e214:	07d8      	lsls	r0, r3, #31
 800e216:	d5ea      	bpl.n	800e1ee <_printf_float+0x1a6>
 800e218:	1c4b      	adds	r3, r1, #1
 800e21a:	e7e7      	b.n	800e1ec <_printf_float+0x1a4>
 800e21c:	2900      	cmp	r1, #0
 800e21e:	bfd4      	ite	le
 800e220:	f1c1 0202 	rsble	r2, r1, #2
 800e224:	2201      	movgt	r2, #1
 800e226:	4413      	add	r3, r2
 800e228:	e7e0      	b.n	800e1ec <_printf_float+0x1a4>
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	055a      	lsls	r2, r3, #21
 800e22e:	d407      	bmi.n	800e240 <_printf_float+0x1f8>
 800e230:	6923      	ldr	r3, [r4, #16]
 800e232:	4642      	mov	r2, r8
 800e234:	4631      	mov	r1, r6
 800e236:	4628      	mov	r0, r5
 800e238:	47b8      	blx	r7
 800e23a:	3001      	adds	r0, #1
 800e23c:	d12c      	bne.n	800e298 <_printf_float+0x250>
 800e23e:	e764      	b.n	800e10a <_printf_float+0xc2>
 800e240:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e244:	f240 80e0 	bls.w	800e408 <_printf_float+0x3c0>
 800e248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e24c:	2200      	movs	r2, #0
 800e24e:	2300      	movs	r3, #0
 800e250:	f7f2 fc62 	bl	8000b18 <__aeabi_dcmpeq>
 800e254:	2800      	cmp	r0, #0
 800e256:	d034      	beq.n	800e2c2 <_printf_float+0x27a>
 800e258:	4a37      	ldr	r2, [pc, #220]	; (800e338 <_printf_float+0x2f0>)
 800e25a:	2301      	movs	r3, #1
 800e25c:	4631      	mov	r1, r6
 800e25e:	4628      	mov	r0, r5
 800e260:	47b8      	blx	r7
 800e262:	3001      	adds	r0, #1
 800e264:	f43f af51 	beq.w	800e10a <_printf_float+0xc2>
 800e268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e26c:	429a      	cmp	r2, r3
 800e26e:	db02      	blt.n	800e276 <_printf_float+0x22e>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	07d8      	lsls	r0, r3, #31
 800e274:	d510      	bpl.n	800e298 <_printf_float+0x250>
 800e276:	ee18 3a10 	vmov	r3, s16
 800e27a:	4652      	mov	r2, sl
 800e27c:	4631      	mov	r1, r6
 800e27e:	4628      	mov	r0, r5
 800e280:	47b8      	blx	r7
 800e282:	3001      	adds	r0, #1
 800e284:	f43f af41 	beq.w	800e10a <_printf_float+0xc2>
 800e288:	f04f 0800 	mov.w	r8, #0
 800e28c:	f104 091a 	add.w	r9, r4, #26
 800e290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e292:	3b01      	subs	r3, #1
 800e294:	4543      	cmp	r3, r8
 800e296:	dc09      	bgt.n	800e2ac <_printf_float+0x264>
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	079b      	lsls	r3, r3, #30
 800e29c:	f100 8105 	bmi.w	800e4aa <_printf_float+0x462>
 800e2a0:	68e0      	ldr	r0, [r4, #12]
 800e2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2a4:	4298      	cmp	r0, r3
 800e2a6:	bfb8      	it	lt
 800e2a8:	4618      	movlt	r0, r3
 800e2aa:	e730      	b.n	800e10e <_printf_float+0xc6>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	464a      	mov	r2, r9
 800e2b0:	4631      	mov	r1, r6
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	47b8      	blx	r7
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	f43f af27 	beq.w	800e10a <_printf_float+0xc2>
 800e2bc:	f108 0801 	add.w	r8, r8, #1
 800e2c0:	e7e6      	b.n	800e290 <_printf_float+0x248>
 800e2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dc39      	bgt.n	800e33c <_printf_float+0x2f4>
 800e2c8:	4a1b      	ldr	r2, [pc, #108]	; (800e338 <_printf_float+0x2f0>)
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	4631      	mov	r1, r6
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	47b8      	blx	r7
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	f43f af19 	beq.w	800e10a <_printf_float+0xc2>
 800e2d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	d102      	bne.n	800e2e6 <_printf_float+0x29e>
 800e2e0:	6823      	ldr	r3, [r4, #0]
 800e2e2:	07d9      	lsls	r1, r3, #31
 800e2e4:	d5d8      	bpl.n	800e298 <_printf_float+0x250>
 800e2e6:	ee18 3a10 	vmov	r3, s16
 800e2ea:	4652      	mov	r2, sl
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	47b8      	blx	r7
 800e2f2:	3001      	adds	r0, #1
 800e2f4:	f43f af09 	beq.w	800e10a <_printf_float+0xc2>
 800e2f8:	f04f 0900 	mov.w	r9, #0
 800e2fc:	f104 0a1a 	add.w	sl, r4, #26
 800e300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e302:	425b      	negs	r3, r3
 800e304:	454b      	cmp	r3, r9
 800e306:	dc01      	bgt.n	800e30c <_printf_float+0x2c4>
 800e308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e30a:	e792      	b.n	800e232 <_printf_float+0x1ea>
 800e30c:	2301      	movs	r3, #1
 800e30e:	4652      	mov	r2, sl
 800e310:	4631      	mov	r1, r6
 800e312:	4628      	mov	r0, r5
 800e314:	47b8      	blx	r7
 800e316:	3001      	adds	r0, #1
 800e318:	f43f aef7 	beq.w	800e10a <_printf_float+0xc2>
 800e31c:	f109 0901 	add.w	r9, r9, #1
 800e320:	e7ee      	b.n	800e300 <_printf_float+0x2b8>
 800e322:	bf00      	nop
 800e324:	7fefffff 	.word	0x7fefffff
 800e328:	08010b10 	.word	0x08010b10
 800e32c:	08010b14 	.word	0x08010b14
 800e330:	08010b1c 	.word	0x08010b1c
 800e334:	08010b18 	.word	0x08010b18
 800e338:	08010b20 	.word	0x08010b20
 800e33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e33e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e340:	429a      	cmp	r2, r3
 800e342:	bfa8      	it	ge
 800e344:	461a      	movge	r2, r3
 800e346:	2a00      	cmp	r2, #0
 800e348:	4691      	mov	r9, r2
 800e34a:	dc37      	bgt.n	800e3bc <_printf_float+0x374>
 800e34c:	f04f 0b00 	mov.w	fp, #0
 800e350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e354:	f104 021a 	add.w	r2, r4, #26
 800e358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e35a:	9305      	str	r3, [sp, #20]
 800e35c:	eba3 0309 	sub.w	r3, r3, r9
 800e360:	455b      	cmp	r3, fp
 800e362:	dc33      	bgt.n	800e3cc <_printf_float+0x384>
 800e364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e368:	429a      	cmp	r2, r3
 800e36a:	db3b      	blt.n	800e3e4 <_printf_float+0x39c>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	07da      	lsls	r2, r3, #31
 800e370:	d438      	bmi.n	800e3e4 <_printf_float+0x39c>
 800e372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e374:	9a05      	ldr	r2, [sp, #20]
 800e376:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e378:	1a9a      	subs	r2, r3, r2
 800e37a:	eba3 0901 	sub.w	r9, r3, r1
 800e37e:	4591      	cmp	r9, r2
 800e380:	bfa8      	it	ge
 800e382:	4691      	movge	r9, r2
 800e384:	f1b9 0f00 	cmp.w	r9, #0
 800e388:	dc35      	bgt.n	800e3f6 <_printf_float+0x3ae>
 800e38a:	f04f 0800 	mov.w	r8, #0
 800e38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e392:	f104 0a1a 	add.w	sl, r4, #26
 800e396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e39a:	1a9b      	subs	r3, r3, r2
 800e39c:	eba3 0309 	sub.w	r3, r3, r9
 800e3a0:	4543      	cmp	r3, r8
 800e3a2:	f77f af79 	ble.w	800e298 <_printf_float+0x250>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	4652      	mov	r2, sl
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	47b8      	blx	r7
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	f43f aeaa 	beq.w	800e10a <_printf_float+0xc2>
 800e3b6:	f108 0801 	add.w	r8, r8, #1
 800e3ba:	e7ec      	b.n	800e396 <_printf_float+0x34e>
 800e3bc:	4613      	mov	r3, r2
 800e3be:	4631      	mov	r1, r6
 800e3c0:	4642      	mov	r2, r8
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	47b8      	blx	r7
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	d1c0      	bne.n	800e34c <_printf_float+0x304>
 800e3ca:	e69e      	b.n	800e10a <_printf_float+0xc2>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	4631      	mov	r1, r6
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	9205      	str	r2, [sp, #20]
 800e3d4:	47b8      	blx	r7
 800e3d6:	3001      	adds	r0, #1
 800e3d8:	f43f ae97 	beq.w	800e10a <_printf_float+0xc2>
 800e3dc:	9a05      	ldr	r2, [sp, #20]
 800e3de:	f10b 0b01 	add.w	fp, fp, #1
 800e3e2:	e7b9      	b.n	800e358 <_printf_float+0x310>
 800e3e4:	ee18 3a10 	vmov	r3, s16
 800e3e8:	4652      	mov	r2, sl
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	47b8      	blx	r7
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	d1be      	bne.n	800e372 <_printf_float+0x32a>
 800e3f4:	e689      	b.n	800e10a <_printf_float+0xc2>
 800e3f6:	9a05      	ldr	r2, [sp, #20]
 800e3f8:	464b      	mov	r3, r9
 800e3fa:	4442      	add	r2, r8
 800e3fc:	4631      	mov	r1, r6
 800e3fe:	4628      	mov	r0, r5
 800e400:	47b8      	blx	r7
 800e402:	3001      	adds	r0, #1
 800e404:	d1c1      	bne.n	800e38a <_printf_float+0x342>
 800e406:	e680      	b.n	800e10a <_printf_float+0xc2>
 800e408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e40a:	2a01      	cmp	r2, #1
 800e40c:	dc01      	bgt.n	800e412 <_printf_float+0x3ca>
 800e40e:	07db      	lsls	r3, r3, #31
 800e410:	d538      	bpl.n	800e484 <_printf_float+0x43c>
 800e412:	2301      	movs	r3, #1
 800e414:	4642      	mov	r2, r8
 800e416:	4631      	mov	r1, r6
 800e418:	4628      	mov	r0, r5
 800e41a:	47b8      	blx	r7
 800e41c:	3001      	adds	r0, #1
 800e41e:	f43f ae74 	beq.w	800e10a <_printf_float+0xc2>
 800e422:	ee18 3a10 	vmov	r3, s16
 800e426:	4652      	mov	r2, sl
 800e428:	4631      	mov	r1, r6
 800e42a:	4628      	mov	r0, r5
 800e42c:	47b8      	blx	r7
 800e42e:	3001      	adds	r0, #1
 800e430:	f43f ae6b 	beq.w	800e10a <_printf_float+0xc2>
 800e434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e438:	2200      	movs	r2, #0
 800e43a:	2300      	movs	r3, #0
 800e43c:	f7f2 fb6c 	bl	8000b18 <__aeabi_dcmpeq>
 800e440:	b9d8      	cbnz	r0, 800e47a <_printf_float+0x432>
 800e442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e444:	f108 0201 	add.w	r2, r8, #1
 800e448:	3b01      	subs	r3, #1
 800e44a:	4631      	mov	r1, r6
 800e44c:	4628      	mov	r0, r5
 800e44e:	47b8      	blx	r7
 800e450:	3001      	adds	r0, #1
 800e452:	d10e      	bne.n	800e472 <_printf_float+0x42a>
 800e454:	e659      	b.n	800e10a <_printf_float+0xc2>
 800e456:	2301      	movs	r3, #1
 800e458:	4652      	mov	r2, sl
 800e45a:	4631      	mov	r1, r6
 800e45c:	4628      	mov	r0, r5
 800e45e:	47b8      	blx	r7
 800e460:	3001      	adds	r0, #1
 800e462:	f43f ae52 	beq.w	800e10a <_printf_float+0xc2>
 800e466:	f108 0801 	add.w	r8, r8, #1
 800e46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e46c:	3b01      	subs	r3, #1
 800e46e:	4543      	cmp	r3, r8
 800e470:	dcf1      	bgt.n	800e456 <_printf_float+0x40e>
 800e472:	464b      	mov	r3, r9
 800e474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e478:	e6dc      	b.n	800e234 <_printf_float+0x1ec>
 800e47a:	f04f 0800 	mov.w	r8, #0
 800e47e:	f104 0a1a 	add.w	sl, r4, #26
 800e482:	e7f2      	b.n	800e46a <_printf_float+0x422>
 800e484:	2301      	movs	r3, #1
 800e486:	4642      	mov	r2, r8
 800e488:	e7df      	b.n	800e44a <_printf_float+0x402>
 800e48a:	2301      	movs	r3, #1
 800e48c:	464a      	mov	r2, r9
 800e48e:	4631      	mov	r1, r6
 800e490:	4628      	mov	r0, r5
 800e492:	47b8      	blx	r7
 800e494:	3001      	adds	r0, #1
 800e496:	f43f ae38 	beq.w	800e10a <_printf_float+0xc2>
 800e49a:	f108 0801 	add.w	r8, r8, #1
 800e49e:	68e3      	ldr	r3, [r4, #12]
 800e4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4a2:	1a5b      	subs	r3, r3, r1
 800e4a4:	4543      	cmp	r3, r8
 800e4a6:	dcf0      	bgt.n	800e48a <_printf_float+0x442>
 800e4a8:	e6fa      	b.n	800e2a0 <_printf_float+0x258>
 800e4aa:	f04f 0800 	mov.w	r8, #0
 800e4ae:	f104 0919 	add.w	r9, r4, #25
 800e4b2:	e7f4      	b.n	800e49e <_printf_float+0x456>

0800e4b4 <_printf_common>:
 800e4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4b8:	4616      	mov	r6, r2
 800e4ba:	4699      	mov	r9, r3
 800e4bc:	688a      	ldr	r2, [r1, #8]
 800e4be:	690b      	ldr	r3, [r1, #16]
 800e4c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	bfb8      	it	lt
 800e4c8:	4613      	movlt	r3, r2
 800e4ca:	6033      	str	r3, [r6, #0]
 800e4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4d0:	4607      	mov	r7, r0
 800e4d2:	460c      	mov	r4, r1
 800e4d4:	b10a      	cbz	r2, 800e4da <_printf_common+0x26>
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	6033      	str	r3, [r6, #0]
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	0699      	lsls	r1, r3, #26
 800e4de:	bf42      	ittt	mi
 800e4e0:	6833      	ldrmi	r3, [r6, #0]
 800e4e2:	3302      	addmi	r3, #2
 800e4e4:	6033      	strmi	r3, [r6, #0]
 800e4e6:	6825      	ldr	r5, [r4, #0]
 800e4e8:	f015 0506 	ands.w	r5, r5, #6
 800e4ec:	d106      	bne.n	800e4fc <_printf_common+0x48>
 800e4ee:	f104 0a19 	add.w	sl, r4, #25
 800e4f2:	68e3      	ldr	r3, [r4, #12]
 800e4f4:	6832      	ldr	r2, [r6, #0]
 800e4f6:	1a9b      	subs	r3, r3, r2
 800e4f8:	42ab      	cmp	r3, r5
 800e4fa:	dc26      	bgt.n	800e54a <_printf_common+0x96>
 800e4fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e500:	1e13      	subs	r3, r2, #0
 800e502:	6822      	ldr	r2, [r4, #0]
 800e504:	bf18      	it	ne
 800e506:	2301      	movne	r3, #1
 800e508:	0692      	lsls	r2, r2, #26
 800e50a:	d42b      	bmi.n	800e564 <_printf_common+0xb0>
 800e50c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e510:	4649      	mov	r1, r9
 800e512:	4638      	mov	r0, r7
 800e514:	47c0      	blx	r8
 800e516:	3001      	adds	r0, #1
 800e518:	d01e      	beq.n	800e558 <_printf_common+0xa4>
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	68e5      	ldr	r5, [r4, #12]
 800e51e:	6832      	ldr	r2, [r6, #0]
 800e520:	f003 0306 	and.w	r3, r3, #6
 800e524:	2b04      	cmp	r3, #4
 800e526:	bf08      	it	eq
 800e528:	1aad      	subeq	r5, r5, r2
 800e52a:	68a3      	ldr	r3, [r4, #8]
 800e52c:	6922      	ldr	r2, [r4, #16]
 800e52e:	bf0c      	ite	eq
 800e530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e534:	2500      	movne	r5, #0
 800e536:	4293      	cmp	r3, r2
 800e538:	bfc4      	itt	gt
 800e53a:	1a9b      	subgt	r3, r3, r2
 800e53c:	18ed      	addgt	r5, r5, r3
 800e53e:	2600      	movs	r6, #0
 800e540:	341a      	adds	r4, #26
 800e542:	42b5      	cmp	r5, r6
 800e544:	d11a      	bne.n	800e57c <_printf_common+0xc8>
 800e546:	2000      	movs	r0, #0
 800e548:	e008      	b.n	800e55c <_printf_common+0xa8>
 800e54a:	2301      	movs	r3, #1
 800e54c:	4652      	mov	r2, sl
 800e54e:	4649      	mov	r1, r9
 800e550:	4638      	mov	r0, r7
 800e552:	47c0      	blx	r8
 800e554:	3001      	adds	r0, #1
 800e556:	d103      	bne.n	800e560 <_printf_common+0xac>
 800e558:	f04f 30ff 	mov.w	r0, #4294967295
 800e55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e560:	3501      	adds	r5, #1
 800e562:	e7c6      	b.n	800e4f2 <_printf_common+0x3e>
 800e564:	18e1      	adds	r1, r4, r3
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	2030      	movs	r0, #48	; 0x30
 800e56a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e56e:	4422      	add	r2, r4
 800e570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e578:	3302      	adds	r3, #2
 800e57a:	e7c7      	b.n	800e50c <_printf_common+0x58>
 800e57c:	2301      	movs	r3, #1
 800e57e:	4622      	mov	r2, r4
 800e580:	4649      	mov	r1, r9
 800e582:	4638      	mov	r0, r7
 800e584:	47c0      	blx	r8
 800e586:	3001      	adds	r0, #1
 800e588:	d0e6      	beq.n	800e558 <_printf_common+0xa4>
 800e58a:	3601      	adds	r6, #1
 800e58c:	e7d9      	b.n	800e542 <_printf_common+0x8e>
	...

0800e590 <_printf_i>:
 800e590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e594:	7e0f      	ldrb	r7, [r1, #24]
 800e596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e598:	2f78      	cmp	r7, #120	; 0x78
 800e59a:	4691      	mov	r9, r2
 800e59c:	4680      	mov	r8, r0
 800e59e:	460c      	mov	r4, r1
 800e5a0:	469a      	mov	sl, r3
 800e5a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5a6:	d807      	bhi.n	800e5b8 <_printf_i+0x28>
 800e5a8:	2f62      	cmp	r7, #98	; 0x62
 800e5aa:	d80a      	bhi.n	800e5c2 <_printf_i+0x32>
 800e5ac:	2f00      	cmp	r7, #0
 800e5ae:	f000 80d8 	beq.w	800e762 <_printf_i+0x1d2>
 800e5b2:	2f58      	cmp	r7, #88	; 0x58
 800e5b4:	f000 80a3 	beq.w	800e6fe <_printf_i+0x16e>
 800e5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5c0:	e03a      	b.n	800e638 <_printf_i+0xa8>
 800e5c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5c6:	2b15      	cmp	r3, #21
 800e5c8:	d8f6      	bhi.n	800e5b8 <_printf_i+0x28>
 800e5ca:	a101      	add	r1, pc, #4	; (adr r1, 800e5d0 <_printf_i+0x40>)
 800e5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5d0:	0800e629 	.word	0x0800e629
 800e5d4:	0800e63d 	.word	0x0800e63d
 800e5d8:	0800e5b9 	.word	0x0800e5b9
 800e5dc:	0800e5b9 	.word	0x0800e5b9
 800e5e0:	0800e5b9 	.word	0x0800e5b9
 800e5e4:	0800e5b9 	.word	0x0800e5b9
 800e5e8:	0800e63d 	.word	0x0800e63d
 800e5ec:	0800e5b9 	.word	0x0800e5b9
 800e5f0:	0800e5b9 	.word	0x0800e5b9
 800e5f4:	0800e5b9 	.word	0x0800e5b9
 800e5f8:	0800e5b9 	.word	0x0800e5b9
 800e5fc:	0800e749 	.word	0x0800e749
 800e600:	0800e66d 	.word	0x0800e66d
 800e604:	0800e72b 	.word	0x0800e72b
 800e608:	0800e5b9 	.word	0x0800e5b9
 800e60c:	0800e5b9 	.word	0x0800e5b9
 800e610:	0800e76b 	.word	0x0800e76b
 800e614:	0800e5b9 	.word	0x0800e5b9
 800e618:	0800e66d 	.word	0x0800e66d
 800e61c:	0800e5b9 	.word	0x0800e5b9
 800e620:	0800e5b9 	.word	0x0800e5b9
 800e624:	0800e733 	.word	0x0800e733
 800e628:	682b      	ldr	r3, [r5, #0]
 800e62a:	1d1a      	adds	r2, r3, #4
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	602a      	str	r2, [r5, #0]
 800e630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e638:	2301      	movs	r3, #1
 800e63a:	e0a3      	b.n	800e784 <_printf_i+0x1f4>
 800e63c:	6820      	ldr	r0, [r4, #0]
 800e63e:	6829      	ldr	r1, [r5, #0]
 800e640:	0606      	lsls	r6, r0, #24
 800e642:	f101 0304 	add.w	r3, r1, #4
 800e646:	d50a      	bpl.n	800e65e <_printf_i+0xce>
 800e648:	680e      	ldr	r6, [r1, #0]
 800e64a:	602b      	str	r3, [r5, #0]
 800e64c:	2e00      	cmp	r6, #0
 800e64e:	da03      	bge.n	800e658 <_printf_i+0xc8>
 800e650:	232d      	movs	r3, #45	; 0x2d
 800e652:	4276      	negs	r6, r6
 800e654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e658:	485e      	ldr	r0, [pc, #376]	; (800e7d4 <_printf_i+0x244>)
 800e65a:	230a      	movs	r3, #10
 800e65c:	e019      	b.n	800e692 <_printf_i+0x102>
 800e65e:	680e      	ldr	r6, [r1, #0]
 800e660:	602b      	str	r3, [r5, #0]
 800e662:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e666:	bf18      	it	ne
 800e668:	b236      	sxthne	r6, r6
 800e66a:	e7ef      	b.n	800e64c <_printf_i+0xbc>
 800e66c:	682b      	ldr	r3, [r5, #0]
 800e66e:	6820      	ldr	r0, [r4, #0]
 800e670:	1d19      	adds	r1, r3, #4
 800e672:	6029      	str	r1, [r5, #0]
 800e674:	0601      	lsls	r1, r0, #24
 800e676:	d501      	bpl.n	800e67c <_printf_i+0xec>
 800e678:	681e      	ldr	r6, [r3, #0]
 800e67a:	e002      	b.n	800e682 <_printf_i+0xf2>
 800e67c:	0646      	lsls	r6, r0, #25
 800e67e:	d5fb      	bpl.n	800e678 <_printf_i+0xe8>
 800e680:	881e      	ldrh	r6, [r3, #0]
 800e682:	4854      	ldr	r0, [pc, #336]	; (800e7d4 <_printf_i+0x244>)
 800e684:	2f6f      	cmp	r7, #111	; 0x6f
 800e686:	bf0c      	ite	eq
 800e688:	2308      	moveq	r3, #8
 800e68a:	230a      	movne	r3, #10
 800e68c:	2100      	movs	r1, #0
 800e68e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e692:	6865      	ldr	r5, [r4, #4]
 800e694:	60a5      	str	r5, [r4, #8]
 800e696:	2d00      	cmp	r5, #0
 800e698:	bfa2      	ittt	ge
 800e69a:	6821      	ldrge	r1, [r4, #0]
 800e69c:	f021 0104 	bicge.w	r1, r1, #4
 800e6a0:	6021      	strge	r1, [r4, #0]
 800e6a2:	b90e      	cbnz	r6, 800e6a8 <_printf_i+0x118>
 800e6a4:	2d00      	cmp	r5, #0
 800e6a6:	d04d      	beq.n	800e744 <_printf_i+0x1b4>
 800e6a8:	4615      	mov	r5, r2
 800e6aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6ae:	fb03 6711 	mls	r7, r3, r1, r6
 800e6b2:	5dc7      	ldrb	r7, [r0, r7]
 800e6b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6b8:	4637      	mov	r7, r6
 800e6ba:	42bb      	cmp	r3, r7
 800e6bc:	460e      	mov	r6, r1
 800e6be:	d9f4      	bls.n	800e6aa <_printf_i+0x11a>
 800e6c0:	2b08      	cmp	r3, #8
 800e6c2:	d10b      	bne.n	800e6dc <_printf_i+0x14c>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	07de      	lsls	r6, r3, #31
 800e6c8:	d508      	bpl.n	800e6dc <_printf_i+0x14c>
 800e6ca:	6923      	ldr	r3, [r4, #16]
 800e6cc:	6861      	ldr	r1, [r4, #4]
 800e6ce:	4299      	cmp	r1, r3
 800e6d0:	bfde      	ittt	le
 800e6d2:	2330      	movle	r3, #48	; 0x30
 800e6d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6dc:	1b52      	subs	r2, r2, r5
 800e6de:	6122      	str	r2, [r4, #16]
 800e6e0:	f8cd a000 	str.w	sl, [sp]
 800e6e4:	464b      	mov	r3, r9
 800e6e6:	aa03      	add	r2, sp, #12
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	4640      	mov	r0, r8
 800e6ec:	f7ff fee2 	bl	800e4b4 <_printf_common>
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d14c      	bne.n	800e78e <_printf_i+0x1fe>
 800e6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f8:	b004      	add	sp, #16
 800e6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fe:	4835      	ldr	r0, [pc, #212]	; (800e7d4 <_printf_i+0x244>)
 800e700:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e704:	6829      	ldr	r1, [r5, #0]
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	f851 6b04 	ldr.w	r6, [r1], #4
 800e70c:	6029      	str	r1, [r5, #0]
 800e70e:	061d      	lsls	r5, r3, #24
 800e710:	d514      	bpl.n	800e73c <_printf_i+0x1ac>
 800e712:	07df      	lsls	r7, r3, #31
 800e714:	bf44      	itt	mi
 800e716:	f043 0320 	orrmi.w	r3, r3, #32
 800e71a:	6023      	strmi	r3, [r4, #0]
 800e71c:	b91e      	cbnz	r6, 800e726 <_printf_i+0x196>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	f023 0320 	bic.w	r3, r3, #32
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	2310      	movs	r3, #16
 800e728:	e7b0      	b.n	800e68c <_printf_i+0xfc>
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	f043 0320 	orr.w	r3, r3, #32
 800e730:	6023      	str	r3, [r4, #0]
 800e732:	2378      	movs	r3, #120	; 0x78
 800e734:	4828      	ldr	r0, [pc, #160]	; (800e7d8 <_printf_i+0x248>)
 800e736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e73a:	e7e3      	b.n	800e704 <_printf_i+0x174>
 800e73c:	0659      	lsls	r1, r3, #25
 800e73e:	bf48      	it	mi
 800e740:	b2b6      	uxthmi	r6, r6
 800e742:	e7e6      	b.n	800e712 <_printf_i+0x182>
 800e744:	4615      	mov	r5, r2
 800e746:	e7bb      	b.n	800e6c0 <_printf_i+0x130>
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	6826      	ldr	r6, [r4, #0]
 800e74c:	6961      	ldr	r1, [r4, #20]
 800e74e:	1d18      	adds	r0, r3, #4
 800e750:	6028      	str	r0, [r5, #0]
 800e752:	0635      	lsls	r5, r6, #24
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	d501      	bpl.n	800e75c <_printf_i+0x1cc>
 800e758:	6019      	str	r1, [r3, #0]
 800e75a:	e002      	b.n	800e762 <_printf_i+0x1d2>
 800e75c:	0670      	lsls	r0, r6, #25
 800e75e:	d5fb      	bpl.n	800e758 <_printf_i+0x1c8>
 800e760:	8019      	strh	r1, [r3, #0]
 800e762:	2300      	movs	r3, #0
 800e764:	6123      	str	r3, [r4, #16]
 800e766:	4615      	mov	r5, r2
 800e768:	e7ba      	b.n	800e6e0 <_printf_i+0x150>
 800e76a:	682b      	ldr	r3, [r5, #0]
 800e76c:	1d1a      	adds	r2, r3, #4
 800e76e:	602a      	str	r2, [r5, #0]
 800e770:	681d      	ldr	r5, [r3, #0]
 800e772:	6862      	ldr	r2, [r4, #4]
 800e774:	2100      	movs	r1, #0
 800e776:	4628      	mov	r0, r5
 800e778:	f7f1 fd5a 	bl	8000230 <memchr>
 800e77c:	b108      	cbz	r0, 800e782 <_printf_i+0x1f2>
 800e77e:	1b40      	subs	r0, r0, r5
 800e780:	6060      	str	r0, [r4, #4]
 800e782:	6863      	ldr	r3, [r4, #4]
 800e784:	6123      	str	r3, [r4, #16]
 800e786:	2300      	movs	r3, #0
 800e788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e78c:	e7a8      	b.n	800e6e0 <_printf_i+0x150>
 800e78e:	6923      	ldr	r3, [r4, #16]
 800e790:	462a      	mov	r2, r5
 800e792:	4649      	mov	r1, r9
 800e794:	4640      	mov	r0, r8
 800e796:	47d0      	blx	sl
 800e798:	3001      	adds	r0, #1
 800e79a:	d0ab      	beq.n	800e6f4 <_printf_i+0x164>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	079b      	lsls	r3, r3, #30
 800e7a0:	d413      	bmi.n	800e7ca <_printf_i+0x23a>
 800e7a2:	68e0      	ldr	r0, [r4, #12]
 800e7a4:	9b03      	ldr	r3, [sp, #12]
 800e7a6:	4298      	cmp	r0, r3
 800e7a8:	bfb8      	it	lt
 800e7aa:	4618      	movlt	r0, r3
 800e7ac:	e7a4      	b.n	800e6f8 <_printf_i+0x168>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4632      	mov	r2, r6
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	47d0      	blx	sl
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d09b      	beq.n	800e6f4 <_printf_i+0x164>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	68e3      	ldr	r3, [r4, #12]
 800e7c0:	9903      	ldr	r1, [sp, #12]
 800e7c2:	1a5b      	subs	r3, r3, r1
 800e7c4:	42ab      	cmp	r3, r5
 800e7c6:	dcf2      	bgt.n	800e7ae <_printf_i+0x21e>
 800e7c8:	e7eb      	b.n	800e7a2 <_printf_i+0x212>
 800e7ca:	2500      	movs	r5, #0
 800e7cc:	f104 0619 	add.w	r6, r4, #25
 800e7d0:	e7f5      	b.n	800e7be <_printf_i+0x22e>
 800e7d2:	bf00      	nop
 800e7d4:	08010b22 	.word	0x08010b22
 800e7d8:	08010b33 	.word	0x08010b33

0800e7dc <iprintf>:
 800e7dc:	b40f      	push	{r0, r1, r2, r3}
 800e7de:	4b0a      	ldr	r3, [pc, #40]	; (800e808 <iprintf+0x2c>)
 800e7e0:	b513      	push	{r0, r1, r4, lr}
 800e7e2:	681c      	ldr	r4, [r3, #0]
 800e7e4:	b124      	cbz	r4, 800e7f0 <iprintf+0x14>
 800e7e6:	69a3      	ldr	r3, [r4, #24]
 800e7e8:	b913      	cbnz	r3, 800e7f0 <iprintf+0x14>
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f000 fef6 	bl	800f5dc <__sinit>
 800e7f0:	ab05      	add	r3, sp, #20
 800e7f2:	9a04      	ldr	r2, [sp, #16]
 800e7f4:	68a1      	ldr	r1, [r4, #8]
 800e7f6:	9301      	str	r3, [sp, #4]
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f001 fc41 	bl	8010080 <_vfiprintf_r>
 800e7fe:	b002      	add	sp, #8
 800e800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e804:	b004      	add	sp, #16
 800e806:	4770      	bx	lr
 800e808:	20002858 	.word	0x20002858

0800e80c <putchar>:
 800e80c:	4b09      	ldr	r3, [pc, #36]	; (800e834 <putchar+0x28>)
 800e80e:	b513      	push	{r0, r1, r4, lr}
 800e810:	681c      	ldr	r4, [r3, #0]
 800e812:	4601      	mov	r1, r0
 800e814:	b134      	cbz	r4, 800e824 <putchar+0x18>
 800e816:	69a3      	ldr	r3, [r4, #24]
 800e818:	b923      	cbnz	r3, 800e824 <putchar+0x18>
 800e81a:	9001      	str	r0, [sp, #4]
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fedd 	bl	800f5dc <__sinit>
 800e822:	9901      	ldr	r1, [sp, #4]
 800e824:	68a2      	ldr	r2, [r4, #8]
 800e826:	4620      	mov	r0, r4
 800e828:	b002      	add	sp, #8
 800e82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e82e:	f001 bd57 	b.w	80102e0 <_putc_r>
 800e832:	bf00      	nop
 800e834:	20002858 	.word	0x20002858

0800e838 <quorem>:
 800e838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83c:	6903      	ldr	r3, [r0, #16]
 800e83e:	690c      	ldr	r4, [r1, #16]
 800e840:	42a3      	cmp	r3, r4
 800e842:	4607      	mov	r7, r0
 800e844:	f2c0 8081 	blt.w	800e94a <quorem+0x112>
 800e848:	3c01      	subs	r4, #1
 800e84a:	f101 0814 	add.w	r8, r1, #20
 800e84e:	f100 0514 	add.w	r5, r0, #20
 800e852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e856:	9301      	str	r3, [sp, #4]
 800e858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e85c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e860:	3301      	adds	r3, #1
 800e862:	429a      	cmp	r2, r3
 800e864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e86c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e870:	d331      	bcc.n	800e8d6 <quorem+0x9e>
 800e872:	f04f 0e00 	mov.w	lr, #0
 800e876:	4640      	mov	r0, r8
 800e878:	46ac      	mov	ip, r5
 800e87a:	46f2      	mov	sl, lr
 800e87c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e880:	b293      	uxth	r3, r2
 800e882:	fb06 e303 	mla	r3, r6, r3, lr
 800e886:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	ebaa 0303 	sub.w	r3, sl, r3
 800e890:	f8dc a000 	ldr.w	sl, [ip]
 800e894:	0c12      	lsrs	r2, r2, #16
 800e896:	fa13 f38a 	uxtah	r3, r3, sl
 800e89a:	fb06 e202 	mla	r2, r6, r2, lr
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	9b00      	ldr	r3, [sp, #0]
 800e8a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8a6:	b292      	uxth	r2, r2
 800e8a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e8ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8b4:	4581      	cmp	r9, r0
 800e8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ba:	f84c 3b04 	str.w	r3, [ip], #4
 800e8be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8c2:	d2db      	bcs.n	800e87c <quorem+0x44>
 800e8c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8c8:	b92b      	cbnz	r3, 800e8d6 <quorem+0x9e>
 800e8ca:	9b01      	ldr	r3, [sp, #4]
 800e8cc:	3b04      	subs	r3, #4
 800e8ce:	429d      	cmp	r5, r3
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	d32e      	bcc.n	800e932 <quorem+0xfa>
 800e8d4:	613c      	str	r4, [r7, #16]
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	f001 f9b0 	bl	800fc3c <__mcmp>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	db24      	blt.n	800e92a <quorem+0xf2>
 800e8e0:	3601      	adds	r6, #1
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f04f 0c00 	mov.w	ip, #0
 800e8e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8ec:	f8d0 e000 	ldr.w	lr, [r0]
 800e8f0:	b293      	uxth	r3, r2
 800e8f2:	ebac 0303 	sub.w	r3, ip, r3
 800e8f6:	0c12      	lsrs	r2, r2, #16
 800e8f8:	fa13 f38e 	uxtah	r3, r3, lr
 800e8fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e904:	b29b      	uxth	r3, r3
 800e906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e90a:	45c1      	cmp	r9, r8
 800e90c:	f840 3b04 	str.w	r3, [r0], #4
 800e910:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e914:	d2e8      	bcs.n	800e8e8 <quorem+0xb0>
 800e916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e91a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e91e:	b922      	cbnz	r2, 800e92a <quorem+0xf2>
 800e920:	3b04      	subs	r3, #4
 800e922:	429d      	cmp	r5, r3
 800e924:	461a      	mov	r2, r3
 800e926:	d30a      	bcc.n	800e93e <quorem+0x106>
 800e928:	613c      	str	r4, [r7, #16]
 800e92a:	4630      	mov	r0, r6
 800e92c:	b003      	add	sp, #12
 800e92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e932:	6812      	ldr	r2, [r2, #0]
 800e934:	3b04      	subs	r3, #4
 800e936:	2a00      	cmp	r2, #0
 800e938:	d1cc      	bne.n	800e8d4 <quorem+0x9c>
 800e93a:	3c01      	subs	r4, #1
 800e93c:	e7c7      	b.n	800e8ce <quorem+0x96>
 800e93e:	6812      	ldr	r2, [r2, #0]
 800e940:	3b04      	subs	r3, #4
 800e942:	2a00      	cmp	r2, #0
 800e944:	d1f0      	bne.n	800e928 <quorem+0xf0>
 800e946:	3c01      	subs	r4, #1
 800e948:	e7eb      	b.n	800e922 <quorem+0xea>
 800e94a:	2000      	movs	r0, #0
 800e94c:	e7ee      	b.n	800e92c <quorem+0xf4>
	...

0800e950 <_dtoa_r>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	ed2d 8b04 	vpush	{d8-d9}
 800e958:	ec57 6b10 	vmov	r6, r7, d0
 800e95c:	b093      	sub	sp, #76	; 0x4c
 800e95e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e960:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e964:	9106      	str	r1, [sp, #24]
 800e966:	ee10 aa10 	vmov	sl, s0
 800e96a:	4604      	mov	r4, r0
 800e96c:	9209      	str	r2, [sp, #36]	; 0x24
 800e96e:	930c      	str	r3, [sp, #48]	; 0x30
 800e970:	46bb      	mov	fp, r7
 800e972:	b975      	cbnz	r5, 800e992 <_dtoa_r+0x42>
 800e974:	2010      	movs	r0, #16
 800e976:	f000 fed7 	bl	800f728 <malloc>
 800e97a:	4602      	mov	r2, r0
 800e97c:	6260      	str	r0, [r4, #36]	; 0x24
 800e97e:	b920      	cbnz	r0, 800e98a <_dtoa_r+0x3a>
 800e980:	4ba7      	ldr	r3, [pc, #668]	; (800ec20 <_dtoa_r+0x2d0>)
 800e982:	21ea      	movs	r1, #234	; 0xea
 800e984:	48a7      	ldr	r0, [pc, #668]	; (800ec24 <_dtoa_r+0x2d4>)
 800e986:	f001 fe19 	bl	80105bc <__assert_func>
 800e98a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e98e:	6005      	str	r5, [r0, #0]
 800e990:	60c5      	str	r5, [r0, #12]
 800e992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e994:	6819      	ldr	r1, [r3, #0]
 800e996:	b151      	cbz	r1, 800e9ae <_dtoa_r+0x5e>
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	604a      	str	r2, [r1, #4]
 800e99c:	2301      	movs	r3, #1
 800e99e:	4093      	lsls	r3, r2
 800e9a0:	608b      	str	r3, [r1, #8]
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 ff08 	bl	800f7b8 <_Bfree>
 800e9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	1e3b      	subs	r3, r7, #0
 800e9b0:	bfaa      	itet	ge
 800e9b2:	2300      	movge	r3, #0
 800e9b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e9b8:	f8c8 3000 	strge.w	r3, [r8]
 800e9bc:	4b9a      	ldr	r3, [pc, #616]	; (800ec28 <_dtoa_r+0x2d8>)
 800e9be:	bfbc      	itt	lt
 800e9c0:	2201      	movlt	r2, #1
 800e9c2:	f8c8 2000 	strlt.w	r2, [r8]
 800e9c6:	ea33 030b 	bics.w	r3, r3, fp
 800e9ca:	d11b      	bne.n	800ea04 <_dtoa_r+0xb4>
 800e9cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9d8:	4333      	orrs	r3, r6
 800e9da:	f000 8592 	beq.w	800f502 <_dtoa_r+0xbb2>
 800e9de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9e0:	b963      	cbnz	r3, 800e9fc <_dtoa_r+0xac>
 800e9e2:	4b92      	ldr	r3, [pc, #584]	; (800ec2c <_dtoa_r+0x2dc>)
 800e9e4:	e022      	b.n	800ea2c <_dtoa_r+0xdc>
 800e9e6:	4b92      	ldr	r3, [pc, #584]	; (800ec30 <_dtoa_r+0x2e0>)
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	3308      	adds	r3, #8
 800e9ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9ee:	6013      	str	r3, [r2, #0]
 800e9f0:	9801      	ldr	r0, [sp, #4]
 800e9f2:	b013      	add	sp, #76	; 0x4c
 800e9f4:	ecbd 8b04 	vpop	{d8-d9}
 800e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fc:	4b8b      	ldr	r3, [pc, #556]	; (800ec2c <_dtoa_r+0x2dc>)
 800e9fe:	9301      	str	r3, [sp, #4]
 800ea00:	3303      	adds	r3, #3
 800ea02:	e7f3      	b.n	800e9ec <_dtoa_r+0x9c>
 800ea04:	2200      	movs	r2, #0
 800ea06:	2300      	movs	r3, #0
 800ea08:	4650      	mov	r0, sl
 800ea0a:	4659      	mov	r1, fp
 800ea0c:	f7f2 f884 	bl	8000b18 <__aeabi_dcmpeq>
 800ea10:	ec4b ab19 	vmov	d9, sl, fp
 800ea14:	4680      	mov	r8, r0
 800ea16:	b158      	cbz	r0, 800ea30 <_dtoa_r+0xe0>
 800ea18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	6013      	str	r3, [r2, #0]
 800ea1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 856b 	beq.w	800f4fc <_dtoa_r+0xbac>
 800ea26:	4883      	ldr	r0, [pc, #524]	; (800ec34 <_dtoa_r+0x2e4>)
 800ea28:	6018      	str	r0, [r3, #0]
 800ea2a:	1e43      	subs	r3, r0, #1
 800ea2c:	9301      	str	r3, [sp, #4]
 800ea2e:	e7df      	b.n	800e9f0 <_dtoa_r+0xa0>
 800ea30:	ec4b ab10 	vmov	d0, sl, fp
 800ea34:	aa10      	add	r2, sp, #64	; 0x40
 800ea36:	a911      	add	r1, sp, #68	; 0x44
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f001 f9a5 	bl	800fd88 <__d2b>
 800ea3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea42:	ee08 0a10 	vmov	s16, r0
 800ea46:	2d00      	cmp	r5, #0
 800ea48:	f000 8084 	beq.w	800eb54 <_dtoa_r+0x204>
 800ea4c:	ee19 3a90 	vmov	r3, s19
 800ea50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea58:	4656      	mov	r6, sl
 800ea5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea66:	4b74      	ldr	r3, [pc, #464]	; (800ec38 <_dtoa_r+0x2e8>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	f7f1 fc33 	bl	80002d8 <__aeabi_dsub>
 800ea72:	a365      	add	r3, pc, #404	; (adr r3, 800ec08 <_dtoa_r+0x2b8>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fde6 	bl	8000648 <__aeabi_dmul>
 800ea7c:	a364      	add	r3, pc, #400	; (adr r3, 800ec10 <_dtoa_r+0x2c0>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	f7f1 fc2b 	bl	80002dc <__adddf3>
 800ea86:	4606      	mov	r6, r0
 800ea88:	4628      	mov	r0, r5
 800ea8a:	460f      	mov	r7, r1
 800ea8c:	f7f1 fd72 	bl	8000574 <__aeabi_i2d>
 800ea90:	a361      	add	r3, pc, #388	; (adr r3, 800ec18 <_dtoa_r+0x2c8>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	f7f1 fdd7 	bl	8000648 <__aeabi_dmul>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	f7f1 fc1b 	bl	80002dc <__adddf3>
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	460f      	mov	r7, r1
 800eaaa:	f7f2 f87d 	bl	8000ba8 <__aeabi_d2iz>
 800eaae:	2200      	movs	r2, #0
 800eab0:	9000      	str	r0, [sp, #0]
 800eab2:	2300      	movs	r3, #0
 800eab4:	4630      	mov	r0, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	f7f2 f838 	bl	8000b2c <__aeabi_dcmplt>
 800eabc:	b150      	cbz	r0, 800ead4 <_dtoa_r+0x184>
 800eabe:	9800      	ldr	r0, [sp, #0]
 800eac0:	f7f1 fd58 	bl	8000574 <__aeabi_i2d>
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	f7f2 f826 	bl	8000b18 <__aeabi_dcmpeq>
 800eacc:	b910      	cbnz	r0, 800ead4 <_dtoa_r+0x184>
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	3b01      	subs	r3, #1
 800ead2:	9300      	str	r3, [sp, #0]
 800ead4:	9b00      	ldr	r3, [sp, #0]
 800ead6:	2b16      	cmp	r3, #22
 800ead8:	d85a      	bhi.n	800eb90 <_dtoa_r+0x240>
 800eada:	9a00      	ldr	r2, [sp, #0]
 800eadc:	4b57      	ldr	r3, [pc, #348]	; (800ec3c <_dtoa_r+0x2ec>)
 800eade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	ec51 0b19 	vmov	r0, r1, d9
 800eaea:	f7f2 f81f 	bl	8000b2c <__aeabi_dcmplt>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d050      	beq.n	800eb94 <_dtoa_r+0x244>
 800eaf2:	9b00      	ldr	r3, [sp, #0]
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	2300      	movs	r3, #0
 800eafa:	930b      	str	r3, [sp, #44]	; 0x2c
 800eafc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eafe:	1b5d      	subs	r5, r3, r5
 800eb00:	1e6b      	subs	r3, r5, #1
 800eb02:	9305      	str	r3, [sp, #20]
 800eb04:	bf45      	ittet	mi
 800eb06:	f1c5 0301 	rsbmi	r3, r5, #1
 800eb0a:	9304      	strmi	r3, [sp, #16]
 800eb0c:	2300      	movpl	r3, #0
 800eb0e:	2300      	movmi	r3, #0
 800eb10:	bf4c      	ite	mi
 800eb12:	9305      	strmi	r3, [sp, #20]
 800eb14:	9304      	strpl	r3, [sp, #16]
 800eb16:	9b00      	ldr	r3, [sp, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	db3d      	blt.n	800eb98 <_dtoa_r+0x248>
 800eb1c:	9b05      	ldr	r3, [sp, #20]
 800eb1e:	9a00      	ldr	r2, [sp, #0]
 800eb20:	920a      	str	r2, [sp, #40]	; 0x28
 800eb22:	4413      	add	r3, r2
 800eb24:	9305      	str	r3, [sp, #20]
 800eb26:	2300      	movs	r3, #0
 800eb28:	9307      	str	r3, [sp, #28]
 800eb2a:	9b06      	ldr	r3, [sp, #24]
 800eb2c:	2b09      	cmp	r3, #9
 800eb2e:	f200 8089 	bhi.w	800ec44 <_dtoa_r+0x2f4>
 800eb32:	2b05      	cmp	r3, #5
 800eb34:	bfc4      	itt	gt
 800eb36:	3b04      	subgt	r3, #4
 800eb38:	9306      	strgt	r3, [sp, #24]
 800eb3a:	9b06      	ldr	r3, [sp, #24]
 800eb3c:	f1a3 0302 	sub.w	r3, r3, #2
 800eb40:	bfcc      	ite	gt
 800eb42:	2500      	movgt	r5, #0
 800eb44:	2501      	movle	r5, #1
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	f200 8087 	bhi.w	800ec5a <_dtoa_r+0x30a>
 800eb4c:	e8df f003 	tbb	[pc, r3]
 800eb50:	59383a2d 	.word	0x59383a2d
 800eb54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb58:	441d      	add	r5, r3
 800eb5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb5e:	2b20      	cmp	r3, #32
 800eb60:	bfc1      	itttt	gt
 800eb62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb6a:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb72:	bfda      	itte	le
 800eb74:	f1c3 0320 	rsble	r3, r3, #32
 800eb78:	fa06 f003 	lslle.w	r0, r6, r3
 800eb7c:	4318      	orrgt	r0, r3
 800eb7e:	f7f1 fce9 	bl	8000554 <__aeabi_ui2d>
 800eb82:	2301      	movs	r3, #1
 800eb84:	4606      	mov	r6, r0
 800eb86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb8a:	3d01      	subs	r5, #1
 800eb8c:	930e      	str	r3, [sp, #56]	; 0x38
 800eb8e:	e76a      	b.n	800ea66 <_dtoa_r+0x116>
 800eb90:	2301      	movs	r3, #1
 800eb92:	e7b2      	b.n	800eafa <_dtoa_r+0x1aa>
 800eb94:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb96:	e7b1      	b.n	800eafc <_dtoa_r+0x1ac>
 800eb98:	9b04      	ldr	r3, [sp, #16]
 800eb9a:	9a00      	ldr	r2, [sp, #0]
 800eb9c:	1a9b      	subs	r3, r3, r2
 800eb9e:	9304      	str	r3, [sp, #16]
 800eba0:	4253      	negs	r3, r2
 800eba2:	9307      	str	r3, [sp, #28]
 800eba4:	2300      	movs	r3, #0
 800eba6:	930a      	str	r3, [sp, #40]	; 0x28
 800eba8:	e7bf      	b.n	800eb2a <_dtoa_r+0x1da>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	9308      	str	r3, [sp, #32]
 800ebae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	dc55      	bgt.n	800ec60 <_dtoa_r+0x310>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	9209      	str	r2, [sp, #36]	; 0x24
 800ebbe:	e00c      	b.n	800ebda <_dtoa_r+0x28a>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e7f3      	b.n	800ebac <_dtoa_r+0x25c>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebc8:	9308      	str	r3, [sp, #32]
 800ebca:	9b00      	ldr	r3, [sp, #0]
 800ebcc:	4413      	add	r3, r2
 800ebce:	9302      	str	r3, [sp, #8]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	9303      	str	r3, [sp, #12]
 800ebd6:	bfb8      	it	lt
 800ebd8:	2301      	movlt	r3, #1
 800ebda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebdc:	2200      	movs	r2, #0
 800ebde:	6042      	str	r2, [r0, #4]
 800ebe0:	2204      	movs	r2, #4
 800ebe2:	f102 0614 	add.w	r6, r2, #20
 800ebe6:	429e      	cmp	r6, r3
 800ebe8:	6841      	ldr	r1, [r0, #4]
 800ebea:	d93d      	bls.n	800ec68 <_dtoa_r+0x318>
 800ebec:	4620      	mov	r0, r4
 800ebee:	f000 fda3 	bl	800f738 <_Balloc>
 800ebf2:	9001      	str	r0, [sp, #4]
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d13b      	bne.n	800ec70 <_dtoa_r+0x320>
 800ebf8:	4b11      	ldr	r3, [pc, #68]	; (800ec40 <_dtoa_r+0x2f0>)
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ec00:	e6c0      	b.n	800e984 <_dtoa_r+0x34>
 800ec02:	2301      	movs	r3, #1
 800ec04:	e7df      	b.n	800ebc6 <_dtoa_r+0x276>
 800ec06:	bf00      	nop
 800ec08:	636f4361 	.word	0x636f4361
 800ec0c:	3fd287a7 	.word	0x3fd287a7
 800ec10:	8b60c8b3 	.word	0x8b60c8b3
 800ec14:	3fc68a28 	.word	0x3fc68a28
 800ec18:	509f79fb 	.word	0x509f79fb
 800ec1c:	3fd34413 	.word	0x3fd34413
 800ec20:	08010b51 	.word	0x08010b51
 800ec24:	08010b68 	.word	0x08010b68
 800ec28:	7ff00000 	.word	0x7ff00000
 800ec2c:	08010b4d 	.word	0x08010b4d
 800ec30:	08010b44 	.word	0x08010b44
 800ec34:	08010b21 	.word	0x08010b21
 800ec38:	3ff80000 	.word	0x3ff80000
 800ec3c:	08010cb8 	.word	0x08010cb8
 800ec40:	08010bc3 	.word	0x08010bc3
 800ec44:	2501      	movs	r5, #1
 800ec46:	2300      	movs	r3, #0
 800ec48:	9306      	str	r3, [sp, #24]
 800ec4a:	9508      	str	r5, [sp, #32]
 800ec4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec54:	2200      	movs	r2, #0
 800ec56:	2312      	movs	r3, #18
 800ec58:	e7b0      	b.n	800ebbc <_dtoa_r+0x26c>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	9308      	str	r3, [sp, #32]
 800ec5e:	e7f5      	b.n	800ec4c <_dtoa_r+0x2fc>
 800ec60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec66:	e7b8      	b.n	800ebda <_dtoa_r+0x28a>
 800ec68:	3101      	adds	r1, #1
 800ec6a:	6041      	str	r1, [r0, #4]
 800ec6c:	0052      	lsls	r2, r2, #1
 800ec6e:	e7b8      	b.n	800ebe2 <_dtoa_r+0x292>
 800ec70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec72:	9a01      	ldr	r2, [sp, #4]
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	2b0e      	cmp	r3, #14
 800ec7a:	f200 809d 	bhi.w	800edb8 <_dtoa_r+0x468>
 800ec7e:	2d00      	cmp	r5, #0
 800ec80:	f000 809a 	beq.w	800edb8 <_dtoa_r+0x468>
 800ec84:	9b00      	ldr	r3, [sp, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	dd32      	ble.n	800ecf0 <_dtoa_r+0x3a0>
 800ec8a:	4ab7      	ldr	r2, [pc, #732]	; (800ef68 <_dtoa_r+0x618>)
 800ec8c:	f003 030f 	and.w	r3, r3, #15
 800ec90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec98:	9b00      	ldr	r3, [sp, #0]
 800ec9a:	05d8      	lsls	r0, r3, #23
 800ec9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eca0:	d516      	bpl.n	800ecd0 <_dtoa_r+0x380>
 800eca2:	4bb2      	ldr	r3, [pc, #712]	; (800ef6c <_dtoa_r+0x61c>)
 800eca4:	ec51 0b19 	vmov	r0, r1, d9
 800eca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecac:	f7f1 fdf6 	bl	800089c <__aeabi_ddiv>
 800ecb0:	f007 070f 	and.w	r7, r7, #15
 800ecb4:	4682      	mov	sl, r0
 800ecb6:	468b      	mov	fp, r1
 800ecb8:	2503      	movs	r5, #3
 800ecba:	4eac      	ldr	r6, [pc, #688]	; (800ef6c <_dtoa_r+0x61c>)
 800ecbc:	b957      	cbnz	r7, 800ecd4 <_dtoa_r+0x384>
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	4650      	mov	r0, sl
 800ecc4:	4659      	mov	r1, fp
 800ecc6:	f7f1 fde9 	bl	800089c <__aeabi_ddiv>
 800ecca:	4682      	mov	sl, r0
 800eccc:	468b      	mov	fp, r1
 800ecce:	e028      	b.n	800ed22 <_dtoa_r+0x3d2>
 800ecd0:	2502      	movs	r5, #2
 800ecd2:	e7f2      	b.n	800ecba <_dtoa_r+0x36a>
 800ecd4:	07f9      	lsls	r1, r7, #31
 800ecd6:	d508      	bpl.n	800ecea <_dtoa_r+0x39a>
 800ecd8:	4640      	mov	r0, r8
 800ecda:	4649      	mov	r1, r9
 800ecdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ece0:	f7f1 fcb2 	bl	8000648 <__aeabi_dmul>
 800ece4:	3501      	adds	r5, #1
 800ece6:	4680      	mov	r8, r0
 800ece8:	4689      	mov	r9, r1
 800ecea:	107f      	asrs	r7, r7, #1
 800ecec:	3608      	adds	r6, #8
 800ecee:	e7e5      	b.n	800ecbc <_dtoa_r+0x36c>
 800ecf0:	f000 809b 	beq.w	800ee2a <_dtoa_r+0x4da>
 800ecf4:	9b00      	ldr	r3, [sp, #0]
 800ecf6:	4f9d      	ldr	r7, [pc, #628]	; (800ef6c <_dtoa_r+0x61c>)
 800ecf8:	425e      	negs	r6, r3
 800ecfa:	4b9b      	ldr	r3, [pc, #620]	; (800ef68 <_dtoa_r+0x618>)
 800ecfc:	f006 020f 	and.w	r2, r6, #15
 800ed00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed08:	ec51 0b19 	vmov	r0, r1, d9
 800ed0c:	f7f1 fc9c 	bl	8000648 <__aeabi_dmul>
 800ed10:	1136      	asrs	r6, r6, #4
 800ed12:	4682      	mov	sl, r0
 800ed14:	468b      	mov	fp, r1
 800ed16:	2300      	movs	r3, #0
 800ed18:	2502      	movs	r5, #2
 800ed1a:	2e00      	cmp	r6, #0
 800ed1c:	d17a      	bne.n	800ee14 <_dtoa_r+0x4c4>
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1d3      	bne.n	800ecca <_dtoa_r+0x37a>
 800ed22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 8082 	beq.w	800ee2e <_dtoa_r+0x4de>
 800ed2a:	4b91      	ldr	r3, [pc, #580]	; (800ef70 <_dtoa_r+0x620>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4650      	mov	r0, sl
 800ed30:	4659      	mov	r1, fp
 800ed32:	f7f1 fefb 	bl	8000b2c <__aeabi_dcmplt>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d079      	beq.n	800ee2e <_dtoa_r+0x4de>
 800ed3a:	9b03      	ldr	r3, [sp, #12]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d076      	beq.n	800ee2e <_dtoa_r+0x4de>
 800ed40:	9b02      	ldr	r3, [sp, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dd36      	ble.n	800edb4 <_dtoa_r+0x464>
 800ed46:	9b00      	ldr	r3, [sp, #0]
 800ed48:	4650      	mov	r0, sl
 800ed4a:	4659      	mov	r1, fp
 800ed4c:	1e5f      	subs	r7, r3, #1
 800ed4e:	2200      	movs	r2, #0
 800ed50:	4b88      	ldr	r3, [pc, #544]	; (800ef74 <_dtoa_r+0x624>)
 800ed52:	f7f1 fc79 	bl	8000648 <__aeabi_dmul>
 800ed56:	9e02      	ldr	r6, [sp, #8]
 800ed58:	4682      	mov	sl, r0
 800ed5a:	468b      	mov	fp, r1
 800ed5c:	3501      	adds	r5, #1
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f7f1 fc08 	bl	8000574 <__aeabi_i2d>
 800ed64:	4652      	mov	r2, sl
 800ed66:	465b      	mov	r3, fp
 800ed68:	f7f1 fc6e 	bl	8000648 <__aeabi_dmul>
 800ed6c:	4b82      	ldr	r3, [pc, #520]	; (800ef78 <_dtoa_r+0x628>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f7f1 fab4 	bl	80002dc <__adddf3>
 800ed74:	46d0      	mov	r8, sl
 800ed76:	46d9      	mov	r9, fp
 800ed78:	4682      	mov	sl, r0
 800ed7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed7e:	2e00      	cmp	r6, #0
 800ed80:	d158      	bne.n	800ee34 <_dtoa_r+0x4e4>
 800ed82:	4b7e      	ldr	r3, [pc, #504]	; (800ef7c <_dtoa_r+0x62c>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	4640      	mov	r0, r8
 800ed88:	4649      	mov	r1, r9
 800ed8a:	f7f1 faa5 	bl	80002d8 <__aeabi_dsub>
 800ed8e:	4652      	mov	r2, sl
 800ed90:	465b      	mov	r3, fp
 800ed92:	4680      	mov	r8, r0
 800ed94:	4689      	mov	r9, r1
 800ed96:	f7f1 fee7 	bl	8000b68 <__aeabi_dcmpgt>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	f040 8295 	bne.w	800f2ca <_dtoa_r+0x97a>
 800eda0:	4652      	mov	r2, sl
 800eda2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800eda6:	4640      	mov	r0, r8
 800eda8:	4649      	mov	r1, r9
 800edaa:	f7f1 febf 	bl	8000b2c <__aeabi_dcmplt>
 800edae:	2800      	cmp	r0, #0
 800edb0:	f040 8289 	bne.w	800f2c6 <_dtoa_r+0x976>
 800edb4:	ec5b ab19 	vmov	sl, fp, d9
 800edb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f2c0 8148 	blt.w	800f050 <_dtoa_r+0x700>
 800edc0:	9a00      	ldr	r2, [sp, #0]
 800edc2:	2a0e      	cmp	r2, #14
 800edc4:	f300 8144 	bgt.w	800f050 <_dtoa_r+0x700>
 800edc8:	4b67      	ldr	r3, [pc, #412]	; (800ef68 <_dtoa_r+0x618>)
 800edca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f280 80d5 	bge.w	800ef84 <_dtoa_r+0x634>
 800edda:	9b03      	ldr	r3, [sp, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f300 80d1 	bgt.w	800ef84 <_dtoa_r+0x634>
 800ede2:	f040 826f 	bne.w	800f2c4 <_dtoa_r+0x974>
 800ede6:	4b65      	ldr	r3, [pc, #404]	; (800ef7c <_dtoa_r+0x62c>)
 800ede8:	2200      	movs	r2, #0
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	f7f1 fc2b 	bl	8000648 <__aeabi_dmul>
 800edf2:	4652      	mov	r2, sl
 800edf4:	465b      	mov	r3, fp
 800edf6:	f7f1 fead 	bl	8000b54 <__aeabi_dcmpge>
 800edfa:	9e03      	ldr	r6, [sp, #12]
 800edfc:	4637      	mov	r7, r6
 800edfe:	2800      	cmp	r0, #0
 800ee00:	f040 8245 	bne.w	800f28e <_dtoa_r+0x93e>
 800ee04:	9d01      	ldr	r5, [sp, #4]
 800ee06:	2331      	movs	r3, #49	; 0x31
 800ee08:	f805 3b01 	strb.w	r3, [r5], #1
 800ee0c:	9b00      	ldr	r3, [sp, #0]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	e240      	b.n	800f296 <_dtoa_r+0x946>
 800ee14:	07f2      	lsls	r2, r6, #31
 800ee16:	d505      	bpl.n	800ee24 <_dtoa_r+0x4d4>
 800ee18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee1c:	f7f1 fc14 	bl	8000648 <__aeabi_dmul>
 800ee20:	3501      	adds	r5, #1
 800ee22:	2301      	movs	r3, #1
 800ee24:	1076      	asrs	r6, r6, #1
 800ee26:	3708      	adds	r7, #8
 800ee28:	e777      	b.n	800ed1a <_dtoa_r+0x3ca>
 800ee2a:	2502      	movs	r5, #2
 800ee2c:	e779      	b.n	800ed22 <_dtoa_r+0x3d2>
 800ee2e:	9f00      	ldr	r7, [sp, #0]
 800ee30:	9e03      	ldr	r6, [sp, #12]
 800ee32:	e794      	b.n	800ed5e <_dtoa_r+0x40e>
 800ee34:	9901      	ldr	r1, [sp, #4]
 800ee36:	4b4c      	ldr	r3, [pc, #304]	; (800ef68 <_dtoa_r+0x618>)
 800ee38:	4431      	add	r1, r6
 800ee3a:	910d      	str	r1, [sp, #52]	; 0x34
 800ee3c:	9908      	ldr	r1, [sp, #32]
 800ee3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee46:	2900      	cmp	r1, #0
 800ee48:	d043      	beq.n	800eed2 <_dtoa_r+0x582>
 800ee4a:	494d      	ldr	r1, [pc, #308]	; (800ef80 <_dtoa_r+0x630>)
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	f7f1 fd25 	bl	800089c <__aeabi_ddiv>
 800ee52:	4652      	mov	r2, sl
 800ee54:	465b      	mov	r3, fp
 800ee56:	f7f1 fa3f 	bl	80002d8 <__aeabi_dsub>
 800ee5a:	9d01      	ldr	r5, [sp, #4]
 800ee5c:	4682      	mov	sl, r0
 800ee5e:	468b      	mov	fp, r1
 800ee60:	4649      	mov	r1, r9
 800ee62:	4640      	mov	r0, r8
 800ee64:	f7f1 fea0 	bl	8000ba8 <__aeabi_d2iz>
 800ee68:	4606      	mov	r6, r0
 800ee6a:	f7f1 fb83 	bl	8000574 <__aeabi_i2d>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4640      	mov	r0, r8
 800ee74:	4649      	mov	r1, r9
 800ee76:	f7f1 fa2f 	bl	80002d8 <__aeabi_dsub>
 800ee7a:	3630      	adds	r6, #48	; 0x30
 800ee7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ee80:	4652      	mov	r2, sl
 800ee82:	465b      	mov	r3, fp
 800ee84:	4680      	mov	r8, r0
 800ee86:	4689      	mov	r9, r1
 800ee88:	f7f1 fe50 	bl	8000b2c <__aeabi_dcmplt>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d163      	bne.n	800ef58 <_dtoa_r+0x608>
 800ee90:	4642      	mov	r2, r8
 800ee92:	464b      	mov	r3, r9
 800ee94:	4936      	ldr	r1, [pc, #216]	; (800ef70 <_dtoa_r+0x620>)
 800ee96:	2000      	movs	r0, #0
 800ee98:	f7f1 fa1e 	bl	80002d8 <__aeabi_dsub>
 800ee9c:	4652      	mov	r2, sl
 800ee9e:	465b      	mov	r3, fp
 800eea0:	f7f1 fe44 	bl	8000b2c <__aeabi_dcmplt>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	f040 80b5 	bne.w	800f014 <_dtoa_r+0x6c4>
 800eeaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eeac:	429d      	cmp	r5, r3
 800eeae:	d081      	beq.n	800edb4 <_dtoa_r+0x464>
 800eeb0:	4b30      	ldr	r3, [pc, #192]	; (800ef74 <_dtoa_r+0x624>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4650      	mov	r0, sl
 800eeb6:	4659      	mov	r1, fp
 800eeb8:	f7f1 fbc6 	bl	8000648 <__aeabi_dmul>
 800eebc:	4b2d      	ldr	r3, [pc, #180]	; (800ef74 <_dtoa_r+0x624>)
 800eebe:	4682      	mov	sl, r0
 800eec0:	468b      	mov	fp, r1
 800eec2:	4640      	mov	r0, r8
 800eec4:	4649      	mov	r1, r9
 800eec6:	2200      	movs	r2, #0
 800eec8:	f7f1 fbbe 	bl	8000648 <__aeabi_dmul>
 800eecc:	4680      	mov	r8, r0
 800eece:	4689      	mov	r9, r1
 800eed0:	e7c6      	b.n	800ee60 <_dtoa_r+0x510>
 800eed2:	4650      	mov	r0, sl
 800eed4:	4659      	mov	r1, fp
 800eed6:	f7f1 fbb7 	bl	8000648 <__aeabi_dmul>
 800eeda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eedc:	9d01      	ldr	r5, [sp, #4]
 800eede:	930f      	str	r3, [sp, #60]	; 0x3c
 800eee0:	4682      	mov	sl, r0
 800eee2:	468b      	mov	fp, r1
 800eee4:	4649      	mov	r1, r9
 800eee6:	4640      	mov	r0, r8
 800eee8:	f7f1 fe5e 	bl	8000ba8 <__aeabi_d2iz>
 800eeec:	4606      	mov	r6, r0
 800eeee:	f7f1 fb41 	bl	8000574 <__aeabi_i2d>
 800eef2:	3630      	adds	r6, #48	; 0x30
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	4640      	mov	r0, r8
 800eefa:	4649      	mov	r1, r9
 800eefc:	f7f1 f9ec 	bl	80002d8 <__aeabi_dsub>
 800ef00:	f805 6b01 	strb.w	r6, [r5], #1
 800ef04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef06:	429d      	cmp	r5, r3
 800ef08:	4680      	mov	r8, r0
 800ef0a:	4689      	mov	r9, r1
 800ef0c:	f04f 0200 	mov.w	r2, #0
 800ef10:	d124      	bne.n	800ef5c <_dtoa_r+0x60c>
 800ef12:	4b1b      	ldr	r3, [pc, #108]	; (800ef80 <_dtoa_r+0x630>)
 800ef14:	4650      	mov	r0, sl
 800ef16:	4659      	mov	r1, fp
 800ef18:	f7f1 f9e0 	bl	80002dc <__adddf3>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4640      	mov	r0, r8
 800ef22:	4649      	mov	r1, r9
 800ef24:	f7f1 fe20 	bl	8000b68 <__aeabi_dcmpgt>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d173      	bne.n	800f014 <_dtoa_r+0x6c4>
 800ef2c:	4652      	mov	r2, sl
 800ef2e:	465b      	mov	r3, fp
 800ef30:	4913      	ldr	r1, [pc, #76]	; (800ef80 <_dtoa_r+0x630>)
 800ef32:	2000      	movs	r0, #0
 800ef34:	f7f1 f9d0 	bl	80002d8 <__aeabi_dsub>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	4649      	mov	r1, r9
 800ef40:	f7f1 fdf4 	bl	8000b2c <__aeabi_dcmplt>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	f43f af35 	beq.w	800edb4 <_dtoa_r+0x464>
 800ef4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef4c:	1e6b      	subs	r3, r5, #1
 800ef4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef54:	2b30      	cmp	r3, #48	; 0x30
 800ef56:	d0f8      	beq.n	800ef4a <_dtoa_r+0x5fa>
 800ef58:	9700      	str	r7, [sp, #0]
 800ef5a:	e049      	b.n	800eff0 <_dtoa_r+0x6a0>
 800ef5c:	4b05      	ldr	r3, [pc, #20]	; (800ef74 <_dtoa_r+0x624>)
 800ef5e:	f7f1 fb73 	bl	8000648 <__aeabi_dmul>
 800ef62:	4680      	mov	r8, r0
 800ef64:	4689      	mov	r9, r1
 800ef66:	e7bd      	b.n	800eee4 <_dtoa_r+0x594>
 800ef68:	08010cb8 	.word	0x08010cb8
 800ef6c:	08010c90 	.word	0x08010c90
 800ef70:	3ff00000 	.word	0x3ff00000
 800ef74:	40240000 	.word	0x40240000
 800ef78:	401c0000 	.word	0x401c0000
 800ef7c:	40140000 	.word	0x40140000
 800ef80:	3fe00000 	.word	0x3fe00000
 800ef84:	9d01      	ldr	r5, [sp, #4]
 800ef86:	4656      	mov	r6, sl
 800ef88:	465f      	mov	r7, fp
 800ef8a:	4642      	mov	r2, r8
 800ef8c:	464b      	mov	r3, r9
 800ef8e:	4630      	mov	r0, r6
 800ef90:	4639      	mov	r1, r7
 800ef92:	f7f1 fc83 	bl	800089c <__aeabi_ddiv>
 800ef96:	f7f1 fe07 	bl	8000ba8 <__aeabi_d2iz>
 800ef9a:	4682      	mov	sl, r0
 800ef9c:	f7f1 faea 	bl	8000574 <__aeabi_i2d>
 800efa0:	4642      	mov	r2, r8
 800efa2:	464b      	mov	r3, r9
 800efa4:	f7f1 fb50 	bl	8000648 <__aeabi_dmul>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	4630      	mov	r0, r6
 800efae:	4639      	mov	r1, r7
 800efb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800efb4:	f7f1 f990 	bl	80002d8 <__aeabi_dsub>
 800efb8:	f805 6b01 	strb.w	r6, [r5], #1
 800efbc:	9e01      	ldr	r6, [sp, #4]
 800efbe:	9f03      	ldr	r7, [sp, #12]
 800efc0:	1bae      	subs	r6, r5, r6
 800efc2:	42b7      	cmp	r7, r6
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	d135      	bne.n	800f036 <_dtoa_r+0x6e6>
 800efca:	f7f1 f987 	bl	80002dc <__adddf3>
 800efce:	4642      	mov	r2, r8
 800efd0:	464b      	mov	r3, r9
 800efd2:	4606      	mov	r6, r0
 800efd4:	460f      	mov	r7, r1
 800efd6:	f7f1 fdc7 	bl	8000b68 <__aeabi_dcmpgt>
 800efda:	b9d0      	cbnz	r0, 800f012 <_dtoa_r+0x6c2>
 800efdc:	4642      	mov	r2, r8
 800efde:	464b      	mov	r3, r9
 800efe0:	4630      	mov	r0, r6
 800efe2:	4639      	mov	r1, r7
 800efe4:	f7f1 fd98 	bl	8000b18 <__aeabi_dcmpeq>
 800efe8:	b110      	cbz	r0, 800eff0 <_dtoa_r+0x6a0>
 800efea:	f01a 0f01 	tst.w	sl, #1
 800efee:	d110      	bne.n	800f012 <_dtoa_r+0x6c2>
 800eff0:	4620      	mov	r0, r4
 800eff2:	ee18 1a10 	vmov	r1, s16
 800eff6:	f000 fbdf 	bl	800f7b8 <_Bfree>
 800effa:	2300      	movs	r3, #0
 800effc:	9800      	ldr	r0, [sp, #0]
 800effe:	702b      	strb	r3, [r5, #0]
 800f000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f002:	3001      	adds	r0, #1
 800f004:	6018      	str	r0, [r3, #0]
 800f006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f008:	2b00      	cmp	r3, #0
 800f00a:	f43f acf1 	beq.w	800e9f0 <_dtoa_r+0xa0>
 800f00e:	601d      	str	r5, [r3, #0]
 800f010:	e4ee      	b.n	800e9f0 <_dtoa_r+0xa0>
 800f012:	9f00      	ldr	r7, [sp, #0]
 800f014:	462b      	mov	r3, r5
 800f016:	461d      	mov	r5, r3
 800f018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f01c:	2a39      	cmp	r2, #57	; 0x39
 800f01e:	d106      	bne.n	800f02e <_dtoa_r+0x6de>
 800f020:	9a01      	ldr	r2, [sp, #4]
 800f022:	429a      	cmp	r2, r3
 800f024:	d1f7      	bne.n	800f016 <_dtoa_r+0x6c6>
 800f026:	9901      	ldr	r1, [sp, #4]
 800f028:	2230      	movs	r2, #48	; 0x30
 800f02a:	3701      	adds	r7, #1
 800f02c:	700a      	strb	r2, [r1, #0]
 800f02e:	781a      	ldrb	r2, [r3, #0]
 800f030:	3201      	adds	r2, #1
 800f032:	701a      	strb	r2, [r3, #0]
 800f034:	e790      	b.n	800ef58 <_dtoa_r+0x608>
 800f036:	4ba6      	ldr	r3, [pc, #664]	; (800f2d0 <_dtoa_r+0x980>)
 800f038:	2200      	movs	r2, #0
 800f03a:	f7f1 fb05 	bl	8000648 <__aeabi_dmul>
 800f03e:	2200      	movs	r2, #0
 800f040:	2300      	movs	r3, #0
 800f042:	4606      	mov	r6, r0
 800f044:	460f      	mov	r7, r1
 800f046:	f7f1 fd67 	bl	8000b18 <__aeabi_dcmpeq>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d09d      	beq.n	800ef8a <_dtoa_r+0x63a>
 800f04e:	e7cf      	b.n	800eff0 <_dtoa_r+0x6a0>
 800f050:	9a08      	ldr	r2, [sp, #32]
 800f052:	2a00      	cmp	r2, #0
 800f054:	f000 80d7 	beq.w	800f206 <_dtoa_r+0x8b6>
 800f058:	9a06      	ldr	r2, [sp, #24]
 800f05a:	2a01      	cmp	r2, #1
 800f05c:	f300 80ba 	bgt.w	800f1d4 <_dtoa_r+0x884>
 800f060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f062:	2a00      	cmp	r2, #0
 800f064:	f000 80b2 	beq.w	800f1cc <_dtoa_r+0x87c>
 800f068:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f06c:	9e07      	ldr	r6, [sp, #28]
 800f06e:	9d04      	ldr	r5, [sp, #16]
 800f070:	9a04      	ldr	r2, [sp, #16]
 800f072:	441a      	add	r2, r3
 800f074:	9204      	str	r2, [sp, #16]
 800f076:	9a05      	ldr	r2, [sp, #20]
 800f078:	2101      	movs	r1, #1
 800f07a:	441a      	add	r2, r3
 800f07c:	4620      	mov	r0, r4
 800f07e:	9205      	str	r2, [sp, #20]
 800f080:	f000 fc52 	bl	800f928 <__i2b>
 800f084:	4607      	mov	r7, r0
 800f086:	2d00      	cmp	r5, #0
 800f088:	dd0c      	ble.n	800f0a4 <_dtoa_r+0x754>
 800f08a:	9b05      	ldr	r3, [sp, #20]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	dd09      	ble.n	800f0a4 <_dtoa_r+0x754>
 800f090:	42ab      	cmp	r3, r5
 800f092:	9a04      	ldr	r2, [sp, #16]
 800f094:	bfa8      	it	ge
 800f096:	462b      	movge	r3, r5
 800f098:	1ad2      	subs	r2, r2, r3
 800f09a:	9204      	str	r2, [sp, #16]
 800f09c:	9a05      	ldr	r2, [sp, #20]
 800f09e:	1aed      	subs	r5, r5, r3
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	9305      	str	r3, [sp, #20]
 800f0a4:	9b07      	ldr	r3, [sp, #28]
 800f0a6:	b31b      	cbz	r3, 800f0f0 <_dtoa_r+0x7a0>
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f000 80af 	beq.w	800f20e <_dtoa_r+0x8be>
 800f0b0:	2e00      	cmp	r6, #0
 800f0b2:	dd13      	ble.n	800f0dc <_dtoa_r+0x78c>
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f000 fcf5 	bl	800faa8 <__pow5mult>
 800f0be:	ee18 2a10 	vmov	r2, s16
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	4607      	mov	r7, r0
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f000 fc44 	bl	800f954 <__multiply>
 800f0cc:	ee18 1a10 	vmov	r1, s16
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fb70 	bl	800f7b8 <_Bfree>
 800f0d8:	ee08 8a10 	vmov	s16, r8
 800f0dc:	9b07      	ldr	r3, [sp, #28]
 800f0de:	1b9a      	subs	r2, r3, r6
 800f0e0:	d006      	beq.n	800f0f0 <_dtoa_r+0x7a0>
 800f0e2:	ee18 1a10 	vmov	r1, s16
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 fcde 	bl	800faa8 <__pow5mult>
 800f0ec:	ee08 0a10 	vmov	s16, r0
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 fc18 	bl	800f928 <__i2b>
 800f0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	4606      	mov	r6, r0
 800f0fe:	f340 8088 	ble.w	800f212 <_dtoa_r+0x8c2>
 800f102:	461a      	mov	r2, r3
 800f104:	4601      	mov	r1, r0
 800f106:	4620      	mov	r0, r4
 800f108:	f000 fcce 	bl	800faa8 <__pow5mult>
 800f10c:	9b06      	ldr	r3, [sp, #24]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	4606      	mov	r6, r0
 800f112:	f340 8081 	ble.w	800f218 <_dtoa_r+0x8c8>
 800f116:	f04f 0800 	mov.w	r8, #0
 800f11a:	6933      	ldr	r3, [r6, #16]
 800f11c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f120:	6918      	ldr	r0, [r3, #16]
 800f122:	f000 fbb1 	bl	800f888 <__hi0bits>
 800f126:	f1c0 0020 	rsb	r0, r0, #32
 800f12a:	9b05      	ldr	r3, [sp, #20]
 800f12c:	4418      	add	r0, r3
 800f12e:	f010 001f 	ands.w	r0, r0, #31
 800f132:	f000 8092 	beq.w	800f25a <_dtoa_r+0x90a>
 800f136:	f1c0 0320 	rsb	r3, r0, #32
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	f340 808a 	ble.w	800f254 <_dtoa_r+0x904>
 800f140:	f1c0 001c 	rsb	r0, r0, #28
 800f144:	9b04      	ldr	r3, [sp, #16]
 800f146:	4403      	add	r3, r0
 800f148:	9304      	str	r3, [sp, #16]
 800f14a:	9b05      	ldr	r3, [sp, #20]
 800f14c:	4403      	add	r3, r0
 800f14e:	4405      	add	r5, r0
 800f150:	9305      	str	r3, [sp, #20]
 800f152:	9b04      	ldr	r3, [sp, #16]
 800f154:	2b00      	cmp	r3, #0
 800f156:	dd07      	ble.n	800f168 <_dtoa_r+0x818>
 800f158:	ee18 1a10 	vmov	r1, s16
 800f15c:	461a      	mov	r2, r3
 800f15e:	4620      	mov	r0, r4
 800f160:	f000 fcfc 	bl	800fb5c <__lshift>
 800f164:	ee08 0a10 	vmov	s16, r0
 800f168:	9b05      	ldr	r3, [sp, #20]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	dd05      	ble.n	800f17a <_dtoa_r+0x82a>
 800f16e:	4631      	mov	r1, r6
 800f170:	461a      	mov	r2, r3
 800f172:	4620      	mov	r0, r4
 800f174:	f000 fcf2 	bl	800fb5c <__lshift>
 800f178:	4606      	mov	r6, r0
 800f17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d06e      	beq.n	800f25e <_dtoa_r+0x90e>
 800f180:	ee18 0a10 	vmov	r0, s16
 800f184:	4631      	mov	r1, r6
 800f186:	f000 fd59 	bl	800fc3c <__mcmp>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	da67      	bge.n	800f25e <_dtoa_r+0x90e>
 800f18e:	9b00      	ldr	r3, [sp, #0]
 800f190:	3b01      	subs	r3, #1
 800f192:	ee18 1a10 	vmov	r1, s16
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	220a      	movs	r2, #10
 800f19a:	2300      	movs	r3, #0
 800f19c:	4620      	mov	r0, r4
 800f19e:	f000 fb2d 	bl	800f7fc <__multadd>
 800f1a2:	9b08      	ldr	r3, [sp, #32]
 800f1a4:	ee08 0a10 	vmov	s16, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f000 81b1 	beq.w	800f510 <_dtoa_r+0xbc0>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	220a      	movs	r2, #10
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f000 fb21 	bl	800f7fc <__multadd>
 800f1ba:	9b02      	ldr	r3, [sp, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	4607      	mov	r7, r0
 800f1c0:	f300 808e 	bgt.w	800f2e0 <_dtoa_r+0x990>
 800f1c4:	9b06      	ldr	r3, [sp, #24]
 800f1c6:	2b02      	cmp	r3, #2
 800f1c8:	dc51      	bgt.n	800f26e <_dtoa_r+0x91e>
 800f1ca:	e089      	b.n	800f2e0 <_dtoa_r+0x990>
 800f1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1d2:	e74b      	b.n	800f06c <_dtoa_r+0x71c>
 800f1d4:	9b03      	ldr	r3, [sp, #12]
 800f1d6:	1e5e      	subs	r6, r3, #1
 800f1d8:	9b07      	ldr	r3, [sp, #28]
 800f1da:	42b3      	cmp	r3, r6
 800f1dc:	bfbf      	itttt	lt
 800f1de:	9b07      	ldrlt	r3, [sp, #28]
 800f1e0:	9607      	strlt	r6, [sp, #28]
 800f1e2:	1af2      	sublt	r2, r6, r3
 800f1e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1e6:	bfb6      	itet	lt
 800f1e8:	189b      	addlt	r3, r3, r2
 800f1ea:	1b9e      	subge	r6, r3, r6
 800f1ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	bfb8      	it	lt
 800f1f2:	2600      	movlt	r6, #0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	bfb7      	itett	lt
 800f1f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f1fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f200:	1a9d      	sublt	r5, r3, r2
 800f202:	2300      	movlt	r3, #0
 800f204:	e734      	b.n	800f070 <_dtoa_r+0x720>
 800f206:	9e07      	ldr	r6, [sp, #28]
 800f208:	9d04      	ldr	r5, [sp, #16]
 800f20a:	9f08      	ldr	r7, [sp, #32]
 800f20c:	e73b      	b.n	800f086 <_dtoa_r+0x736>
 800f20e:	9a07      	ldr	r2, [sp, #28]
 800f210:	e767      	b.n	800f0e2 <_dtoa_r+0x792>
 800f212:	9b06      	ldr	r3, [sp, #24]
 800f214:	2b01      	cmp	r3, #1
 800f216:	dc18      	bgt.n	800f24a <_dtoa_r+0x8fa>
 800f218:	f1ba 0f00 	cmp.w	sl, #0
 800f21c:	d115      	bne.n	800f24a <_dtoa_r+0x8fa>
 800f21e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f222:	b993      	cbnz	r3, 800f24a <_dtoa_r+0x8fa>
 800f224:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f228:	0d1b      	lsrs	r3, r3, #20
 800f22a:	051b      	lsls	r3, r3, #20
 800f22c:	b183      	cbz	r3, 800f250 <_dtoa_r+0x900>
 800f22e:	9b04      	ldr	r3, [sp, #16]
 800f230:	3301      	adds	r3, #1
 800f232:	9304      	str	r3, [sp, #16]
 800f234:	9b05      	ldr	r3, [sp, #20]
 800f236:	3301      	adds	r3, #1
 800f238:	9305      	str	r3, [sp, #20]
 800f23a:	f04f 0801 	mov.w	r8, #1
 800f23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f240:	2b00      	cmp	r3, #0
 800f242:	f47f af6a 	bne.w	800f11a <_dtoa_r+0x7ca>
 800f246:	2001      	movs	r0, #1
 800f248:	e76f      	b.n	800f12a <_dtoa_r+0x7da>
 800f24a:	f04f 0800 	mov.w	r8, #0
 800f24e:	e7f6      	b.n	800f23e <_dtoa_r+0x8ee>
 800f250:	4698      	mov	r8, r3
 800f252:	e7f4      	b.n	800f23e <_dtoa_r+0x8ee>
 800f254:	f43f af7d 	beq.w	800f152 <_dtoa_r+0x802>
 800f258:	4618      	mov	r0, r3
 800f25a:	301c      	adds	r0, #28
 800f25c:	e772      	b.n	800f144 <_dtoa_r+0x7f4>
 800f25e:	9b03      	ldr	r3, [sp, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	dc37      	bgt.n	800f2d4 <_dtoa_r+0x984>
 800f264:	9b06      	ldr	r3, [sp, #24]
 800f266:	2b02      	cmp	r3, #2
 800f268:	dd34      	ble.n	800f2d4 <_dtoa_r+0x984>
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	9302      	str	r3, [sp, #8]
 800f26e:	9b02      	ldr	r3, [sp, #8]
 800f270:	b96b      	cbnz	r3, 800f28e <_dtoa_r+0x93e>
 800f272:	4631      	mov	r1, r6
 800f274:	2205      	movs	r2, #5
 800f276:	4620      	mov	r0, r4
 800f278:	f000 fac0 	bl	800f7fc <__multadd>
 800f27c:	4601      	mov	r1, r0
 800f27e:	4606      	mov	r6, r0
 800f280:	ee18 0a10 	vmov	r0, s16
 800f284:	f000 fcda 	bl	800fc3c <__mcmp>
 800f288:	2800      	cmp	r0, #0
 800f28a:	f73f adbb 	bgt.w	800ee04 <_dtoa_r+0x4b4>
 800f28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f290:	9d01      	ldr	r5, [sp, #4]
 800f292:	43db      	mvns	r3, r3
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	f04f 0800 	mov.w	r8, #0
 800f29a:	4631      	mov	r1, r6
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 fa8b 	bl	800f7b8 <_Bfree>
 800f2a2:	2f00      	cmp	r7, #0
 800f2a4:	f43f aea4 	beq.w	800eff0 <_dtoa_r+0x6a0>
 800f2a8:	f1b8 0f00 	cmp.w	r8, #0
 800f2ac:	d005      	beq.n	800f2ba <_dtoa_r+0x96a>
 800f2ae:	45b8      	cmp	r8, r7
 800f2b0:	d003      	beq.n	800f2ba <_dtoa_r+0x96a>
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 fa7f 	bl	800f7b8 <_Bfree>
 800f2ba:	4639      	mov	r1, r7
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f000 fa7b 	bl	800f7b8 <_Bfree>
 800f2c2:	e695      	b.n	800eff0 <_dtoa_r+0x6a0>
 800f2c4:	2600      	movs	r6, #0
 800f2c6:	4637      	mov	r7, r6
 800f2c8:	e7e1      	b.n	800f28e <_dtoa_r+0x93e>
 800f2ca:	9700      	str	r7, [sp, #0]
 800f2cc:	4637      	mov	r7, r6
 800f2ce:	e599      	b.n	800ee04 <_dtoa_r+0x4b4>
 800f2d0:	40240000 	.word	0x40240000
 800f2d4:	9b08      	ldr	r3, [sp, #32]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f000 80ca 	beq.w	800f470 <_dtoa_r+0xb20>
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	9302      	str	r3, [sp, #8]
 800f2e0:	2d00      	cmp	r5, #0
 800f2e2:	dd05      	ble.n	800f2f0 <_dtoa_r+0x9a0>
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	462a      	mov	r2, r5
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f000 fc37 	bl	800fb5c <__lshift>
 800f2ee:	4607      	mov	r7, r0
 800f2f0:	f1b8 0f00 	cmp.w	r8, #0
 800f2f4:	d05b      	beq.n	800f3ae <_dtoa_r+0xa5e>
 800f2f6:	6879      	ldr	r1, [r7, #4]
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f000 fa1d 	bl	800f738 <_Balloc>
 800f2fe:	4605      	mov	r5, r0
 800f300:	b928      	cbnz	r0, 800f30e <_dtoa_r+0x9be>
 800f302:	4b87      	ldr	r3, [pc, #540]	; (800f520 <_dtoa_r+0xbd0>)
 800f304:	4602      	mov	r2, r0
 800f306:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f30a:	f7ff bb3b 	b.w	800e984 <_dtoa_r+0x34>
 800f30e:	693a      	ldr	r2, [r7, #16]
 800f310:	3202      	adds	r2, #2
 800f312:	0092      	lsls	r2, r2, #2
 800f314:	f107 010c 	add.w	r1, r7, #12
 800f318:	300c      	adds	r0, #12
 800f31a:	f7fe fddf 	bl	800dedc <memcpy>
 800f31e:	2201      	movs	r2, #1
 800f320:	4629      	mov	r1, r5
 800f322:	4620      	mov	r0, r4
 800f324:	f000 fc1a 	bl	800fb5c <__lshift>
 800f328:	9b01      	ldr	r3, [sp, #4]
 800f32a:	f103 0901 	add.w	r9, r3, #1
 800f32e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f332:	4413      	add	r3, r2
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	f00a 0301 	and.w	r3, sl, #1
 800f33a:	46b8      	mov	r8, r7
 800f33c:	9304      	str	r3, [sp, #16]
 800f33e:	4607      	mov	r7, r0
 800f340:	4631      	mov	r1, r6
 800f342:	ee18 0a10 	vmov	r0, s16
 800f346:	f7ff fa77 	bl	800e838 <quorem>
 800f34a:	4641      	mov	r1, r8
 800f34c:	9002      	str	r0, [sp, #8]
 800f34e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f352:	ee18 0a10 	vmov	r0, s16
 800f356:	f000 fc71 	bl	800fc3c <__mcmp>
 800f35a:	463a      	mov	r2, r7
 800f35c:	9003      	str	r0, [sp, #12]
 800f35e:	4631      	mov	r1, r6
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fc87 	bl	800fc74 <__mdiff>
 800f366:	68c2      	ldr	r2, [r0, #12]
 800f368:	f109 3bff 	add.w	fp, r9, #4294967295
 800f36c:	4605      	mov	r5, r0
 800f36e:	bb02      	cbnz	r2, 800f3b2 <_dtoa_r+0xa62>
 800f370:	4601      	mov	r1, r0
 800f372:	ee18 0a10 	vmov	r0, s16
 800f376:	f000 fc61 	bl	800fc3c <__mcmp>
 800f37a:	4602      	mov	r2, r0
 800f37c:	4629      	mov	r1, r5
 800f37e:	4620      	mov	r0, r4
 800f380:	9207      	str	r2, [sp, #28]
 800f382:	f000 fa19 	bl	800f7b8 <_Bfree>
 800f386:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f38a:	ea43 0102 	orr.w	r1, r3, r2
 800f38e:	9b04      	ldr	r3, [sp, #16]
 800f390:	430b      	orrs	r3, r1
 800f392:	464d      	mov	r5, r9
 800f394:	d10f      	bne.n	800f3b6 <_dtoa_r+0xa66>
 800f396:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f39a:	d02a      	beq.n	800f3f2 <_dtoa_r+0xaa2>
 800f39c:	9b03      	ldr	r3, [sp, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	dd02      	ble.n	800f3a8 <_dtoa_r+0xa58>
 800f3a2:	9b02      	ldr	r3, [sp, #8]
 800f3a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f3a8:	f88b a000 	strb.w	sl, [fp]
 800f3ac:	e775      	b.n	800f29a <_dtoa_r+0x94a>
 800f3ae:	4638      	mov	r0, r7
 800f3b0:	e7ba      	b.n	800f328 <_dtoa_r+0x9d8>
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	e7e2      	b.n	800f37c <_dtoa_r+0xa2c>
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	db04      	blt.n	800f3c6 <_dtoa_r+0xa76>
 800f3bc:	9906      	ldr	r1, [sp, #24]
 800f3be:	430b      	orrs	r3, r1
 800f3c0:	9904      	ldr	r1, [sp, #16]
 800f3c2:	430b      	orrs	r3, r1
 800f3c4:	d122      	bne.n	800f40c <_dtoa_r+0xabc>
 800f3c6:	2a00      	cmp	r2, #0
 800f3c8:	ddee      	ble.n	800f3a8 <_dtoa_r+0xa58>
 800f3ca:	ee18 1a10 	vmov	r1, s16
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f000 fbc3 	bl	800fb5c <__lshift>
 800f3d6:	4631      	mov	r1, r6
 800f3d8:	ee08 0a10 	vmov	s16, r0
 800f3dc:	f000 fc2e 	bl	800fc3c <__mcmp>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	dc03      	bgt.n	800f3ec <_dtoa_r+0xa9c>
 800f3e4:	d1e0      	bne.n	800f3a8 <_dtoa_r+0xa58>
 800f3e6:	f01a 0f01 	tst.w	sl, #1
 800f3ea:	d0dd      	beq.n	800f3a8 <_dtoa_r+0xa58>
 800f3ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3f0:	d1d7      	bne.n	800f3a2 <_dtoa_r+0xa52>
 800f3f2:	2339      	movs	r3, #57	; 0x39
 800f3f4:	f88b 3000 	strb.w	r3, [fp]
 800f3f8:	462b      	mov	r3, r5
 800f3fa:	461d      	mov	r5, r3
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f402:	2a39      	cmp	r2, #57	; 0x39
 800f404:	d071      	beq.n	800f4ea <_dtoa_r+0xb9a>
 800f406:	3201      	adds	r2, #1
 800f408:	701a      	strb	r2, [r3, #0]
 800f40a:	e746      	b.n	800f29a <_dtoa_r+0x94a>
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	dd07      	ble.n	800f420 <_dtoa_r+0xad0>
 800f410:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f414:	d0ed      	beq.n	800f3f2 <_dtoa_r+0xaa2>
 800f416:	f10a 0301 	add.w	r3, sl, #1
 800f41a:	f88b 3000 	strb.w	r3, [fp]
 800f41e:	e73c      	b.n	800f29a <_dtoa_r+0x94a>
 800f420:	9b05      	ldr	r3, [sp, #20]
 800f422:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f426:	4599      	cmp	r9, r3
 800f428:	d047      	beq.n	800f4ba <_dtoa_r+0xb6a>
 800f42a:	ee18 1a10 	vmov	r1, s16
 800f42e:	2300      	movs	r3, #0
 800f430:	220a      	movs	r2, #10
 800f432:	4620      	mov	r0, r4
 800f434:	f000 f9e2 	bl	800f7fc <__multadd>
 800f438:	45b8      	cmp	r8, r7
 800f43a:	ee08 0a10 	vmov	s16, r0
 800f43e:	f04f 0300 	mov.w	r3, #0
 800f442:	f04f 020a 	mov.w	r2, #10
 800f446:	4641      	mov	r1, r8
 800f448:	4620      	mov	r0, r4
 800f44a:	d106      	bne.n	800f45a <_dtoa_r+0xb0a>
 800f44c:	f000 f9d6 	bl	800f7fc <__multadd>
 800f450:	4680      	mov	r8, r0
 800f452:	4607      	mov	r7, r0
 800f454:	f109 0901 	add.w	r9, r9, #1
 800f458:	e772      	b.n	800f340 <_dtoa_r+0x9f0>
 800f45a:	f000 f9cf 	bl	800f7fc <__multadd>
 800f45e:	4639      	mov	r1, r7
 800f460:	4680      	mov	r8, r0
 800f462:	2300      	movs	r3, #0
 800f464:	220a      	movs	r2, #10
 800f466:	4620      	mov	r0, r4
 800f468:	f000 f9c8 	bl	800f7fc <__multadd>
 800f46c:	4607      	mov	r7, r0
 800f46e:	e7f1      	b.n	800f454 <_dtoa_r+0xb04>
 800f470:	9b03      	ldr	r3, [sp, #12]
 800f472:	9302      	str	r3, [sp, #8]
 800f474:	9d01      	ldr	r5, [sp, #4]
 800f476:	ee18 0a10 	vmov	r0, s16
 800f47a:	4631      	mov	r1, r6
 800f47c:	f7ff f9dc 	bl	800e838 <quorem>
 800f480:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f484:	9b01      	ldr	r3, [sp, #4]
 800f486:	f805 ab01 	strb.w	sl, [r5], #1
 800f48a:	1aea      	subs	r2, r5, r3
 800f48c:	9b02      	ldr	r3, [sp, #8]
 800f48e:	4293      	cmp	r3, r2
 800f490:	dd09      	ble.n	800f4a6 <_dtoa_r+0xb56>
 800f492:	ee18 1a10 	vmov	r1, s16
 800f496:	2300      	movs	r3, #0
 800f498:	220a      	movs	r2, #10
 800f49a:	4620      	mov	r0, r4
 800f49c:	f000 f9ae 	bl	800f7fc <__multadd>
 800f4a0:	ee08 0a10 	vmov	s16, r0
 800f4a4:	e7e7      	b.n	800f476 <_dtoa_r+0xb26>
 800f4a6:	9b02      	ldr	r3, [sp, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bfc8      	it	gt
 800f4ac:	461d      	movgt	r5, r3
 800f4ae:	9b01      	ldr	r3, [sp, #4]
 800f4b0:	bfd8      	it	le
 800f4b2:	2501      	movle	r5, #1
 800f4b4:	441d      	add	r5, r3
 800f4b6:	f04f 0800 	mov.w	r8, #0
 800f4ba:	ee18 1a10 	vmov	r1, s16
 800f4be:	2201      	movs	r2, #1
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 fb4b 	bl	800fb5c <__lshift>
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	ee08 0a10 	vmov	s16, r0
 800f4cc:	f000 fbb6 	bl	800fc3c <__mcmp>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	dc91      	bgt.n	800f3f8 <_dtoa_r+0xaa8>
 800f4d4:	d102      	bne.n	800f4dc <_dtoa_r+0xb8c>
 800f4d6:	f01a 0f01 	tst.w	sl, #1
 800f4da:	d18d      	bne.n	800f3f8 <_dtoa_r+0xaa8>
 800f4dc:	462b      	mov	r3, r5
 800f4de:	461d      	mov	r5, r3
 800f4e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4e4:	2a30      	cmp	r2, #48	; 0x30
 800f4e6:	d0fa      	beq.n	800f4de <_dtoa_r+0xb8e>
 800f4e8:	e6d7      	b.n	800f29a <_dtoa_r+0x94a>
 800f4ea:	9a01      	ldr	r2, [sp, #4]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d184      	bne.n	800f3fa <_dtoa_r+0xaaa>
 800f4f0:	9b00      	ldr	r3, [sp, #0]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	9300      	str	r3, [sp, #0]
 800f4f6:	2331      	movs	r3, #49	; 0x31
 800f4f8:	7013      	strb	r3, [r2, #0]
 800f4fa:	e6ce      	b.n	800f29a <_dtoa_r+0x94a>
 800f4fc:	4b09      	ldr	r3, [pc, #36]	; (800f524 <_dtoa_r+0xbd4>)
 800f4fe:	f7ff ba95 	b.w	800ea2c <_dtoa_r+0xdc>
 800f502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f504:	2b00      	cmp	r3, #0
 800f506:	f47f aa6e 	bne.w	800e9e6 <_dtoa_r+0x96>
 800f50a:	4b07      	ldr	r3, [pc, #28]	; (800f528 <_dtoa_r+0xbd8>)
 800f50c:	f7ff ba8e 	b.w	800ea2c <_dtoa_r+0xdc>
 800f510:	9b02      	ldr	r3, [sp, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	dcae      	bgt.n	800f474 <_dtoa_r+0xb24>
 800f516:	9b06      	ldr	r3, [sp, #24]
 800f518:	2b02      	cmp	r3, #2
 800f51a:	f73f aea8 	bgt.w	800f26e <_dtoa_r+0x91e>
 800f51e:	e7a9      	b.n	800f474 <_dtoa_r+0xb24>
 800f520:	08010bc3 	.word	0x08010bc3
 800f524:	08010b20 	.word	0x08010b20
 800f528:	08010b44 	.word	0x08010b44

0800f52c <std>:
 800f52c:	2300      	movs	r3, #0
 800f52e:	b510      	push	{r4, lr}
 800f530:	4604      	mov	r4, r0
 800f532:	e9c0 3300 	strd	r3, r3, [r0]
 800f536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f53a:	6083      	str	r3, [r0, #8]
 800f53c:	8181      	strh	r1, [r0, #12]
 800f53e:	6643      	str	r3, [r0, #100]	; 0x64
 800f540:	81c2      	strh	r2, [r0, #14]
 800f542:	6183      	str	r3, [r0, #24]
 800f544:	4619      	mov	r1, r3
 800f546:	2208      	movs	r2, #8
 800f548:	305c      	adds	r0, #92	; 0x5c
 800f54a:	f7fe fcd5 	bl	800def8 <memset>
 800f54e:	4b05      	ldr	r3, [pc, #20]	; (800f564 <std+0x38>)
 800f550:	6263      	str	r3, [r4, #36]	; 0x24
 800f552:	4b05      	ldr	r3, [pc, #20]	; (800f568 <std+0x3c>)
 800f554:	62a3      	str	r3, [r4, #40]	; 0x28
 800f556:	4b05      	ldr	r3, [pc, #20]	; (800f56c <std+0x40>)
 800f558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f55a:	4b05      	ldr	r3, [pc, #20]	; (800f570 <std+0x44>)
 800f55c:	6224      	str	r4, [r4, #32]
 800f55e:	6323      	str	r3, [r4, #48]	; 0x30
 800f560:	bd10      	pop	{r4, pc}
 800f562:	bf00      	nop
 800f564:	08010391 	.word	0x08010391
 800f568:	080103b3 	.word	0x080103b3
 800f56c:	080103eb 	.word	0x080103eb
 800f570:	0801040f 	.word	0x0801040f

0800f574 <_cleanup_r>:
 800f574:	4901      	ldr	r1, [pc, #4]	; (800f57c <_cleanup_r+0x8>)
 800f576:	f000 b8af 	b.w	800f6d8 <_fwalk_reent>
 800f57a:	bf00      	nop
 800f57c:	08010725 	.word	0x08010725

0800f580 <__sfmoreglue>:
 800f580:	b570      	push	{r4, r5, r6, lr}
 800f582:	2268      	movs	r2, #104	; 0x68
 800f584:	1e4d      	subs	r5, r1, #1
 800f586:	4355      	muls	r5, r2
 800f588:	460e      	mov	r6, r1
 800f58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f58e:	f000 fcd9 	bl	800ff44 <_malloc_r>
 800f592:	4604      	mov	r4, r0
 800f594:	b140      	cbz	r0, 800f5a8 <__sfmoreglue+0x28>
 800f596:	2100      	movs	r1, #0
 800f598:	e9c0 1600 	strd	r1, r6, [r0]
 800f59c:	300c      	adds	r0, #12
 800f59e:	60a0      	str	r0, [r4, #8]
 800f5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5a4:	f7fe fca8 	bl	800def8 <memset>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}

0800f5ac <__sfp_lock_acquire>:
 800f5ac:	4801      	ldr	r0, [pc, #4]	; (800f5b4 <__sfp_lock_acquire+0x8>)
 800f5ae:	f000 b8b8 	b.w	800f722 <__retarget_lock_acquire_recursive>
 800f5b2:	bf00      	nop
 800f5b4:	200046b9 	.word	0x200046b9

0800f5b8 <__sfp_lock_release>:
 800f5b8:	4801      	ldr	r0, [pc, #4]	; (800f5c0 <__sfp_lock_release+0x8>)
 800f5ba:	f000 b8b3 	b.w	800f724 <__retarget_lock_release_recursive>
 800f5be:	bf00      	nop
 800f5c0:	200046b9 	.word	0x200046b9

0800f5c4 <__sinit_lock_acquire>:
 800f5c4:	4801      	ldr	r0, [pc, #4]	; (800f5cc <__sinit_lock_acquire+0x8>)
 800f5c6:	f000 b8ac 	b.w	800f722 <__retarget_lock_acquire_recursive>
 800f5ca:	bf00      	nop
 800f5cc:	200046ba 	.word	0x200046ba

0800f5d0 <__sinit_lock_release>:
 800f5d0:	4801      	ldr	r0, [pc, #4]	; (800f5d8 <__sinit_lock_release+0x8>)
 800f5d2:	f000 b8a7 	b.w	800f724 <__retarget_lock_release_recursive>
 800f5d6:	bf00      	nop
 800f5d8:	200046ba 	.word	0x200046ba

0800f5dc <__sinit>:
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	4604      	mov	r4, r0
 800f5e0:	f7ff fff0 	bl	800f5c4 <__sinit_lock_acquire>
 800f5e4:	69a3      	ldr	r3, [r4, #24]
 800f5e6:	b11b      	cbz	r3, 800f5f0 <__sinit+0x14>
 800f5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ec:	f7ff bff0 	b.w	800f5d0 <__sinit_lock_release>
 800f5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800f5f6:	4b13      	ldr	r3, [pc, #76]	; (800f644 <__sinit+0x68>)
 800f5f8:	4a13      	ldr	r2, [pc, #76]	; (800f648 <__sinit+0x6c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f5fe:	42a3      	cmp	r3, r4
 800f600:	bf04      	itt	eq
 800f602:	2301      	moveq	r3, #1
 800f604:	61a3      	streq	r3, [r4, #24]
 800f606:	4620      	mov	r0, r4
 800f608:	f000 f820 	bl	800f64c <__sfp>
 800f60c:	6060      	str	r0, [r4, #4]
 800f60e:	4620      	mov	r0, r4
 800f610:	f000 f81c 	bl	800f64c <__sfp>
 800f614:	60a0      	str	r0, [r4, #8]
 800f616:	4620      	mov	r0, r4
 800f618:	f000 f818 	bl	800f64c <__sfp>
 800f61c:	2200      	movs	r2, #0
 800f61e:	60e0      	str	r0, [r4, #12]
 800f620:	2104      	movs	r1, #4
 800f622:	6860      	ldr	r0, [r4, #4]
 800f624:	f7ff ff82 	bl	800f52c <std>
 800f628:	68a0      	ldr	r0, [r4, #8]
 800f62a:	2201      	movs	r2, #1
 800f62c:	2109      	movs	r1, #9
 800f62e:	f7ff ff7d 	bl	800f52c <std>
 800f632:	68e0      	ldr	r0, [r4, #12]
 800f634:	2202      	movs	r2, #2
 800f636:	2112      	movs	r1, #18
 800f638:	f7ff ff78 	bl	800f52c <std>
 800f63c:	2301      	movs	r3, #1
 800f63e:	61a3      	str	r3, [r4, #24]
 800f640:	e7d2      	b.n	800f5e8 <__sinit+0xc>
 800f642:	bf00      	nop
 800f644:	08010b0c 	.word	0x08010b0c
 800f648:	0800f575 	.word	0x0800f575

0800f64c <__sfp>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	4607      	mov	r7, r0
 800f650:	f7ff ffac 	bl	800f5ac <__sfp_lock_acquire>
 800f654:	4b1e      	ldr	r3, [pc, #120]	; (800f6d0 <__sfp+0x84>)
 800f656:	681e      	ldr	r6, [r3, #0]
 800f658:	69b3      	ldr	r3, [r6, #24]
 800f65a:	b913      	cbnz	r3, 800f662 <__sfp+0x16>
 800f65c:	4630      	mov	r0, r6
 800f65e:	f7ff ffbd 	bl	800f5dc <__sinit>
 800f662:	3648      	adds	r6, #72	; 0x48
 800f664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f668:	3b01      	subs	r3, #1
 800f66a:	d503      	bpl.n	800f674 <__sfp+0x28>
 800f66c:	6833      	ldr	r3, [r6, #0]
 800f66e:	b30b      	cbz	r3, 800f6b4 <__sfp+0x68>
 800f670:	6836      	ldr	r6, [r6, #0]
 800f672:	e7f7      	b.n	800f664 <__sfp+0x18>
 800f674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f678:	b9d5      	cbnz	r5, 800f6b0 <__sfp+0x64>
 800f67a:	4b16      	ldr	r3, [pc, #88]	; (800f6d4 <__sfp+0x88>)
 800f67c:	60e3      	str	r3, [r4, #12]
 800f67e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f682:	6665      	str	r5, [r4, #100]	; 0x64
 800f684:	f000 f84c 	bl	800f720 <__retarget_lock_init_recursive>
 800f688:	f7ff ff96 	bl	800f5b8 <__sfp_lock_release>
 800f68c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f690:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f694:	6025      	str	r5, [r4, #0]
 800f696:	61a5      	str	r5, [r4, #24]
 800f698:	2208      	movs	r2, #8
 800f69a:	4629      	mov	r1, r5
 800f69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6a0:	f7fe fc2a 	bl	800def8 <memset>
 800f6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b0:	3468      	adds	r4, #104	; 0x68
 800f6b2:	e7d9      	b.n	800f668 <__sfp+0x1c>
 800f6b4:	2104      	movs	r1, #4
 800f6b6:	4638      	mov	r0, r7
 800f6b8:	f7ff ff62 	bl	800f580 <__sfmoreglue>
 800f6bc:	4604      	mov	r4, r0
 800f6be:	6030      	str	r0, [r6, #0]
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d1d5      	bne.n	800f670 <__sfp+0x24>
 800f6c4:	f7ff ff78 	bl	800f5b8 <__sfp_lock_release>
 800f6c8:	230c      	movs	r3, #12
 800f6ca:	603b      	str	r3, [r7, #0]
 800f6cc:	e7ee      	b.n	800f6ac <__sfp+0x60>
 800f6ce:	bf00      	nop
 800f6d0:	08010b0c 	.word	0x08010b0c
 800f6d4:	ffff0001 	.word	0xffff0001

0800f6d8 <_fwalk_reent>:
 800f6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6dc:	4606      	mov	r6, r0
 800f6de:	4688      	mov	r8, r1
 800f6e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6e4:	2700      	movs	r7, #0
 800f6e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6ea:	f1b9 0901 	subs.w	r9, r9, #1
 800f6ee:	d505      	bpl.n	800f6fc <_fwalk_reent+0x24>
 800f6f0:	6824      	ldr	r4, [r4, #0]
 800f6f2:	2c00      	cmp	r4, #0
 800f6f4:	d1f7      	bne.n	800f6e6 <_fwalk_reent+0xe>
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6fc:	89ab      	ldrh	r3, [r5, #12]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d907      	bls.n	800f712 <_fwalk_reent+0x3a>
 800f702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f706:	3301      	adds	r3, #1
 800f708:	d003      	beq.n	800f712 <_fwalk_reent+0x3a>
 800f70a:	4629      	mov	r1, r5
 800f70c:	4630      	mov	r0, r6
 800f70e:	47c0      	blx	r8
 800f710:	4307      	orrs	r7, r0
 800f712:	3568      	adds	r5, #104	; 0x68
 800f714:	e7e9      	b.n	800f6ea <_fwalk_reent+0x12>
	...

0800f718 <_localeconv_r>:
 800f718:	4800      	ldr	r0, [pc, #0]	; (800f71c <_localeconv_r+0x4>)
 800f71a:	4770      	bx	lr
 800f71c:	200029ac 	.word	0x200029ac

0800f720 <__retarget_lock_init_recursive>:
 800f720:	4770      	bx	lr

0800f722 <__retarget_lock_acquire_recursive>:
 800f722:	4770      	bx	lr

0800f724 <__retarget_lock_release_recursive>:
 800f724:	4770      	bx	lr
	...

0800f728 <malloc>:
 800f728:	4b02      	ldr	r3, [pc, #8]	; (800f734 <malloc+0xc>)
 800f72a:	4601      	mov	r1, r0
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	f000 bc09 	b.w	800ff44 <_malloc_r>
 800f732:	bf00      	nop
 800f734:	20002858 	.word	0x20002858

0800f738 <_Balloc>:
 800f738:	b570      	push	{r4, r5, r6, lr}
 800f73a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f73c:	4604      	mov	r4, r0
 800f73e:	460d      	mov	r5, r1
 800f740:	b976      	cbnz	r6, 800f760 <_Balloc+0x28>
 800f742:	2010      	movs	r0, #16
 800f744:	f7ff fff0 	bl	800f728 <malloc>
 800f748:	4602      	mov	r2, r0
 800f74a:	6260      	str	r0, [r4, #36]	; 0x24
 800f74c:	b920      	cbnz	r0, 800f758 <_Balloc+0x20>
 800f74e:	4b18      	ldr	r3, [pc, #96]	; (800f7b0 <_Balloc+0x78>)
 800f750:	4818      	ldr	r0, [pc, #96]	; (800f7b4 <_Balloc+0x7c>)
 800f752:	2166      	movs	r1, #102	; 0x66
 800f754:	f000 ff32 	bl	80105bc <__assert_func>
 800f758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f75c:	6006      	str	r6, [r0, #0]
 800f75e:	60c6      	str	r6, [r0, #12]
 800f760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f762:	68f3      	ldr	r3, [r6, #12]
 800f764:	b183      	cbz	r3, 800f788 <_Balloc+0x50>
 800f766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f76e:	b9b8      	cbnz	r0, 800f7a0 <_Balloc+0x68>
 800f770:	2101      	movs	r1, #1
 800f772:	fa01 f605 	lsl.w	r6, r1, r5
 800f776:	1d72      	adds	r2, r6, #5
 800f778:	0092      	lsls	r2, r2, #2
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 fb60 	bl	800fe40 <_calloc_r>
 800f780:	b160      	cbz	r0, 800f79c <_Balloc+0x64>
 800f782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f786:	e00e      	b.n	800f7a6 <_Balloc+0x6e>
 800f788:	2221      	movs	r2, #33	; 0x21
 800f78a:	2104      	movs	r1, #4
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 fb57 	bl	800fe40 <_calloc_r>
 800f792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f794:	60f0      	str	r0, [r6, #12]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1e4      	bne.n	800f766 <_Balloc+0x2e>
 800f79c:	2000      	movs	r0, #0
 800f79e:	bd70      	pop	{r4, r5, r6, pc}
 800f7a0:	6802      	ldr	r2, [r0, #0]
 800f7a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7ac:	e7f7      	b.n	800f79e <_Balloc+0x66>
 800f7ae:	bf00      	nop
 800f7b0:	08010b51 	.word	0x08010b51
 800f7b4:	08010c34 	.word	0x08010c34

0800f7b8 <_Bfree>:
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7bc:	4605      	mov	r5, r0
 800f7be:	460c      	mov	r4, r1
 800f7c0:	b976      	cbnz	r6, 800f7e0 <_Bfree+0x28>
 800f7c2:	2010      	movs	r0, #16
 800f7c4:	f7ff ffb0 	bl	800f728 <malloc>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	6268      	str	r0, [r5, #36]	; 0x24
 800f7cc:	b920      	cbnz	r0, 800f7d8 <_Bfree+0x20>
 800f7ce:	4b09      	ldr	r3, [pc, #36]	; (800f7f4 <_Bfree+0x3c>)
 800f7d0:	4809      	ldr	r0, [pc, #36]	; (800f7f8 <_Bfree+0x40>)
 800f7d2:	218a      	movs	r1, #138	; 0x8a
 800f7d4:	f000 fef2 	bl	80105bc <__assert_func>
 800f7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7dc:	6006      	str	r6, [r0, #0]
 800f7de:	60c6      	str	r6, [r0, #12]
 800f7e0:	b13c      	cbz	r4, 800f7f2 <_Bfree+0x3a>
 800f7e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7e4:	6862      	ldr	r2, [r4, #4]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7ec:	6021      	str	r1, [r4, #0]
 800f7ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	08010b51 	.word	0x08010b51
 800f7f8:	08010c34 	.word	0x08010c34

0800f7fc <__multadd>:
 800f7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f800:	690d      	ldr	r5, [r1, #16]
 800f802:	4607      	mov	r7, r0
 800f804:	460c      	mov	r4, r1
 800f806:	461e      	mov	r6, r3
 800f808:	f101 0c14 	add.w	ip, r1, #20
 800f80c:	2000      	movs	r0, #0
 800f80e:	f8dc 3000 	ldr.w	r3, [ip]
 800f812:	b299      	uxth	r1, r3
 800f814:	fb02 6101 	mla	r1, r2, r1, r6
 800f818:	0c1e      	lsrs	r6, r3, #16
 800f81a:	0c0b      	lsrs	r3, r1, #16
 800f81c:	fb02 3306 	mla	r3, r2, r6, r3
 800f820:	b289      	uxth	r1, r1
 800f822:	3001      	adds	r0, #1
 800f824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f828:	4285      	cmp	r5, r0
 800f82a:	f84c 1b04 	str.w	r1, [ip], #4
 800f82e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f832:	dcec      	bgt.n	800f80e <__multadd+0x12>
 800f834:	b30e      	cbz	r6, 800f87a <__multadd+0x7e>
 800f836:	68a3      	ldr	r3, [r4, #8]
 800f838:	42ab      	cmp	r3, r5
 800f83a:	dc19      	bgt.n	800f870 <__multadd+0x74>
 800f83c:	6861      	ldr	r1, [r4, #4]
 800f83e:	4638      	mov	r0, r7
 800f840:	3101      	adds	r1, #1
 800f842:	f7ff ff79 	bl	800f738 <_Balloc>
 800f846:	4680      	mov	r8, r0
 800f848:	b928      	cbnz	r0, 800f856 <__multadd+0x5a>
 800f84a:	4602      	mov	r2, r0
 800f84c:	4b0c      	ldr	r3, [pc, #48]	; (800f880 <__multadd+0x84>)
 800f84e:	480d      	ldr	r0, [pc, #52]	; (800f884 <__multadd+0x88>)
 800f850:	21b5      	movs	r1, #181	; 0xb5
 800f852:	f000 feb3 	bl	80105bc <__assert_func>
 800f856:	6922      	ldr	r2, [r4, #16]
 800f858:	3202      	adds	r2, #2
 800f85a:	f104 010c 	add.w	r1, r4, #12
 800f85e:	0092      	lsls	r2, r2, #2
 800f860:	300c      	adds	r0, #12
 800f862:	f7fe fb3b 	bl	800dedc <memcpy>
 800f866:	4621      	mov	r1, r4
 800f868:	4638      	mov	r0, r7
 800f86a:	f7ff ffa5 	bl	800f7b8 <_Bfree>
 800f86e:	4644      	mov	r4, r8
 800f870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f874:	3501      	adds	r5, #1
 800f876:	615e      	str	r6, [r3, #20]
 800f878:	6125      	str	r5, [r4, #16]
 800f87a:	4620      	mov	r0, r4
 800f87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f880:	08010bc3 	.word	0x08010bc3
 800f884:	08010c34 	.word	0x08010c34

0800f888 <__hi0bits>:
 800f888:	0c03      	lsrs	r3, r0, #16
 800f88a:	041b      	lsls	r3, r3, #16
 800f88c:	b9d3      	cbnz	r3, 800f8c4 <__hi0bits+0x3c>
 800f88e:	0400      	lsls	r0, r0, #16
 800f890:	2310      	movs	r3, #16
 800f892:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f896:	bf04      	itt	eq
 800f898:	0200      	lsleq	r0, r0, #8
 800f89a:	3308      	addeq	r3, #8
 800f89c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f8a0:	bf04      	itt	eq
 800f8a2:	0100      	lsleq	r0, r0, #4
 800f8a4:	3304      	addeq	r3, #4
 800f8a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f8aa:	bf04      	itt	eq
 800f8ac:	0080      	lsleq	r0, r0, #2
 800f8ae:	3302      	addeq	r3, #2
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	db05      	blt.n	800f8c0 <__hi0bits+0x38>
 800f8b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f8b8:	f103 0301 	add.w	r3, r3, #1
 800f8bc:	bf08      	it	eq
 800f8be:	2320      	moveq	r3, #32
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	4770      	bx	lr
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	e7e4      	b.n	800f892 <__hi0bits+0xa>

0800f8c8 <__lo0bits>:
 800f8c8:	6803      	ldr	r3, [r0, #0]
 800f8ca:	f013 0207 	ands.w	r2, r3, #7
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	d00b      	beq.n	800f8ea <__lo0bits+0x22>
 800f8d2:	07da      	lsls	r2, r3, #31
 800f8d4:	d423      	bmi.n	800f91e <__lo0bits+0x56>
 800f8d6:	0798      	lsls	r0, r3, #30
 800f8d8:	bf49      	itett	mi
 800f8da:	085b      	lsrmi	r3, r3, #1
 800f8dc:	089b      	lsrpl	r3, r3, #2
 800f8de:	2001      	movmi	r0, #1
 800f8e0:	600b      	strmi	r3, [r1, #0]
 800f8e2:	bf5c      	itt	pl
 800f8e4:	600b      	strpl	r3, [r1, #0]
 800f8e6:	2002      	movpl	r0, #2
 800f8e8:	4770      	bx	lr
 800f8ea:	b298      	uxth	r0, r3
 800f8ec:	b9a8      	cbnz	r0, 800f91a <__lo0bits+0x52>
 800f8ee:	0c1b      	lsrs	r3, r3, #16
 800f8f0:	2010      	movs	r0, #16
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	b90a      	cbnz	r2, 800f8fa <__lo0bits+0x32>
 800f8f6:	3008      	adds	r0, #8
 800f8f8:	0a1b      	lsrs	r3, r3, #8
 800f8fa:	071a      	lsls	r2, r3, #28
 800f8fc:	bf04      	itt	eq
 800f8fe:	091b      	lsreq	r3, r3, #4
 800f900:	3004      	addeq	r0, #4
 800f902:	079a      	lsls	r2, r3, #30
 800f904:	bf04      	itt	eq
 800f906:	089b      	lsreq	r3, r3, #2
 800f908:	3002      	addeq	r0, #2
 800f90a:	07da      	lsls	r2, r3, #31
 800f90c:	d403      	bmi.n	800f916 <__lo0bits+0x4e>
 800f90e:	085b      	lsrs	r3, r3, #1
 800f910:	f100 0001 	add.w	r0, r0, #1
 800f914:	d005      	beq.n	800f922 <__lo0bits+0x5a>
 800f916:	600b      	str	r3, [r1, #0]
 800f918:	4770      	bx	lr
 800f91a:	4610      	mov	r0, r2
 800f91c:	e7e9      	b.n	800f8f2 <__lo0bits+0x2a>
 800f91e:	2000      	movs	r0, #0
 800f920:	4770      	bx	lr
 800f922:	2020      	movs	r0, #32
 800f924:	4770      	bx	lr
	...

0800f928 <__i2b>:
 800f928:	b510      	push	{r4, lr}
 800f92a:	460c      	mov	r4, r1
 800f92c:	2101      	movs	r1, #1
 800f92e:	f7ff ff03 	bl	800f738 <_Balloc>
 800f932:	4602      	mov	r2, r0
 800f934:	b928      	cbnz	r0, 800f942 <__i2b+0x1a>
 800f936:	4b05      	ldr	r3, [pc, #20]	; (800f94c <__i2b+0x24>)
 800f938:	4805      	ldr	r0, [pc, #20]	; (800f950 <__i2b+0x28>)
 800f93a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f93e:	f000 fe3d 	bl	80105bc <__assert_func>
 800f942:	2301      	movs	r3, #1
 800f944:	6144      	str	r4, [r0, #20]
 800f946:	6103      	str	r3, [r0, #16]
 800f948:	bd10      	pop	{r4, pc}
 800f94a:	bf00      	nop
 800f94c:	08010bc3 	.word	0x08010bc3
 800f950:	08010c34 	.word	0x08010c34

0800f954 <__multiply>:
 800f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f958:	4691      	mov	r9, r2
 800f95a:	690a      	ldr	r2, [r1, #16]
 800f95c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f960:	429a      	cmp	r2, r3
 800f962:	bfb8      	it	lt
 800f964:	460b      	movlt	r3, r1
 800f966:	460c      	mov	r4, r1
 800f968:	bfbc      	itt	lt
 800f96a:	464c      	movlt	r4, r9
 800f96c:	4699      	movlt	r9, r3
 800f96e:	6927      	ldr	r7, [r4, #16]
 800f970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	6861      	ldr	r1, [r4, #4]
 800f978:	eb07 060a 	add.w	r6, r7, sl
 800f97c:	42b3      	cmp	r3, r6
 800f97e:	b085      	sub	sp, #20
 800f980:	bfb8      	it	lt
 800f982:	3101      	addlt	r1, #1
 800f984:	f7ff fed8 	bl	800f738 <_Balloc>
 800f988:	b930      	cbnz	r0, 800f998 <__multiply+0x44>
 800f98a:	4602      	mov	r2, r0
 800f98c:	4b44      	ldr	r3, [pc, #272]	; (800faa0 <__multiply+0x14c>)
 800f98e:	4845      	ldr	r0, [pc, #276]	; (800faa4 <__multiply+0x150>)
 800f990:	f240 115d 	movw	r1, #349	; 0x15d
 800f994:	f000 fe12 	bl	80105bc <__assert_func>
 800f998:	f100 0514 	add.w	r5, r0, #20
 800f99c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f9a0:	462b      	mov	r3, r5
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	4543      	cmp	r3, r8
 800f9a6:	d321      	bcc.n	800f9ec <__multiply+0x98>
 800f9a8:	f104 0314 	add.w	r3, r4, #20
 800f9ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f9b0:	f109 0314 	add.w	r3, r9, #20
 800f9b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f9b8:	9202      	str	r2, [sp, #8]
 800f9ba:	1b3a      	subs	r2, r7, r4
 800f9bc:	3a15      	subs	r2, #21
 800f9be:	f022 0203 	bic.w	r2, r2, #3
 800f9c2:	3204      	adds	r2, #4
 800f9c4:	f104 0115 	add.w	r1, r4, #21
 800f9c8:	428f      	cmp	r7, r1
 800f9ca:	bf38      	it	cc
 800f9cc:	2204      	movcc	r2, #4
 800f9ce:	9201      	str	r2, [sp, #4]
 800f9d0:	9a02      	ldr	r2, [sp, #8]
 800f9d2:	9303      	str	r3, [sp, #12]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d80c      	bhi.n	800f9f2 <__multiply+0x9e>
 800f9d8:	2e00      	cmp	r6, #0
 800f9da:	dd03      	ble.n	800f9e4 <__multiply+0x90>
 800f9dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d05a      	beq.n	800fa9a <__multiply+0x146>
 800f9e4:	6106      	str	r6, [r0, #16]
 800f9e6:	b005      	add	sp, #20
 800f9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ec:	f843 2b04 	str.w	r2, [r3], #4
 800f9f0:	e7d8      	b.n	800f9a4 <__multiply+0x50>
 800f9f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f9f6:	f1ba 0f00 	cmp.w	sl, #0
 800f9fa:	d024      	beq.n	800fa46 <__multiply+0xf2>
 800f9fc:	f104 0e14 	add.w	lr, r4, #20
 800fa00:	46a9      	mov	r9, r5
 800fa02:	f04f 0c00 	mov.w	ip, #0
 800fa06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa0a:	f8d9 1000 	ldr.w	r1, [r9]
 800fa0e:	fa1f fb82 	uxth.w	fp, r2
 800fa12:	b289      	uxth	r1, r1
 800fa14:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa1c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa20:	4461      	add	r1, ip
 800fa22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa26:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa2e:	b289      	uxth	r1, r1
 800fa30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa34:	4577      	cmp	r7, lr
 800fa36:	f849 1b04 	str.w	r1, [r9], #4
 800fa3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa3e:	d8e2      	bhi.n	800fa06 <__multiply+0xb2>
 800fa40:	9a01      	ldr	r2, [sp, #4]
 800fa42:	f845 c002 	str.w	ip, [r5, r2]
 800fa46:	9a03      	ldr	r2, [sp, #12]
 800fa48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	f1b9 0f00 	cmp.w	r9, #0
 800fa52:	d020      	beq.n	800fa96 <__multiply+0x142>
 800fa54:	6829      	ldr	r1, [r5, #0]
 800fa56:	f104 0c14 	add.w	ip, r4, #20
 800fa5a:	46ae      	mov	lr, r5
 800fa5c:	f04f 0a00 	mov.w	sl, #0
 800fa60:	f8bc b000 	ldrh.w	fp, [ip]
 800fa64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa68:	fb09 220b 	mla	r2, r9, fp, r2
 800fa6c:	4492      	add	sl, r2
 800fa6e:	b289      	uxth	r1, r1
 800fa70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fa74:	f84e 1b04 	str.w	r1, [lr], #4
 800fa78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fa7c:	f8be 1000 	ldrh.w	r1, [lr]
 800fa80:	0c12      	lsrs	r2, r2, #16
 800fa82:	fb09 1102 	mla	r1, r9, r2, r1
 800fa86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fa8a:	4567      	cmp	r7, ip
 800fa8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fa90:	d8e6      	bhi.n	800fa60 <__multiply+0x10c>
 800fa92:	9a01      	ldr	r2, [sp, #4]
 800fa94:	50a9      	str	r1, [r5, r2]
 800fa96:	3504      	adds	r5, #4
 800fa98:	e79a      	b.n	800f9d0 <__multiply+0x7c>
 800fa9a:	3e01      	subs	r6, #1
 800fa9c:	e79c      	b.n	800f9d8 <__multiply+0x84>
 800fa9e:	bf00      	nop
 800faa0:	08010bc3 	.word	0x08010bc3
 800faa4:	08010c34 	.word	0x08010c34

0800faa8 <__pow5mult>:
 800faa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faac:	4615      	mov	r5, r2
 800faae:	f012 0203 	ands.w	r2, r2, #3
 800fab2:	4606      	mov	r6, r0
 800fab4:	460f      	mov	r7, r1
 800fab6:	d007      	beq.n	800fac8 <__pow5mult+0x20>
 800fab8:	4c25      	ldr	r4, [pc, #148]	; (800fb50 <__pow5mult+0xa8>)
 800faba:	3a01      	subs	r2, #1
 800fabc:	2300      	movs	r3, #0
 800fabe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fac2:	f7ff fe9b 	bl	800f7fc <__multadd>
 800fac6:	4607      	mov	r7, r0
 800fac8:	10ad      	asrs	r5, r5, #2
 800faca:	d03d      	beq.n	800fb48 <__pow5mult+0xa0>
 800facc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800face:	b97c      	cbnz	r4, 800faf0 <__pow5mult+0x48>
 800fad0:	2010      	movs	r0, #16
 800fad2:	f7ff fe29 	bl	800f728 <malloc>
 800fad6:	4602      	mov	r2, r0
 800fad8:	6270      	str	r0, [r6, #36]	; 0x24
 800fada:	b928      	cbnz	r0, 800fae8 <__pow5mult+0x40>
 800fadc:	4b1d      	ldr	r3, [pc, #116]	; (800fb54 <__pow5mult+0xac>)
 800fade:	481e      	ldr	r0, [pc, #120]	; (800fb58 <__pow5mult+0xb0>)
 800fae0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fae4:	f000 fd6a 	bl	80105bc <__assert_func>
 800fae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800faec:	6004      	str	r4, [r0, #0]
 800faee:	60c4      	str	r4, [r0, #12]
 800faf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800faf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800faf8:	b94c      	cbnz	r4, 800fb0e <__pow5mult+0x66>
 800fafa:	f240 2171 	movw	r1, #625	; 0x271
 800fafe:	4630      	mov	r0, r6
 800fb00:	f7ff ff12 	bl	800f928 <__i2b>
 800fb04:	2300      	movs	r3, #0
 800fb06:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	6003      	str	r3, [r0, #0]
 800fb0e:	f04f 0900 	mov.w	r9, #0
 800fb12:	07eb      	lsls	r3, r5, #31
 800fb14:	d50a      	bpl.n	800fb2c <__pow5mult+0x84>
 800fb16:	4639      	mov	r1, r7
 800fb18:	4622      	mov	r2, r4
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f7ff ff1a 	bl	800f954 <__multiply>
 800fb20:	4639      	mov	r1, r7
 800fb22:	4680      	mov	r8, r0
 800fb24:	4630      	mov	r0, r6
 800fb26:	f7ff fe47 	bl	800f7b8 <_Bfree>
 800fb2a:	4647      	mov	r7, r8
 800fb2c:	106d      	asrs	r5, r5, #1
 800fb2e:	d00b      	beq.n	800fb48 <__pow5mult+0xa0>
 800fb30:	6820      	ldr	r0, [r4, #0]
 800fb32:	b938      	cbnz	r0, 800fb44 <__pow5mult+0x9c>
 800fb34:	4622      	mov	r2, r4
 800fb36:	4621      	mov	r1, r4
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f7ff ff0b 	bl	800f954 <__multiply>
 800fb3e:	6020      	str	r0, [r4, #0]
 800fb40:	f8c0 9000 	str.w	r9, [r0]
 800fb44:	4604      	mov	r4, r0
 800fb46:	e7e4      	b.n	800fb12 <__pow5mult+0x6a>
 800fb48:	4638      	mov	r0, r7
 800fb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb4e:	bf00      	nop
 800fb50:	08010d80 	.word	0x08010d80
 800fb54:	08010b51 	.word	0x08010b51
 800fb58:	08010c34 	.word	0x08010c34

0800fb5c <__lshift>:
 800fb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb60:	460c      	mov	r4, r1
 800fb62:	6849      	ldr	r1, [r1, #4]
 800fb64:	6923      	ldr	r3, [r4, #16]
 800fb66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb6a:	68a3      	ldr	r3, [r4, #8]
 800fb6c:	4607      	mov	r7, r0
 800fb6e:	4691      	mov	r9, r2
 800fb70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb74:	f108 0601 	add.w	r6, r8, #1
 800fb78:	42b3      	cmp	r3, r6
 800fb7a:	db0b      	blt.n	800fb94 <__lshift+0x38>
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	f7ff fddb 	bl	800f738 <_Balloc>
 800fb82:	4605      	mov	r5, r0
 800fb84:	b948      	cbnz	r0, 800fb9a <__lshift+0x3e>
 800fb86:	4602      	mov	r2, r0
 800fb88:	4b2a      	ldr	r3, [pc, #168]	; (800fc34 <__lshift+0xd8>)
 800fb8a:	482b      	ldr	r0, [pc, #172]	; (800fc38 <__lshift+0xdc>)
 800fb8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb90:	f000 fd14 	bl	80105bc <__assert_func>
 800fb94:	3101      	adds	r1, #1
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	e7ee      	b.n	800fb78 <__lshift+0x1c>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	f100 0114 	add.w	r1, r0, #20
 800fba0:	f100 0210 	add.w	r2, r0, #16
 800fba4:	4618      	mov	r0, r3
 800fba6:	4553      	cmp	r3, sl
 800fba8:	db37      	blt.n	800fc1a <__lshift+0xbe>
 800fbaa:	6920      	ldr	r0, [r4, #16]
 800fbac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbb0:	f104 0314 	add.w	r3, r4, #20
 800fbb4:	f019 091f 	ands.w	r9, r9, #31
 800fbb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fbc0:	d02f      	beq.n	800fc22 <__lshift+0xc6>
 800fbc2:	f1c9 0e20 	rsb	lr, r9, #32
 800fbc6:	468a      	mov	sl, r1
 800fbc8:	f04f 0c00 	mov.w	ip, #0
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	fa02 f209 	lsl.w	r2, r2, r9
 800fbd2:	ea42 020c 	orr.w	r2, r2, ip
 800fbd6:	f84a 2b04 	str.w	r2, [sl], #4
 800fbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbde:	4298      	cmp	r0, r3
 800fbe0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fbe4:	d8f2      	bhi.n	800fbcc <__lshift+0x70>
 800fbe6:	1b03      	subs	r3, r0, r4
 800fbe8:	3b15      	subs	r3, #21
 800fbea:	f023 0303 	bic.w	r3, r3, #3
 800fbee:	3304      	adds	r3, #4
 800fbf0:	f104 0215 	add.w	r2, r4, #21
 800fbf4:	4290      	cmp	r0, r2
 800fbf6:	bf38      	it	cc
 800fbf8:	2304      	movcc	r3, #4
 800fbfa:	f841 c003 	str.w	ip, [r1, r3]
 800fbfe:	f1bc 0f00 	cmp.w	ip, #0
 800fc02:	d001      	beq.n	800fc08 <__lshift+0xac>
 800fc04:	f108 0602 	add.w	r6, r8, #2
 800fc08:	3e01      	subs	r6, #1
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	612e      	str	r6, [r5, #16]
 800fc0e:	4621      	mov	r1, r4
 800fc10:	f7ff fdd2 	bl	800f7b8 <_Bfree>
 800fc14:	4628      	mov	r0, r5
 800fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc1e:	3301      	adds	r3, #1
 800fc20:	e7c1      	b.n	800fba6 <__lshift+0x4a>
 800fc22:	3904      	subs	r1, #4
 800fc24:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc28:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc2c:	4298      	cmp	r0, r3
 800fc2e:	d8f9      	bhi.n	800fc24 <__lshift+0xc8>
 800fc30:	e7ea      	b.n	800fc08 <__lshift+0xac>
 800fc32:	bf00      	nop
 800fc34:	08010bc3 	.word	0x08010bc3
 800fc38:	08010c34 	.word	0x08010c34

0800fc3c <__mcmp>:
 800fc3c:	b530      	push	{r4, r5, lr}
 800fc3e:	6902      	ldr	r2, [r0, #16]
 800fc40:	690c      	ldr	r4, [r1, #16]
 800fc42:	1b12      	subs	r2, r2, r4
 800fc44:	d10e      	bne.n	800fc64 <__mcmp+0x28>
 800fc46:	f100 0314 	add.w	r3, r0, #20
 800fc4a:	3114      	adds	r1, #20
 800fc4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc5c:	42a5      	cmp	r5, r4
 800fc5e:	d003      	beq.n	800fc68 <__mcmp+0x2c>
 800fc60:	d305      	bcc.n	800fc6e <__mcmp+0x32>
 800fc62:	2201      	movs	r2, #1
 800fc64:	4610      	mov	r0, r2
 800fc66:	bd30      	pop	{r4, r5, pc}
 800fc68:	4283      	cmp	r3, r0
 800fc6a:	d3f3      	bcc.n	800fc54 <__mcmp+0x18>
 800fc6c:	e7fa      	b.n	800fc64 <__mcmp+0x28>
 800fc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc72:	e7f7      	b.n	800fc64 <__mcmp+0x28>

0800fc74 <__mdiff>:
 800fc74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	460c      	mov	r4, r1
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	4620      	mov	r0, r4
 800fc80:	4690      	mov	r8, r2
 800fc82:	f7ff ffdb 	bl	800fc3c <__mcmp>
 800fc86:	1e05      	subs	r5, r0, #0
 800fc88:	d110      	bne.n	800fcac <__mdiff+0x38>
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	f7ff fd53 	bl	800f738 <_Balloc>
 800fc92:	b930      	cbnz	r0, 800fca2 <__mdiff+0x2e>
 800fc94:	4b3a      	ldr	r3, [pc, #232]	; (800fd80 <__mdiff+0x10c>)
 800fc96:	4602      	mov	r2, r0
 800fc98:	f240 2132 	movw	r1, #562	; 0x232
 800fc9c:	4839      	ldr	r0, [pc, #228]	; (800fd84 <__mdiff+0x110>)
 800fc9e:	f000 fc8d 	bl	80105bc <__assert_func>
 800fca2:	2301      	movs	r3, #1
 800fca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcac:	bfa4      	itt	ge
 800fcae:	4643      	movge	r3, r8
 800fcb0:	46a0      	movge	r8, r4
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fcb8:	bfa6      	itte	ge
 800fcba:	461c      	movge	r4, r3
 800fcbc:	2500      	movge	r5, #0
 800fcbe:	2501      	movlt	r5, #1
 800fcc0:	f7ff fd3a 	bl	800f738 <_Balloc>
 800fcc4:	b920      	cbnz	r0, 800fcd0 <__mdiff+0x5c>
 800fcc6:	4b2e      	ldr	r3, [pc, #184]	; (800fd80 <__mdiff+0x10c>)
 800fcc8:	4602      	mov	r2, r0
 800fcca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fcce:	e7e5      	b.n	800fc9c <__mdiff+0x28>
 800fcd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fcd4:	6926      	ldr	r6, [r4, #16]
 800fcd6:	60c5      	str	r5, [r0, #12]
 800fcd8:	f104 0914 	add.w	r9, r4, #20
 800fcdc:	f108 0514 	add.w	r5, r8, #20
 800fce0:	f100 0e14 	add.w	lr, r0, #20
 800fce4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fce8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fcec:	f108 0210 	add.w	r2, r8, #16
 800fcf0:	46f2      	mov	sl, lr
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fcf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fcfc:	fa1f f883 	uxth.w	r8, r3
 800fd00:	fa11 f18b 	uxtah	r1, r1, fp
 800fd04:	0c1b      	lsrs	r3, r3, #16
 800fd06:	eba1 0808 	sub.w	r8, r1, r8
 800fd0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd12:	fa1f f888 	uxth.w	r8, r8
 800fd16:	1419      	asrs	r1, r3, #16
 800fd18:	454e      	cmp	r6, r9
 800fd1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd1e:	f84a 3b04 	str.w	r3, [sl], #4
 800fd22:	d8e7      	bhi.n	800fcf4 <__mdiff+0x80>
 800fd24:	1b33      	subs	r3, r6, r4
 800fd26:	3b15      	subs	r3, #21
 800fd28:	f023 0303 	bic.w	r3, r3, #3
 800fd2c:	3304      	adds	r3, #4
 800fd2e:	3415      	adds	r4, #21
 800fd30:	42a6      	cmp	r6, r4
 800fd32:	bf38      	it	cc
 800fd34:	2304      	movcc	r3, #4
 800fd36:	441d      	add	r5, r3
 800fd38:	4473      	add	r3, lr
 800fd3a:	469e      	mov	lr, r3
 800fd3c:	462e      	mov	r6, r5
 800fd3e:	4566      	cmp	r6, ip
 800fd40:	d30e      	bcc.n	800fd60 <__mdiff+0xec>
 800fd42:	f10c 0203 	add.w	r2, ip, #3
 800fd46:	1b52      	subs	r2, r2, r5
 800fd48:	f022 0203 	bic.w	r2, r2, #3
 800fd4c:	3d03      	subs	r5, #3
 800fd4e:	45ac      	cmp	ip, r5
 800fd50:	bf38      	it	cc
 800fd52:	2200      	movcc	r2, #0
 800fd54:	441a      	add	r2, r3
 800fd56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd5a:	b17b      	cbz	r3, 800fd7c <__mdiff+0x108>
 800fd5c:	6107      	str	r7, [r0, #16]
 800fd5e:	e7a3      	b.n	800fca8 <__mdiff+0x34>
 800fd60:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd64:	fa11 f288 	uxtah	r2, r1, r8
 800fd68:	1414      	asrs	r4, r2, #16
 800fd6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fd6e:	b292      	uxth	r2, r2
 800fd70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fd74:	f84e 2b04 	str.w	r2, [lr], #4
 800fd78:	1421      	asrs	r1, r4, #16
 800fd7a:	e7e0      	b.n	800fd3e <__mdiff+0xca>
 800fd7c:	3f01      	subs	r7, #1
 800fd7e:	e7ea      	b.n	800fd56 <__mdiff+0xe2>
 800fd80:	08010bc3 	.word	0x08010bc3
 800fd84:	08010c34 	.word	0x08010c34

0800fd88 <__d2b>:
 800fd88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd8c:	4689      	mov	r9, r1
 800fd8e:	2101      	movs	r1, #1
 800fd90:	ec57 6b10 	vmov	r6, r7, d0
 800fd94:	4690      	mov	r8, r2
 800fd96:	f7ff fccf 	bl	800f738 <_Balloc>
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	b930      	cbnz	r0, 800fdac <__d2b+0x24>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	4b25      	ldr	r3, [pc, #148]	; (800fe38 <__d2b+0xb0>)
 800fda2:	4826      	ldr	r0, [pc, #152]	; (800fe3c <__d2b+0xb4>)
 800fda4:	f240 310a 	movw	r1, #778	; 0x30a
 800fda8:	f000 fc08 	bl	80105bc <__assert_func>
 800fdac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fdb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fdb4:	bb35      	cbnz	r5, 800fe04 <__d2b+0x7c>
 800fdb6:	2e00      	cmp	r6, #0
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	d028      	beq.n	800fe0e <__d2b+0x86>
 800fdbc:	4668      	mov	r0, sp
 800fdbe:	9600      	str	r6, [sp, #0]
 800fdc0:	f7ff fd82 	bl	800f8c8 <__lo0bits>
 800fdc4:	9900      	ldr	r1, [sp, #0]
 800fdc6:	b300      	cbz	r0, 800fe0a <__d2b+0x82>
 800fdc8:	9a01      	ldr	r2, [sp, #4]
 800fdca:	f1c0 0320 	rsb	r3, r0, #32
 800fdce:	fa02 f303 	lsl.w	r3, r2, r3
 800fdd2:	430b      	orrs	r3, r1
 800fdd4:	40c2      	lsrs	r2, r0
 800fdd6:	6163      	str	r3, [r4, #20]
 800fdd8:	9201      	str	r2, [sp, #4]
 800fdda:	9b01      	ldr	r3, [sp, #4]
 800fddc:	61a3      	str	r3, [r4, #24]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	bf14      	ite	ne
 800fde2:	2202      	movne	r2, #2
 800fde4:	2201      	moveq	r2, #1
 800fde6:	6122      	str	r2, [r4, #16]
 800fde8:	b1d5      	cbz	r5, 800fe20 <__d2b+0x98>
 800fdea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fdee:	4405      	add	r5, r0
 800fdf0:	f8c9 5000 	str.w	r5, [r9]
 800fdf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fdf8:	f8c8 0000 	str.w	r0, [r8]
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	b003      	add	sp, #12
 800fe00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe08:	e7d5      	b.n	800fdb6 <__d2b+0x2e>
 800fe0a:	6161      	str	r1, [r4, #20]
 800fe0c:	e7e5      	b.n	800fdda <__d2b+0x52>
 800fe0e:	a801      	add	r0, sp, #4
 800fe10:	f7ff fd5a 	bl	800f8c8 <__lo0bits>
 800fe14:	9b01      	ldr	r3, [sp, #4]
 800fe16:	6163      	str	r3, [r4, #20]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	6122      	str	r2, [r4, #16]
 800fe1c:	3020      	adds	r0, #32
 800fe1e:	e7e3      	b.n	800fde8 <__d2b+0x60>
 800fe20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe28:	f8c9 0000 	str.w	r0, [r9]
 800fe2c:	6918      	ldr	r0, [r3, #16]
 800fe2e:	f7ff fd2b 	bl	800f888 <__hi0bits>
 800fe32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe36:	e7df      	b.n	800fdf8 <__d2b+0x70>
 800fe38:	08010bc3 	.word	0x08010bc3
 800fe3c:	08010c34 	.word	0x08010c34

0800fe40 <_calloc_r>:
 800fe40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe42:	fba1 2402 	umull	r2, r4, r1, r2
 800fe46:	b94c      	cbnz	r4, 800fe5c <_calloc_r+0x1c>
 800fe48:	4611      	mov	r1, r2
 800fe4a:	9201      	str	r2, [sp, #4]
 800fe4c:	f000 f87a 	bl	800ff44 <_malloc_r>
 800fe50:	9a01      	ldr	r2, [sp, #4]
 800fe52:	4605      	mov	r5, r0
 800fe54:	b930      	cbnz	r0, 800fe64 <_calloc_r+0x24>
 800fe56:	4628      	mov	r0, r5
 800fe58:	b003      	add	sp, #12
 800fe5a:	bd30      	pop	{r4, r5, pc}
 800fe5c:	220c      	movs	r2, #12
 800fe5e:	6002      	str	r2, [r0, #0]
 800fe60:	2500      	movs	r5, #0
 800fe62:	e7f8      	b.n	800fe56 <_calloc_r+0x16>
 800fe64:	4621      	mov	r1, r4
 800fe66:	f7fe f847 	bl	800def8 <memset>
 800fe6a:	e7f4      	b.n	800fe56 <_calloc_r+0x16>

0800fe6c <_free_r>:
 800fe6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe6e:	2900      	cmp	r1, #0
 800fe70:	d044      	beq.n	800fefc <_free_r+0x90>
 800fe72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe76:	9001      	str	r0, [sp, #4]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f1a1 0404 	sub.w	r4, r1, #4
 800fe7e:	bfb8      	it	lt
 800fe80:	18e4      	addlt	r4, r4, r3
 800fe82:	f000 fd27 	bl	80108d4 <__malloc_lock>
 800fe86:	4a1e      	ldr	r2, [pc, #120]	; (800ff00 <_free_r+0x94>)
 800fe88:	9801      	ldr	r0, [sp, #4]
 800fe8a:	6813      	ldr	r3, [r2, #0]
 800fe8c:	b933      	cbnz	r3, 800fe9c <_free_r+0x30>
 800fe8e:	6063      	str	r3, [r4, #4]
 800fe90:	6014      	str	r4, [r2, #0]
 800fe92:	b003      	add	sp, #12
 800fe94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe98:	f000 bd22 	b.w	80108e0 <__malloc_unlock>
 800fe9c:	42a3      	cmp	r3, r4
 800fe9e:	d908      	bls.n	800feb2 <_free_r+0x46>
 800fea0:	6825      	ldr	r5, [r4, #0]
 800fea2:	1961      	adds	r1, r4, r5
 800fea4:	428b      	cmp	r3, r1
 800fea6:	bf01      	itttt	eq
 800fea8:	6819      	ldreq	r1, [r3, #0]
 800feaa:	685b      	ldreq	r3, [r3, #4]
 800feac:	1949      	addeq	r1, r1, r5
 800feae:	6021      	streq	r1, [r4, #0]
 800feb0:	e7ed      	b.n	800fe8e <_free_r+0x22>
 800feb2:	461a      	mov	r2, r3
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	b10b      	cbz	r3, 800febc <_free_r+0x50>
 800feb8:	42a3      	cmp	r3, r4
 800feba:	d9fa      	bls.n	800feb2 <_free_r+0x46>
 800febc:	6811      	ldr	r1, [r2, #0]
 800febe:	1855      	adds	r5, r2, r1
 800fec0:	42a5      	cmp	r5, r4
 800fec2:	d10b      	bne.n	800fedc <_free_r+0x70>
 800fec4:	6824      	ldr	r4, [r4, #0]
 800fec6:	4421      	add	r1, r4
 800fec8:	1854      	adds	r4, r2, r1
 800feca:	42a3      	cmp	r3, r4
 800fecc:	6011      	str	r1, [r2, #0]
 800fece:	d1e0      	bne.n	800fe92 <_free_r+0x26>
 800fed0:	681c      	ldr	r4, [r3, #0]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	6053      	str	r3, [r2, #4]
 800fed6:	4421      	add	r1, r4
 800fed8:	6011      	str	r1, [r2, #0]
 800feda:	e7da      	b.n	800fe92 <_free_r+0x26>
 800fedc:	d902      	bls.n	800fee4 <_free_r+0x78>
 800fede:	230c      	movs	r3, #12
 800fee0:	6003      	str	r3, [r0, #0]
 800fee2:	e7d6      	b.n	800fe92 <_free_r+0x26>
 800fee4:	6825      	ldr	r5, [r4, #0]
 800fee6:	1961      	adds	r1, r4, r5
 800fee8:	428b      	cmp	r3, r1
 800feea:	bf04      	itt	eq
 800feec:	6819      	ldreq	r1, [r3, #0]
 800feee:	685b      	ldreq	r3, [r3, #4]
 800fef0:	6063      	str	r3, [r4, #4]
 800fef2:	bf04      	itt	eq
 800fef4:	1949      	addeq	r1, r1, r5
 800fef6:	6021      	streq	r1, [r4, #0]
 800fef8:	6054      	str	r4, [r2, #4]
 800fefa:	e7ca      	b.n	800fe92 <_free_r+0x26>
 800fefc:	b003      	add	sp, #12
 800fefe:	bd30      	pop	{r4, r5, pc}
 800ff00:	200046bc 	.word	0x200046bc

0800ff04 <sbrk_aligned>:
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	4e0e      	ldr	r6, [pc, #56]	; (800ff40 <sbrk_aligned+0x3c>)
 800ff08:	460c      	mov	r4, r1
 800ff0a:	6831      	ldr	r1, [r6, #0]
 800ff0c:	4605      	mov	r5, r0
 800ff0e:	b911      	cbnz	r1, 800ff16 <sbrk_aligned+0x12>
 800ff10:	f000 fa2e 	bl	8010370 <_sbrk_r>
 800ff14:	6030      	str	r0, [r6, #0]
 800ff16:	4621      	mov	r1, r4
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f000 fa29 	bl	8010370 <_sbrk_r>
 800ff1e:	1c43      	adds	r3, r0, #1
 800ff20:	d00a      	beq.n	800ff38 <sbrk_aligned+0x34>
 800ff22:	1cc4      	adds	r4, r0, #3
 800ff24:	f024 0403 	bic.w	r4, r4, #3
 800ff28:	42a0      	cmp	r0, r4
 800ff2a:	d007      	beq.n	800ff3c <sbrk_aligned+0x38>
 800ff2c:	1a21      	subs	r1, r4, r0
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f000 fa1e 	bl	8010370 <_sbrk_r>
 800ff34:	3001      	adds	r0, #1
 800ff36:	d101      	bne.n	800ff3c <sbrk_aligned+0x38>
 800ff38:	f04f 34ff 	mov.w	r4, #4294967295
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	bd70      	pop	{r4, r5, r6, pc}
 800ff40:	200046c0 	.word	0x200046c0

0800ff44 <_malloc_r>:
 800ff44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff48:	1ccd      	adds	r5, r1, #3
 800ff4a:	f025 0503 	bic.w	r5, r5, #3
 800ff4e:	3508      	adds	r5, #8
 800ff50:	2d0c      	cmp	r5, #12
 800ff52:	bf38      	it	cc
 800ff54:	250c      	movcc	r5, #12
 800ff56:	2d00      	cmp	r5, #0
 800ff58:	4607      	mov	r7, r0
 800ff5a:	db01      	blt.n	800ff60 <_malloc_r+0x1c>
 800ff5c:	42a9      	cmp	r1, r5
 800ff5e:	d905      	bls.n	800ff6c <_malloc_r+0x28>
 800ff60:	230c      	movs	r3, #12
 800ff62:	603b      	str	r3, [r7, #0]
 800ff64:	2600      	movs	r6, #0
 800ff66:	4630      	mov	r0, r6
 800ff68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6c:	4e2e      	ldr	r6, [pc, #184]	; (8010028 <_malloc_r+0xe4>)
 800ff6e:	f000 fcb1 	bl	80108d4 <__malloc_lock>
 800ff72:	6833      	ldr	r3, [r6, #0]
 800ff74:	461c      	mov	r4, r3
 800ff76:	bb34      	cbnz	r4, 800ffc6 <_malloc_r+0x82>
 800ff78:	4629      	mov	r1, r5
 800ff7a:	4638      	mov	r0, r7
 800ff7c:	f7ff ffc2 	bl	800ff04 <sbrk_aligned>
 800ff80:	1c43      	adds	r3, r0, #1
 800ff82:	4604      	mov	r4, r0
 800ff84:	d14d      	bne.n	8010022 <_malloc_r+0xde>
 800ff86:	6834      	ldr	r4, [r6, #0]
 800ff88:	4626      	mov	r6, r4
 800ff8a:	2e00      	cmp	r6, #0
 800ff8c:	d140      	bne.n	8010010 <_malloc_r+0xcc>
 800ff8e:	6823      	ldr	r3, [r4, #0]
 800ff90:	4631      	mov	r1, r6
 800ff92:	4638      	mov	r0, r7
 800ff94:	eb04 0803 	add.w	r8, r4, r3
 800ff98:	f000 f9ea 	bl	8010370 <_sbrk_r>
 800ff9c:	4580      	cmp	r8, r0
 800ff9e:	d13a      	bne.n	8010016 <_malloc_r+0xd2>
 800ffa0:	6821      	ldr	r1, [r4, #0]
 800ffa2:	3503      	adds	r5, #3
 800ffa4:	1a6d      	subs	r5, r5, r1
 800ffa6:	f025 0503 	bic.w	r5, r5, #3
 800ffaa:	3508      	adds	r5, #8
 800ffac:	2d0c      	cmp	r5, #12
 800ffae:	bf38      	it	cc
 800ffb0:	250c      	movcc	r5, #12
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	f7ff ffa5 	bl	800ff04 <sbrk_aligned>
 800ffba:	3001      	adds	r0, #1
 800ffbc:	d02b      	beq.n	8010016 <_malloc_r+0xd2>
 800ffbe:	6823      	ldr	r3, [r4, #0]
 800ffc0:	442b      	add	r3, r5
 800ffc2:	6023      	str	r3, [r4, #0]
 800ffc4:	e00e      	b.n	800ffe4 <_malloc_r+0xa0>
 800ffc6:	6822      	ldr	r2, [r4, #0]
 800ffc8:	1b52      	subs	r2, r2, r5
 800ffca:	d41e      	bmi.n	801000a <_malloc_r+0xc6>
 800ffcc:	2a0b      	cmp	r2, #11
 800ffce:	d916      	bls.n	800fffe <_malloc_r+0xba>
 800ffd0:	1961      	adds	r1, r4, r5
 800ffd2:	42a3      	cmp	r3, r4
 800ffd4:	6025      	str	r5, [r4, #0]
 800ffd6:	bf18      	it	ne
 800ffd8:	6059      	strne	r1, [r3, #4]
 800ffda:	6863      	ldr	r3, [r4, #4]
 800ffdc:	bf08      	it	eq
 800ffde:	6031      	streq	r1, [r6, #0]
 800ffe0:	5162      	str	r2, [r4, r5]
 800ffe2:	604b      	str	r3, [r1, #4]
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f104 060b 	add.w	r6, r4, #11
 800ffea:	f000 fc79 	bl	80108e0 <__malloc_unlock>
 800ffee:	f026 0607 	bic.w	r6, r6, #7
 800fff2:	1d23      	adds	r3, r4, #4
 800fff4:	1af2      	subs	r2, r6, r3
 800fff6:	d0b6      	beq.n	800ff66 <_malloc_r+0x22>
 800fff8:	1b9b      	subs	r3, r3, r6
 800fffa:	50a3      	str	r3, [r4, r2]
 800fffc:	e7b3      	b.n	800ff66 <_malloc_r+0x22>
 800fffe:	6862      	ldr	r2, [r4, #4]
 8010000:	42a3      	cmp	r3, r4
 8010002:	bf0c      	ite	eq
 8010004:	6032      	streq	r2, [r6, #0]
 8010006:	605a      	strne	r2, [r3, #4]
 8010008:	e7ec      	b.n	800ffe4 <_malloc_r+0xa0>
 801000a:	4623      	mov	r3, r4
 801000c:	6864      	ldr	r4, [r4, #4]
 801000e:	e7b2      	b.n	800ff76 <_malloc_r+0x32>
 8010010:	4634      	mov	r4, r6
 8010012:	6876      	ldr	r6, [r6, #4]
 8010014:	e7b9      	b.n	800ff8a <_malloc_r+0x46>
 8010016:	230c      	movs	r3, #12
 8010018:	603b      	str	r3, [r7, #0]
 801001a:	4638      	mov	r0, r7
 801001c:	f000 fc60 	bl	80108e0 <__malloc_unlock>
 8010020:	e7a1      	b.n	800ff66 <_malloc_r+0x22>
 8010022:	6025      	str	r5, [r4, #0]
 8010024:	e7de      	b.n	800ffe4 <_malloc_r+0xa0>
 8010026:	bf00      	nop
 8010028:	200046bc 	.word	0x200046bc

0801002c <__sfputc_r>:
 801002c:	6893      	ldr	r3, [r2, #8]
 801002e:	3b01      	subs	r3, #1
 8010030:	2b00      	cmp	r3, #0
 8010032:	b410      	push	{r4}
 8010034:	6093      	str	r3, [r2, #8]
 8010036:	da08      	bge.n	801004a <__sfputc_r+0x1e>
 8010038:	6994      	ldr	r4, [r2, #24]
 801003a:	42a3      	cmp	r3, r4
 801003c:	db01      	blt.n	8010042 <__sfputc_r+0x16>
 801003e:	290a      	cmp	r1, #10
 8010040:	d103      	bne.n	801004a <__sfputc_r+0x1e>
 8010042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010046:	f000 b9e7 	b.w	8010418 <__swbuf_r>
 801004a:	6813      	ldr	r3, [r2, #0]
 801004c:	1c58      	adds	r0, r3, #1
 801004e:	6010      	str	r0, [r2, #0]
 8010050:	7019      	strb	r1, [r3, #0]
 8010052:	4608      	mov	r0, r1
 8010054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010058:	4770      	bx	lr

0801005a <__sfputs_r>:
 801005a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005c:	4606      	mov	r6, r0
 801005e:	460f      	mov	r7, r1
 8010060:	4614      	mov	r4, r2
 8010062:	18d5      	adds	r5, r2, r3
 8010064:	42ac      	cmp	r4, r5
 8010066:	d101      	bne.n	801006c <__sfputs_r+0x12>
 8010068:	2000      	movs	r0, #0
 801006a:	e007      	b.n	801007c <__sfputs_r+0x22>
 801006c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010070:	463a      	mov	r2, r7
 8010072:	4630      	mov	r0, r6
 8010074:	f7ff ffda 	bl	801002c <__sfputc_r>
 8010078:	1c43      	adds	r3, r0, #1
 801007a:	d1f3      	bne.n	8010064 <__sfputs_r+0xa>
 801007c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010080 <_vfiprintf_r>:
 8010080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	460d      	mov	r5, r1
 8010086:	b09d      	sub	sp, #116	; 0x74
 8010088:	4614      	mov	r4, r2
 801008a:	4698      	mov	r8, r3
 801008c:	4606      	mov	r6, r0
 801008e:	b118      	cbz	r0, 8010098 <_vfiprintf_r+0x18>
 8010090:	6983      	ldr	r3, [r0, #24]
 8010092:	b90b      	cbnz	r3, 8010098 <_vfiprintf_r+0x18>
 8010094:	f7ff faa2 	bl	800f5dc <__sinit>
 8010098:	4b89      	ldr	r3, [pc, #548]	; (80102c0 <_vfiprintf_r+0x240>)
 801009a:	429d      	cmp	r5, r3
 801009c:	d11b      	bne.n	80100d6 <_vfiprintf_r+0x56>
 801009e:	6875      	ldr	r5, [r6, #4]
 80100a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100a2:	07d9      	lsls	r1, r3, #31
 80100a4:	d405      	bmi.n	80100b2 <_vfiprintf_r+0x32>
 80100a6:	89ab      	ldrh	r3, [r5, #12]
 80100a8:	059a      	lsls	r2, r3, #22
 80100aa:	d402      	bmi.n	80100b2 <_vfiprintf_r+0x32>
 80100ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ae:	f7ff fb38 	bl	800f722 <__retarget_lock_acquire_recursive>
 80100b2:	89ab      	ldrh	r3, [r5, #12]
 80100b4:	071b      	lsls	r3, r3, #28
 80100b6:	d501      	bpl.n	80100bc <_vfiprintf_r+0x3c>
 80100b8:	692b      	ldr	r3, [r5, #16]
 80100ba:	b9eb      	cbnz	r3, 80100f8 <_vfiprintf_r+0x78>
 80100bc:	4629      	mov	r1, r5
 80100be:	4630      	mov	r0, r6
 80100c0:	f000 fa0e 	bl	80104e0 <__swsetup_r>
 80100c4:	b1c0      	cbz	r0, 80100f8 <_vfiprintf_r+0x78>
 80100c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100c8:	07dc      	lsls	r4, r3, #31
 80100ca:	d50e      	bpl.n	80100ea <_vfiprintf_r+0x6a>
 80100cc:	f04f 30ff 	mov.w	r0, #4294967295
 80100d0:	b01d      	add	sp, #116	; 0x74
 80100d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d6:	4b7b      	ldr	r3, [pc, #492]	; (80102c4 <_vfiprintf_r+0x244>)
 80100d8:	429d      	cmp	r5, r3
 80100da:	d101      	bne.n	80100e0 <_vfiprintf_r+0x60>
 80100dc:	68b5      	ldr	r5, [r6, #8]
 80100de:	e7df      	b.n	80100a0 <_vfiprintf_r+0x20>
 80100e0:	4b79      	ldr	r3, [pc, #484]	; (80102c8 <_vfiprintf_r+0x248>)
 80100e2:	429d      	cmp	r5, r3
 80100e4:	bf08      	it	eq
 80100e6:	68f5      	ldreq	r5, [r6, #12]
 80100e8:	e7da      	b.n	80100a0 <_vfiprintf_r+0x20>
 80100ea:	89ab      	ldrh	r3, [r5, #12]
 80100ec:	0598      	lsls	r0, r3, #22
 80100ee:	d4ed      	bmi.n	80100cc <_vfiprintf_r+0x4c>
 80100f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100f2:	f7ff fb17 	bl	800f724 <__retarget_lock_release_recursive>
 80100f6:	e7e9      	b.n	80100cc <_vfiprintf_r+0x4c>
 80100f8:	2300      	movs	r3, #0
 80100fa:	9309      	str	r3, [sp, #36]	; 0x24
 80100fc:	2320      	movs	r3, #32
 80100fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010102:	f8cd 800c 	str.w	r8, [sp, #12]
 8010106:	2330      	movs	r3, #48	; 0x30
 8010108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102cc <_vfiprintf_r+0x24c>
 801010c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010110:	f04f 0901 	mov.w	r9, #1
 8010114:	4623      	mov	r3, r4
 8010116:	469a      	mov	sl, r3
 8010118:	f813 2b01 	ldrb.w	r2, [r3], #1
 801011c:	b10a      	cbz	r2, 8010122 <_vfiprintf_r+0xa2>
 801011e:	2a25      	cmp	r2, #37	; 0x25
 8010120:	d1f9      	bne.n	8010116 <_vfiprintf_r+0x96>
 8010122:	ebba 0b04 	subs.w	fp, sl, r4
 8010126:	d00b      	beq.n	8010140 <_vfiprintf_r+0xc0>
 8010128:	465b      	mov	r3, fp
 801012a:	4622      	mov	r2, r4
 801012c:	4629      	mov	r1, r5
 801012e:	4630      	mov	r0, r6
 8010130:	f7ff ff93 	bl	801005a <__sfputs_r>
 8010134:	3001      	adds	r0, #1
 8010136:	f000 80aa 	beq.w	801028e <_vfiprintf_r+0x20e>
 801013a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801013c:	445a      	add	r2, fp
 801013e:	9209      	str	r2, [sp, #36]	; 0x24
 8010140:	f89a 3000 	ldrb.w	r3, [sl]
 8010144:	2b00      	cmp	r3, #0
 8010146:	f000 80a2 	beq.w	801028e <_vfiprintf_r+0x20e>
 801014a:	2300      	movs	r3, #0
 801014c:	f04f 32ff 	mov.w	r2, #4294967295
 8010150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010154:	f10a 0a01 	add.w	sl, sl, #1
 8010158:	9304      	str	r3, [sp, #16]
 801015a:	9307      	str	r3, [sp, #28]
 801015c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010160:	931a      	str	r3, [sp, #104]	; 0x68
 8010162:	4654      	mov	r4, sl
 8010164:	2205      	movs	r2, #5
 8010166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801016a:	4858      	ldr	r0, [pc, #352]	; (80102cc <_vfiprintf_r+0x24c>)
 801016c:	f7f0 f860 	bl	8000230 <memchr>
 8010170:	9a04      	ldr	r2, [sp, #16]
 8010172:	b9d8      	cbnz	r0, 80101ac <_vfiprintf_r+0x12c>
 8010174:	06d1      	lsls	r1, r2, #27
 8010176:	bf44      	itt	mi
 8010178:	2320      	movmi	r3, #32
 801017a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801017e:	0713      	lsls	r3, r2, #28
 8010180:	bf44      	itt	mi
 8010182:	232b      	movmi	r3, #43	; 0x2b
 8010184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010188:	f89a 3000 	ldrb.w	r3, [sl]
 801018c:	2b2a      	cmp	r3, #42	; 0x2a
 801018e:	d015      	beq.n	80101bc <_vfiprintf_r+0x13c>
 8010190:	9a07      	ldr	r2, [sp, #28]
 8010192:	4654      	mov	r4, sl
 8010194:	2000      	movs	r0, #0
 8010196:	f04f 0c0a 	mov.w	ip, #10
 801019a:	4621      	mov	r1, r4
 801019c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101a0:	3b30      	subs	r3, #48	; 0x30
 80101a2:	2b09      	cmp	r3, #9
 80101a4:	d94e      	bls.n	8010244 <_vfiprintf_r+0x1c4>
 80101a6:	b1b0      	cbz	r0, 80101d6 <_vfiprintf_r+0x156>
 80101a8:	9207      	str	r2, [sp, #28]
 80101aa:	e014      	b.n	80101d6 <_vfiprintf_r+0x156>
 80101ac:	eba0 0308 	sub.w	r3, r0, r8
 80101b0:	fa09 f303 	lsl.w	r3, r9, r3
 80101b4:	4313      	orrs	r3, r2
 80101b6:	9304      	str	r3, [sp, #16]
 80101b8:	46a2      	mov	sl, r4
 80101ba:	e7d2      	b.n	8010162 <_vfiprintf_r+0xe2>
 80101bc:	9b03      	ldr	r3, [sp, #12]
 80101be:	1d19      	adds	r1, r3, #4
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	9103      	str	r1, [sp, #12]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	bfbb      	ittet	lt
 80101c8:	425b      	neglt	r3, r3
 80101ca:	f042 0202 	orrlt.w	r2, r2, #2
 80101ce:	9307      	strge	r3, [sp, #28]
 80101d0:	9307      	strlt	r3, [sp, #28]
 80101d2:	bfb8      	it	lt
 80101d4:	9204      	strlt	r2, [sp, #16]
 80101d6:	7823      	ldrb	r3, [r4, #0]
 80101d8:	2b2e      	cmp	r3, #46	; 0x2e
 80101da:	d10c      	bne.n	80101f6 <_vfiprintf_r+0x176>
 80101dc:	7863      	ldrb	r3, [r4, #1]
 80101de:	2b2a      	cmp	r3, #42	; 0x2a
 80101e0:	d135      	bne.n	801024e <_vfiprintf_r+0x1ce>
 80101e2:	9b03      	ldr	r3, [sp, #12]
 80101e4:	1d1a      	adds	r2, r3, #4
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	9203      	str	r2, [sp, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	bfb8      	it	lt
 80101ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80101f2:	3402      	adds	r4, #2
 80101f4:	9305      	str	r3, [sp, #20]
 80101f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102dc <_vfiprintf_r+0x25c>
 80101fa:	7821      	ldrb	r1, [r4, #0]
 80101fc:	2203      	movs	r2, #3
 80101fe:	4650      	mov	r0, sl
 8010200:	f7f0 f816 	bl	8000230 <memchr>
 8010204:	b140      	cbz	r0, 8010218 <_vfiprintf_r+0x198>
 8010206:	2340      	movs	r3, #64	; 0x40
 8010208:	eba0 000a 	sub.w	r0, r0, sl
 801020c:	fa03 f000 	lsl.w	r0, r3, r0
 8010210:	9b04      	ldr	r3, [sp, #16]
 8010212:	4303      	orrs	r3, r0
 8010214:	3401      	adds	r4, #1
 8010216:	9304      	str	r3, [sp, #16]
 8010218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801021c:	482c      	ldr	r0, [pc, #176]	; (80102d0 <_vfiprintf_r+0x250>)
 801021e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010222:	2206      	movs	r2, #6
 8010224:	f7f0 f804 	bl	8000230 <memchr>
 8010228:	2800      	cmp	r0, #0
 801022a:	d03f      	beq.n	80102ac <_vfiprintf_r+0x22c>
 801022c:	4b29      	ldr	r3, [pc, #164]	; (80102d4 <_vfiprintf_r+0x254>)
 801022e:	bb1b      	cbnz	r3, 8010278 <_vfiprintf_r+0x1f8>
 8010230:	9b03      	ldr	r3, [sp, #12]
 8010232:	3307      	adds	r3, #7
 8010234:	f023 0307 	bic.w	r3, r3, #7
 8010238:	3308      	adds	r3, #8
 801023a:	9303      	str	r3, [sp, #12]
 801023c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801023e:	443b      	add	r3, r7
 8010240:	9309      	str	r3, [sp, #36]	; 0x24
 8010242:	e767      	b.n	8010114 <_vfiprintf_r+0x94>
 8010244:	fb0c 3202 	mla	r2, ip, r2, r3
 8010248:	460c      	mov	r4, r1
 801024a:	2001      	movs	r0, #1
 801024c:	e7a5      	b.n	801019a <_vfiprintf_r+0x11a>
 801024e:	2300      	movs	r3, #0
 8010250:	3401      	adds	r4, #1
 8010252:	9305      	str	r3, [sp, #20]
 8010254:	4619      	mov	r1, r3
 8010256:	f04f 0c0a 	mov.w	ip, #10
 801025a:	4620      	mov	r0, r4
 801025c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010260:	3a30      	subs	r2, #48	; 0x30
 8010262:	2a09      	cmp	r2, #9
 8010264:	d903      	bls.n	801026e <_vfiprintf_r+0x1ee>
 8010266:	2b00      	cmp	r3, #0
 8010268:	d0c5      	beq.n	80101f6 <_vfiprintf_r+0x176>
 801026a:	9105      	str	r1, [sp, #20]
 801026c:	e7c3      	b.n	80101f6 <_vfiprintf_r+0x176>
 801026e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010272:	4604      	mov	r4, r0
 8010274:	2301      	movs	r3, #1
 8010276:	e7f0      	b.n	801025a <_vfiprintf_r+0x1da>
 8010278:	ab03      	add	r3, sp, #12
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	462a      	mov	r2, r5
 801027e:	4b16      	ldr	r3, [pc, #88]	; (80102d8 <_vfiprintf_r+0x258>)
 8010280:	a904      	add	r1, sp, #16
 8010282:	4630      	mov	r0, r6
 8010284:	f7fd fee0 	bl	800e048 <_printf_float>
 8010288:	4607      	mov	r7, r0
 801028a:	1c78      	adds	r0, r7, #1
 801028c:	d1d6      	bne.n	801023c <_vfiprintf_r+0x1bc>
 801028e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010290:	07d9      	lsls	r1, r3, #31
 8010292:	d405      	bmi.n	80102a0 <_vfiprintf_r+0x220>
 8010294:	89ab      	ldrh	r3, [r5, #12]
 8010296:	059a      	lsls	r2, r3, #22
 8010298:	d402      	bmi.n	80102a0 <_vfiprintf_r+0x220>
 801029a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801029c:	f7ff fa42 	bl	800f724 <__retarget_lock_release_recursive>
 80102a0:	89ab      	ldrh	r3, [r5, #12]
 80102a2:	065b      	lsls	r3, r3, #25
 80102a4:	f53f af12 	bmi.w	80100cc <_vfiprintf_r+0x4c>
 80102a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102aa:	e711      	b.n	80100d0 <_vfiprintf_r+0x50>
 80102ac:	ab03      	add	r3, sp, #12
 80102ae:	9300      	str	r3, [sp, #0]
 80102b0:	462a      	mov	r2, r5
 80102b2:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <_vfiprintf_r+0x258>)
 80102b4:	a904      	add	r1, sp, #16
 80102b6:	4630      	mov	r0, r6
 80102b8:	f7fe f96a 	bl	800e590 <_printf_i>
 80102bc:	e7e4      	b.n	8010288 <_vfiprintf_r+0x208>
 80102be:	bf00      	nop
 80102c0:	08010bf4 	.word	0x08010bf4
 80102c4:	08010c14 	.word	0x08010c14
 80102c8:	08010bd4 	.word	0x08010bd4
 80102cc:	08010d8c 	.word	0x08010d8c
 80102d0:	08010d96 	.word	0x08010d96
 80102d4:	0800e049 	.word	0x0800e049
 80102d8:	0801005b 	.word	0x0801005b
 80102dc:	08010d92 	.word	0x08010d92

080102e0 <_putc_r>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	460d      	mov	r5, r1
 80102e4:	4614      	mov	r4, r2
 80102e6:	4606      	mov	r6, r0
 80102e8:	b118      	cbz	r0, 80102f2 <_putc_r+0x12>
 80102ea:	6983      	ldr	r3, [r0, #24]
 80102ec:	b90b      	cbnz	r3, 80102f2 <_putc_r+0x12>
 80102ee:	f7ff f975 	bl	800f5dc <__sinit>
 80102f2:	4b1c      	ldr	r3, [pc, #112]	; (8010364 <_putc_r+0x84>)
 80102f4:	429c      	cmp	r4, r3
 80102f6:	d124      	bne.n	8010342 <_putc_r+0x62>
 80102f8:	6874      	ldr	r4, [r6, #4]
 80102fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102fc:	07d8      	lsls	r0, r3, #31
 80102fe:	d405      	bmi.n	801030c <_putc_r+0x2c>
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	0599      	lsls	r1, r3, #22
 8010304:	d402      	bmi.n	801030c <_putc_r+0x2c>
 8010306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010308:	f7ff fa0b 	bl	800f722 <__retarget_lock_acquire_recursive>
 801030c:	68a3      	ldr	r3, [r4, #8]
 801030e:	3b01      	subs	r3, #1
 8010310:	2b00      	cmp	r3, #0
 8010312:	60a3      	str	r3, [r4, #8]
 8010314:	da05      	bge.n	8010322 <_putc_r+0x42>
 8010316:	69a2      	ldr	r2, [r4, #24]
 8010318:	4293      	cmp	r3, r2
 801031a:	db1c      	blt.n	8010356 <_putc_r+0x76>
 801031c:	b2eb      	uxtb	r3, r5
 801031e:	2b0a      	cmp	r3, #10
 8010320:	d019      	beq.n	8010356 <_putc_r+0x76>
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	1c5a      	adds	r2, r3, #1
 8010326:	6022      	str	r2, [r4, #0]
 8010328:	701d      	strb	r5, [r3, #0]
 801032a:	b2ed      	uxtb	r5, r5
 801032c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801032e:	07da      	lsls	r2, r3, #31
 8010330:	d405      	bmi.n	801033e <_putc_r+0x5e>
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	059b      	lsls	r3, r3, #22
 8010336:	d402      	bmi.n	801033e <_putc_r+0x5e>
 8010338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801033a:	f7ff f9f3 	bl	800f724 <__retarget_lock_release_recursive>
 801033e:	4628      	mov	r0, r5
 8010340:	bd70      	pop	{r4, r5, r6, pc}
 8010342:	4b09      	ldr	r3, [pc, #36]	; (8010368 <_putc_r+0x88>)
 8010344:	429c      	cmp	r4, r3
 8010346:	d101      	bne.n	801034c <_putc_r+0x6c>
 8010348:	68b4      	ldr	r4, [r6, #8]
 801034a:	e7d6      	b.n	80102fa <_putc_r+0x1a>
 801034c:	4b07      	ldr	r3, [pc, #28]	; (801036c <_putc_r+0x8c>)
 801034e:	429c      	cmp	r4, r3
 8010350:	bf08      	it	eq
 8010352:	68f4      	ldreq	r4, [r6, #12]
 8010354:	e7d1      	b.n	80102fa <_putc_r+0x1a>
 8010356:	4629      	mov	r1, r5
 8010358:	4622      	mov	r2, r4
 801035a:	4630      	mov	r0, r6
 801035c:	f000 f85c 	bl	8010418 <__swbuf_r>
 8010360:	4605      	mov	r5, r0
 8010362:	e7e3      	b.n	801032c <_putc_r+0x4c>
 8010364:	08010bf4 	.word	0x08010bf4
 8010368:	08010c14 	.word	0x08010c14
 801036c:	08010bd4 	.word	0x08010bd4

08010370 <_sbrk_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4d06      	ldr	r5, [pc, #24]	; (801038c <_sbrk_r+0x1c>)
 8010374:	2300      	movs	r3, #0
 8010376:	4604      	mov	r4, r0
 8010378:	4608      	mov	r0, r1
 801037a:	602b      	str	r3, [r5, #0]
 801037c:	f7f1 fc74 	bl	8001c68 <_sbrk>
 8010380:	1c43      	adds	r3, r0, #1
 8010382:	d102      	bne.n	801038a <_sbrk_r+0x1a>
 8010384:	682b      	ldr	r3, [r5, #0]
 8010386:	b103      	cbz	r3, 801038a <_sbrk_r+0x1a>
 8010388:	6023      	str	r3, [r4, #0]
 801038a:	bd38      	pop	{r3, r4, r5, pc}
 801038c:	200046c4 	.word	0x200046c4

08010390 <__sread>:
 8010390:	b510      	push	{r4, lr}
 8010392:	460c      	mov	r4, r1
 8010394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010398:	f000 faa8 	bl	80108ec <_read_r>
 801039c:	2800      	cmp	r0, #0
 801039e:	bfab      	itete	ge
 80103a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103a2:	89a3      	ldrhlt	r3, [r4, #12]
 80103a4:	181b      	addge	r3, r3, r0
 80103a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103aa:	bfac      	ite	ge
 80103ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80103ae:	81a3      	strhlt	r3, [r4, #12]
 80103b0:	bd10      	pop	{r4, pc}

080103b2 <__swrite>:
 80103b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b6:	461f      	mov	r7, r3
 80103b8:	898b      	ldrh	r3, [r1, #12]
 80103ba:	05db      	lsls	r3, r3, #23
 80103bc:	4605      	mov	r5, r0
 80103be:	460c      	mov	r4, r1
 80103c0:	4616      	mov	r6, r2
 80103c2:	d505      	bpl.n	80103d0 <__swrite+0x1e>
 80103c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103c8:	2302      	movs	r3, #2
 80103ca:	2200      	movs	r2, #0
 80103cc:	f000 f9f8 	bl	80107c0 <_lseek_r>
 80103d0:	89a3      	ldrh	r3, [r4, #12]
 80103d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103da:	81a3      	strh	r3, [r4, #12]
 80103dc:	4632      	mov	r2, r6
 80103de:	463b      	mov	r3, r7
 80103e0:	4628      	mov	r0, r5
 80103e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103e6:	f000 b869 	b.w	80104bc <_write_r>

080103ea <__sseek>:
 80103ea:	b510      	push	{r4, lr}
 80103ec:	460c      	mov	r4, r1
 80103ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f2:	f000 f9e5 	bl	80107c0 <_lseek_r>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	bf15      	itete	ne
 80103fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80103fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010406:	81a3      	strheq	r3, [r4, #12]
 8010408:	bf18      	it	ne
 801040a:	81a3      	strhne	r3, [r4, #12]
 801040c:	bd10      	pop	{r4, pc}

0801040e <__sclose>:
 801040e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010412:	f000 b8f1 	b.w	80105f8 <_close_r>
	...

08010418 <__swbuf_r>:
 8010418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801041a:	460e      	mov	r6, r1
 801041c:	4614      	mov	r4, r2
 801041e:	4605      	mov	r5, r0
 8010420:	b118      	cbz	r0, 801042a <__swbuf_r+0x12>
 8010422:	6983      	ldr	r3, [r0, #24]
 8010424:	b90b      	cbnz	r3, 801042a <__swbuf_r+0x12>
 8010426:	f7ff f8d9 	bl	800f5dc <__sinit>
 801042a:	4b21      	ldr	r3, [pc, #132]	; (80104b0 <__swbuf_r+0x98>)
 801042c:	429c      	cmp	r4, r3
 801042e:	d12b      	bne.n	8010488 <__swbuf_r+0x70>
 8010430:	686c      	ldr	r4, [r5, #4]
 8010432:	69a3      	ldr	r3, [r4, #24]
 8010434:	60a3      	str	r3, [r4, #8]
 8010436:	89a3      	ldrh	r3, [r4, #12]
 8010438:	071a      	lsls	r2, r3, #28
 801043a:	d52f      	bpl.n	801049c <__swbuf_r+0x84>
 801043c:	6923      	ldr	r3, [r4, #16]
 801043e:	b36b      	cbz	r3, 801049c <__swbuf_r+0x84>
 8010440:	6923      	ldr	r3, [r4, #16]
 8010442:	6820      	ldr	r0, [r4, #0]
 8010444:	1ac0      	subs	r0, r0, r3
 8010446:	6963      	ldr	r3, [r4, #20]
 8010448:	b2f6      	uxtb	r6, r6
 801044a:	4283      	cmp	r3, r0
 801044c:	4637      	mov	r7, r6
 801044e:	dc04      	bgt.n	801045a <__swbuf_r+0x42>
 8010450:	4621      	mov	r1, r4
 8010452:	4628      	mov	r0, r5
 8010454:	f000 f966 	bl	8010724 <_fflush_r>
 8010458:	bb30      	cbnz	r0, 80104a8 <__swbuf_r+0x90>
 801045a:	68a3      	ldr	r3, [r4, #8]
 801045c:	3b01      	subs	r3, #1
 801045e:	60a3      	str	r3, [r4, #8]
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	1c5a      	adds	r2, r3, #1
 8010464:	6022      	str	r2, [r4, #0]
 8010466:	701e      	strb	r6, [r3, #0]
 8010468:	6963      	ldr	r3, [r4, #20]
 801046a:	3001      	adds	r0, #1
 801046c:	4283      	cmp	r3, r0
 801046e:	d004      	beq.n	801047a <__swbuf_r+0x62>
 8010470:	89a3      	ldrh	r3, [r4, #12]
 8010472:	07db      	lsls	r3, r3, #31
 8010474:	d506      	bpl.n	8010484 <__swbuf_r+0x6c>
 8010476:	2e0a      	cmp	r6, #10
 8010478:	d104      	bne.n	8010484 <__swbuf_r+0x6c>
 801047a:	4621      	mov	r1, r4
 801047c:	4628      	mov	r0, r5
 801047e:	f000 f951 	bl	8010724 <_fflush_r>
 8010482:	b988      	cbnz	r0, 80104a8 <__swbuf_r+0x90>
 8010484:	4638      	mov	r0, r7
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010488:	4b0a      	ldr	r3, [pc, #40]	; (80104b4 <__swbuf_r+0x9c>)
 801048a:	429c      	cmp	r4, r3
 801048c:	d101      	bne.n	8010492 <__swbuf_r+0x7a>
 801048e:	68ac      	ldr	r4, [r5, #8]
 8010490:	e7cf      	b.n	8010432 <__swbuf_r+0x1a>
 8010492:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <__swbuf_r+0xa0>)
 8010494:	429c      	cmp	r4, r3
 8010496:	bf08      	it	eq
 8010498:	68ec      	ldreq	r4, [r5, #12]
 801049a:	e7ca      	b.n	8010432 <__swbuf_r+0x1a>
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 f81e 	bl	80104e0 <__swsetup_r>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d0cb      	beq.n	8010440 <__swbuf_r+0x28>
 80104a8:	f04f 37ff 	mov.w	r7, #4294967295
 80104ac:	e7ea      	b.n	8010484 <__swbuf_r+0x6c>
 80104ae:	bf00      	nop
 80104b0:	08010bf4 	.word	0x08010bf4
 80104b4:	08010c14 	.word	0x08010c14
 80104b8:	08010bd4 	.word	0x08010bd4

080104bc <_write_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d07      	ldr	r5, [pc, #28]	; (80104dc <_write_r+0x20>)
 80104c0:	4604      	mov	r4, r0
 80104c2:	4608      	mov	r0, r1
 80104c4:	4611      	mov	r1, r2
 80104c6:	2200      	movs	r2, #0
 80104c8:	602a      	str	r2, [r5, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	f7f1 fb7c 	bl	8001bc8 <_write>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <_write_r+0x1e>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	b103      	cbz	r3, 80104da <_write_r+0x1e>
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	200046c4 	.word	0x200046c4

080104e0 <__swsetup_r>:
 80104e0:	4b32      	ldr	r3, [pc, #200]	; (80105ac <__swsetup_r+0xcc>)
 80104e2:	b570      	push	{r4, r5, r6, lr}
 80104e4:	681d      	ldr	r5, [r3, #0]
 80104e6:	4606      	mov	r6, r0
 80104e8:	460c      	mov	r4, r1
 80104ea:	b125      	cbz	r5, 80104f6 <__swsetup_r+0x16>
 80104ec:	69ab      	ldr	r3, [r5, #24]
 80104ee:	b913      	cbnz	r3, 80104f6 <__swsetup_r+0x16>
 80104f0:	4628      	mov	r0, r5
 80104f2:	f7ff f873 	bl	800f5dc <__sinit>
 80104f6:	4b2e      	ldr	r3, [pc, #184]	; (80105b0 <__swsetup_r+0xd0>)
 80104f8:	429c      	cmp	r4, r3
 80104fa:	d10f      	bne.n	801051c <__swsetup_r+0x3c>
 80104fc:	686c      	ldr	r4, [r5, #4]
 80104fe:	89a3      	ldrh	r3, [r4, #12]
 8010500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010504:	0719      	lsls	r1, r3, #28
 8010506:	d42c      	bmi.n	8010562 <__swsetup_r+0x82>
 8010508:	06dd      	lsls	r5, r3, #27
 801050a:	d411      	bmi.n	8010530 <__swsetup_r+0x50>
 801050c:	2309      	movs	r3, #9
 801050e:	6033      	str	r3, [r6, #0]
 8010510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010514:	81a3      	strh	r3, [r4, #12]
 8010516:	f04f 30ff 	mov.w	r0, #4294967295
 801051a:	e03e      	b.n	801059a <__swsetup_r+0xba>
 801051c:	4b25      	ldr	r3, [pc, #148]	; (80105b4 <__swsetup_r+0xd4>)
 801051e:	429c      	cmp	r4, r3
 8010520:	d101      	bne.n	8010526 <__swsetup_r+0x46>
 8010522:	68ac      	ldr	r4, [r5, #8]
 8010524:	e7eb      	b.n	80104fe <__swsetup_r+0x1e>
 8010526:	4b24      	ldr	r3, [pc, #144]	; (80105b8 <__swsetup_r+0xd8>)
 8010528:	429c      	cmp	r4, r3
 801052a:	bf08      	it	eq
 801052c:	68ec      	ldreq	r4, [r5, #12]
 801052e:	e7e6      	b.n	80104fe <__swsetup_r+0x1e>
 8010530:	0758      	lsls	r0, r3, #29
 8010532:	d512      	bpl.n	801055a <__swsetup_r+0x7a>
 8010534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010536:	b141      	cbz	r1, 801054a <__swsetup_r+0x6a>
 8010538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801053c:	4299      	cmp	r1, r3
 801053e:	d002      	beq.n	8010546 <__swsetup_r+0x66>
 8010540:	4630      	mov	r0, r6
 8010542:	f7ff fc93 	bl	800fe6c <_free_r>
 8010546:	2300      	movs	r3, #0
 8010548:	6363      	str	r3, [r4, #52]	; 0x34
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	2300      	movs	r3, #0
 8010554:	6063      	str	r3, [r4, #4]
 8010556:	6923      	ldr	r3, [r4, #16]
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	89a3      	ldrh	r3, [r4, #12]
 801055c:	f043 0308 	orr.w	r3, r3, #8
 8010560:	81a3      	strh	r3, [r4, #12]
 8010562:	6923      	ldr	r3, [r4, #16]
 8010564:	b94b      	cbnz	r3, 801057a <__swsetup_r+0x9a>
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801056c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010570:	d003      	beq.n	801057a <__swsetup_r+0x9a>
 8010572:	4621      	mov	r1, r4
 8010574:	4630      	mov	r0, r6
 8010576:	f000 f95b 	bl	8010830 <__smakebuf_r>
 801057a:	89a0      	ldrh	r0, [r4, #12]
 801057c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010580:	f010 0301 	ands.w	r3, r0, #1
 8010584:	d00a      	beq.n	801059c <__swsetup_r+0xbc>
 8010586:	2300      	movs	r3, #0
 8010588:	60a3      	str	r3, [r4, #8]
 801058a:	6963      	ldr	r3, [r4, #20]
 801058c:	425b      	negs	r3, r3
 801058e:	61a3      	str	r3, [r4, #24]
 8010590:	6923      	ldr	r3, [r4, #16]
 8010592:	b943      	cbnz	r3, 80105a6 <__swsetup_r+0xc6>
 8010594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010598:	d1ba      	bne.n	8010510 <__swsetup_r+0x30>
 801059a:	bd70      	pop	{r4, r5, r6, pc}
 801059c:	0781      	lsls	r1, r0, #30
 801059e:	bf58      	it	pl
 80105a0:	6963      	ldrpl	r3, [r4, #20]
 80105a2:	60a3      	str	r3, [r4, #8]
 80105a4:	e7f4      	b.n	8010590 <__swsetup_r+0xb0>
 80105a6:	2000      	movs	r0, #0
 80105a8:	e7f7      	b.n	801059a <__swsetup_r+0xba>
 80105aa:	bf00      	nop
 80105ac:	20002858 	.word	0x20002858
 80105b0:	08010bf4 	.word	0x08010bf4
 80105b4:	08010c14 	.word	0x08010c14
 80105b8:	08010bd4 	.word	0x08010bd4

080105bc <__assert_func>:
 80105bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105be:	4614      	mov	r4, r2
 80105c0:	461a      	mov	r2, r3
 80105c2:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <__assert_func+0x2c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4605      	mov	r5, r0
 80105c8:	68d8      	ldr	r0, [r3, #12]
 80105ca:	b14c      	cbz	r4, 80105e0 <__assert_func+0x24>
 80105cc:	4b07      	ldr	r3, [pc, #28]	; (80105ec <__assert_func+0x30>)
 80105ce:	9100      	str	r1, [sp, #0]
 80105d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105d4:	4906      	ldr	r1, [pc, #24]	; (80105f0 <__assert_func+0x34>)
 80105d6:	462b      	mov	r3, r5
 80105d8:	f000 f8e0 	bl	801079c <fiprintf>
 80105dc:	f000 f9a5 	bl	801092a <abort>
 80105e0:	4b04      	ldr	r3, [pc, #16]	; (80105f4 <__assert_func+0x38>)
 80105e2:	461c      	mov	r4, r3
 80105e4:	e7f3      	b.n	80105ce <__assert_func+0x12>
 80105e6:	bf00      	nop
 80105e8:	20002858 	.word	0x20002858
 80105ec:	08010d9d 	.word	0x08010d9d
 80105f0:	08010daa 	.word	0x08010daa
 80105f4:	08010dd8 	.word	0x08010dd8

080105f8 <_close_r>:
 80105f8:	b538      	push	{r3, r4, r5, lr}
 80105fa:	4d06      	ldr	r5, [pc, #24]	; (8010614 <_close_r+0x1c>)
 80105fc:	2300      	movs	r3, #0
 80105fe:	4604      	mov	r4, r0
 8010600:	4608      	mov	r0, r1
 8010602:	602b      	str	r3, [r5, #0]
 8010604:	f7f1 fafc 	bl	8001c00 <_close>
 8010608:	1c43      	adds	r3, r0, #1
 801060a:	d102      	bne.n	8010612 <_close_r+0x1a>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	b103      	cbz	r3, 8010612 <_close_r+0x1a>
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	bd38      	pop	{r3, r4, r5, pc}
 8010614:	200046c4 	.word	0x200046c4

08010618 <__sflush_r>:
 8010618:	898a      	ldrh	r2, [r1, #12]
 801061a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061e:	4605      	mov	r5, r0
 8010620:	0710      	lsls	r0, r2, #28
 8010622:	460c      	mov	r4, r1
 8010624:	d458      	bmi.n	80106d8 <__sflush_r+0xc0>
 8010626:	684b      	ldr	r3, [r1, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	dc05      	bgt.n	8010638 <__sflush_r+0x20>
 801062c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801062e:	2b00      	cmp	r3, #0
 8010630:	dc02      	bgt.n	8010638 <__sflush_r+0x20>
 8010632:	2000      	movs	r0, #0
 8010634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801063a:	2e00      	cmp	r6, #0
 801063c:	d0f9      	beq.n	8010632 <__sflush_r+0x1a>
 801063e:	2300      	movs	r3, #0
 8010640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010644:	682f      	ldr	r7, [r5, #0]
 8010646:	602b      	str	r3, [r5, #0]
 8010648:	d032      	beq.n	80106b0 <__sflush_r+0x98>
 801064a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801064c:	89a3      	ldrh	r3, [r4, #12]
 801064e:	075a      	lsls	r2, r3, #29
 8010650:	d505      	bpl.n	801065e <__sflush_r+0x46>
 8010652:	6863      	ldr	r3, [r4, #4]
 8010654:	1ac0      	subs	r0, r0, r3
 8010656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010658:	b10b      	cbz	r3, 801065e <__sflush_r+0x46>
 801065a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801065c:	1ac0      	subs	r0, r0, r3
 801065e:	2300      	movs	r3, #0
 8010660:	4602      	mov	r2, r0
 8010662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010664:	6a21      	ldr	r1, [r4, #32]
 8010666:	4628      	mov	r0, r5
 8010668:	47b0      	blx	r6
 801066a:	1c43      	adds	r3, r0, #1
 801066c:	89a3      	ldrh	r3, [r4, #12]
 801066e:	d106      	bne.n	801067e <__sflush_r+0x66>
 8010670:	6829      	ldr	r1, [r5, #0]
 8010672:	291d      	cmp	r1, #29
 8010674:	d82c      	bhi.n	80106d0 <__sflush_r+0xb8>
 8010676:	4a2a      	ldr	r2, [pc, #168]	; (8010720 <__sflush_r+0x108>)
 8010678:	40ca      	lsrs	r2, r1
 801067a:	07d6      	lsls	r6, r2, #31
 801067c:	d528      	bpl.n	80106d0 <__sflush_r+0xb8>
 801067e:	2200      	movs	r2, #0
 8010680:	6062      	str	r2, [r4, #4]
 8010682:	04d9      	lsls	r1, r3, #19
 8010684:	6922      	ldr	r2, [r4, #16]
 8010686:	6022      	str	r2, [r4, #0]
 8010688:	d504      	bpl.n	8010694 <__sflush_r+0x7c>
 801068a:	1c42      	adds	r2, r0, #1
 801068c:	d101      	bne.n	8010692 <__sflush_r+0x7a>
 801068e:	682b      	ldr	r3, [r5, #0]
 8010690:	b903      	cbnz	r3, 8010694 <__sflush_r+0x7c>
 8010692:	6560      	str	r0, [r4, #84]	; 0x54
 8010694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010696:	602f      	str	r7, [r5, #0]
 8010698:	2900      	cmp	r1, #0
 801069a:	d0ca      	beq.n	8010632 <__sflush_r+0x1a>
 801069c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106a0:	4299      	cmp	r1, r3
 80106a2:	d002      	beq.n	80106aa <__sflush_r+0x92>
 80106a4:	4628      	mov	r0, r5
 80106a6:	f7ff fbe1 	bl	800fe6c <_free_r>
 80106aa:	2000      	movs	r0, #0
 80106ac:	6360      	str	r0, [r4, #52]	; 0x34
 80106ae:	e7c1      	b.n	8010634 <__sflush_r+0x1c>
 80106b0:	6a21      	ldr	r1, [r4, #32]
 80106b2:	2301      	movs	r3, #1
 80106b4:	4628      	mov	r0, r5
 80106b6:	47b0      	blx	r6
 80106b8:	1c41      	adds	r1, r0, #1
 80106ba:	d1c7      	bne.n	801064c <__sflush_r+0x34>
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d0c4      	beq.n	801064c <__sflush_r+0x34>
 80106c2:	2b1d      	cmp	r3, #29
 80106c4:	d001      	beq.n	80106ca <__sflush_r+0xb2>
 80106c6:	2b16      	cmp	r3, #22
 80106c8:	d101      	bne.n	80106ce <__sflush_r+0xb6>
 80106ca:	602f      	str	r7, [r5, #0]
 80106cc:	e7b1      	b.n	8010632 <__sflush_r+0x1a>
 80106ce:	89a3      	ldrh	r3, [r4, #12]
 80106d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d4:	81a3      	strh	r3, [r4, #12]
 80106d6:	e7ad      	b.n	8010634 <__sflush_r+0x1c>
 80106d8:	690f      	ldr	r7, [r1, #16]
 80106da:	2f00      	cmp	r7, #0
 80106dc:	d0a9      	beq.n	8010632 <__sflush_r+0x1a>
 80106de:	0793      	lsls	r3, r2, #30
 80106e0:	680e      	ldr	r6, [r1, #0]
 80106e2:	bf08      	it	eq
 80106e4:	694b      	ldreq	r3, [r1, #20]
 80106e6:	600f      	str	r7, [r1, #0]
 80106e8:	bf18      	it	ne
 80106ea:	2300      	movne	r3, #0
 80106ec:	eba6 0807 	sub.w	r8, r6, r7
 80106f0:	608b      	str	r3, [r1, #8]
 80106f2:	f1b8 0f00 	cmp.w	r8, #0
 80106f6:	dd9c      	ble.n	8010632 <__sflush_r+0x1a>
 80106f8:	6a21      	ldr	r1, [r4, #32]
 80106fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106fc:	4643      	mov	r3, r8
 80106fe:	463a      	mov	r2, r7
 8010700:	4628      	mov	r0, r5
 8010702:	47b0      	blx	r6
 8010704:	2800      	cmp	r0, #0
 8010706:	dc06      	bgt.n	8010716 <__sflush_r+0xfe>
 8010708:	89a3      	ldrh	r3, [r4, #12]
 801070a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801070e:	81a3      	strh	r3, [r4, #12]
 8010710:	f04f 30ff 	mov.w	r0, #4294967295
 8010714:	e78e      	b.n	8010634 <__sflush_r+0x1c>
 8010716:	4407      	add	r7, r0
 8010718:	eba8 0800 	sub.w	r8, r8, r0
 801071c:	e7e9      	b.n	80106f2 <__sflush_r+0xda>
 801071e:	bf00      	nop
 8010720:	20400001 	.word	0x20400001

08010724 <_fflush_r>:
 8010724:	b538      	push	{r3, r4, r5, lr}
 8010726:	690b      	ldr	r3, [r1, #16]
 8010728:	4605      	mov	r5, r0
 801072a:	460c      	mov	r4, r1
 801072c:	b913      	cbnz	r3, 8010734 <_fflush_r+0x10>
 801072e:	2500      	movs	r5, #0
 8010730:	4628      	mov	r0, r5
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	b118      	cbz	r0, 801073e <_fflush_r+0x1a>
 8010736:	6983      	ldr	r3, [r0, #24]
 8010738:	b90b      	cbnz	r3, 801073e <_fflush_r+0x1a>
 801073a:	f7fe ff4f 	bl	800f5dc <__sinit>
 801073e:	4b14      	ldr	r3, [pc, #80]	; (8010790 <_fflush_r+0x6c>)
 8010740:	429c      	cmp	r4, r3
 8010742:	d11b      	bne.n	801077c <_fflush_r+0x58>
 8010744:	686c      	ldr	r4, [r5, #4]
 8010746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d0ef      	beq.n	801072e <_fflush_r+0xa>
 801074e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010750:	07d0      	lsls	r0, r2, #31
 8010752:	d404      	bmi.n	801075e <_fflush_r+0x3a>
 8010754:	0599      	lsls	r1, r3, #22
 8010756:	d402      	bmi.n	801075e <_fflush_r+0x3a>
 8010758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801075a:	f7fe ffe2 	bl	800f722 <__retarget_lock_acquire_recursive>
 801075e:	4628      	mov	r0, r5
 8010760:	4621      	mov	r1, r4
 8010762:	f7ff ff59 	bl	8010618 <__sflush_r>
 8010766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010768:	07da      	lsls	r2, r3, #31
 801076a:	4605      	mov	r5, r0
 801076c:	d4e0      	bmi.n	8010730 <_fflush_r+0xc>
 801076e:	89a3      	ldrh	r3, [r4, #12]
 8010770:	059b      	lsls	r3, r3, #22
 8010772:	d4dd      	bmi.n	8010730 <_fflush_r+0xc>
 8010774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010776:	f7fe ffd5 	bl	800f724 <__retarget_lock_release_recursive>
 801077a:	e7d9      	b.n	8010730 <_fflush_r+0xc>
 801077c:	4b05      	ldr	r3, [pc, #20]	; (8010794 <_fflush_r+0x70>)
 801077e:	429c      	cmp	r4, r3
 8010780:	d101      	bne.n	8010786 <_fflush_r+0x62>
 8010782:	68ac      	ldr	r4, [r5, #8]
 8010784:	e7df      	b.n	8010746 <_fflush_r+0x22>
 8010786:	4b04      	ldr	r3, [pc, #16]	; (8010798 <_fflush_r+0x74>)
 8010788:	429c      	cmp	r4, r3
 801078a:	bf08      	it	eq
 801078c:	68ec      	ldreq	r4, [r5, #12]
 801078e:	e7da      	b.n	8010746 <_fflush_r+0x22>
 8010790:	08010bf4 	.word	0x08010bf4
 8010794:	08010c14 	.word	0x08010c14
 8010798:	08010bd4 	.word	0x08010bd4

0801079c <fiprintf>:
 801079c:	b40e      	push	{r1, r2, r3}
 801079e:	b503      	push	{r0, r1, lr}
 80107a0:	4601      	mov	r1, r0
 80107a2:	ab03      	add	r3, sp, #12
 80107a4:	4805      	ldr	r0, [pc, #20]	; (80107bc <fiprintf+0x20>)
 80107a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107aa:	6800      	ldr	r0, [r0, #0]
 80107ac:	9301      	str	r3, [sp, #4]
 80107ae:	f7ff fc67 	bl	8010080 <_vfiprintf_r>
 80107b2:	b002      	add	sp, #8
 80107b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80107b8:	b003      	add	sp, #12
 80107ba:	4770      	bx	lr
 80107bc:	20002858 	.word	0x20002858

080107c0 <_lseek_r>:
 80107c0:	b538      	push	{r3, r4, r5, lr}
 80107c2:	4d07      	ldr	r5, [pc, #28]	; (80107e0 <_lseek_r+0x20>)
 80107c4:	4604      	mov	r4, r0
 80107c6:	4608      	mov	r0, r1
 80107c8:	4611      	mov	r1, r2
 80107ca:	2200      	movs	r2, #0
 80107cc:	602a      	str	r2, [r5, #0]
 80107ce:	461a      	mov	r2, r3
 80107d0:	f7f1 fa3d 	bl	8001c4e <_lseek>
 80107d4:	1c43      	adds	r3, r0, #1
 80107d6:	d102      	bne.n	80107de <_lseek_r+0x1e>
 80107d8:	682b      	ldr	r3, [r5, #0]
 80107da:	b103      	cbz	r3, 80107de <_lseek_r+0x1e>
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	bd38      	pop	{r3, r4, r5, pc}
 80107e0:	200046c4 	.word	0x200046c4

080107e4 <__swhatbuf_r>:
 80107e4:	b570      	push	{r4, r5, r6, lr}
 80107e6:	460e      	mov	r6, r1
 80107e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ec:	2900      	cmp	r1, #0
 80107ee:	b096      	sub	sp, #88	; 0x58
 80107f0:	4614      	mov	r4, r2
 80107f2:	461d      	mov	r5, r3
 80107f4:	da08      	bge.n	8010808 <__swhatbuf_r+0x24>
 80107f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80107fa:	2200      	movs	r2, #0
 80107fc:	602a      	str	r2, [r5, #0]
 80107fe:	061a      	lsls	r2, r3, #24
 8010800:	d410      	bmi.n	8010824 <__swhatbuf_r+0x40>
 8010802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010806:	e00e      	b.n	8010826 <__swhatbuf_r+0x42>
 8010808:	466a      	mov	r2, sp
 801080a:	f000 f895 	bl	8010938 <_fstat_r>
 801080e:	2800      	cmp	r0, #0
 8010810:	dbf1      	blt.n	80107f6 <__swhatbuf_r+0x12>
 8010812:	9a01      	ldr	r2, [sp, #4]
 8010814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801081c:	425a      	negs	r2, r3
 801081e:	415a      	adcs	r2, r3
 8010820:	602a      	str	r2, [r5, #0]
 8010822:	e7ee      	b.n	8010802 <__swhatbuf_r+0x1e>
 8010824:	2340      	movs	r3, #64	; 0x40
 8010826:	2000      	movs	r0, #0
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	b016      	add	sp, #88	; 0x58
 801082c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010830 <__smakebuf_r>:
 8010830:	898b      	ldrh	r3, [r1, #12]
 8010832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010834:	079d      	lsls	r5, r3, #30
 8010836:	4606      	mov	r6, r0
 8010838:	460c      	mov	r4, r1
 801083a:	d507      	bpl.n	801084c <__smakebuf_r+0x1c>
 801083c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010840:	6023      	str	r3, [r4, #0]
 8010842:	6123      	str	r3, [r4, #16]
 8010844:	2301      	movs	r3, #1
 8010846:	6163      	str	r3, [r4, #20]
 8010848:	b002      	add	sp, #8
 801084a:	bd70      	pop	{r4, r5, r6, pc}
 801084c:	ab01      	add	r3, sp, #4
 801084e:	466a      	mov	r2, sp
 8010850:	f7ff ffc8 	bl	80107e4 <__swhatbuf_r>
 8010854:	9900      	ldr	r1, [sp, #0]
 8010856:	4605      	mov	r5, r0
 8010858:	4630      	mov	r0, r6
 801085a:	f7ff fb73 	bl	800ff44 <_malloc_r>
 801085e:	b948      	cbnz	r0, 8010874 <__smakebuf_r+0x44>
 8010860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010864:	059a      	lsls	r2, r3, #22
 8010866:	d4ef      	bmi.n	8010848 <__smakebuf_r+0x18>
 8010868:	f023 0303 	bic.w	r3, r3, #3
 801086c:	f043 0302 	orr.w	r3, r3, #2
 8010870:	81a3      	strh	r3, [r4, #12]
 8010872:	e7e3      	b.n	801083c <__smakebuf_r+0xc>
 8010874:	4b0d      	ldr	r3, [pc, #52]	; (80108ac <__smakebuf_r+0x7c>)
 8010876:	62b3      	str	r3, [r6, #40]	; 0x28
 8010878:	89a3      	ldrh	r3, [r4, #12]
 801087a:	6020      	str	r0, [r4, #0]
 801087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010880:	81a3      	strh	r3, [r4, #12]
 8010882:	9b00      	ldr	r3, [sp, #0]
 8010884:	6163      	str	r3, [r4, #20]
 8010886:	9b01      	ldr	r3, [sp, #4]
 8010888:	6120      	str	r0, [r4, #16]
 801088a:	b15b      	cbz	r3, 80108a4 <__smakebuf_r+0x74>
 801088c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010890:	4630      	mov	r0, r6
 8010892:	f000 f863 	bl	801095c <_isatty_r>
 8010896:	b128      	cbz	r0, 80108a4 <__smakebuf_r+0x74>
 8010898:	89a3      	ldrh	r3, [r4, #12]
 801089a:	f023 0303 	bic.w	r3, r3, #3
 801089e:	f043 0301 	orr.w	r3, r3, #1
 80108a2:	81a3      	strh	r3, [r4, #12]
 80108a4:	89a0      	ldrh	r0, [r4, #12]
 80108a6:	4305      	orrs	r5, r0
 80108a8:	81a5      	strh	r5, [r4, #12]
 80108aa:	e7cd      	b.n	8010848 <__smakebuf_r+0x18>
 80108ac:	0800f575 	.word	0x0800f575

080108b0 <__ascii_mbtowc>:
 80108b0:	b082      	sub	sp, #8
 80108b2:	b901      	cbnz	r1, 80108b6 <__ascii_mbtowc+0x6>
 80108b4:	a901      	add	r1, sp, #4
 80108b6:	b142      	cbz	r2, 80108ca <__ascii_mbtowc+0x1a>
 80108b8:	b14b      	cbz	r3, 80108ce <__ascii_mbtowc+0x1e>
 80108ba:	7813      	ldrb	r3, [r2, #0]
 80108bc:	600b      	str	r3, [r1, #0]
 80108be:	7812      	ldrb	r2, [r2, #0]
 80108c0:	1e10      	subs	r0, r2, #0
 80108c2:	bf18      	it	ne
 80108c4:	2001      	movne	r0, #1
 80108c6:	b002      	add	sp, #8
 80108c8:	4770      	bx	lr
 80108ca:	4610      	mov	r0, r2
 80108cc:	e7fb      	b.n	80108c6 <__ascii_mbtowc+0x16>
 80108ce:	f06f 0001 	mvn.w	r0, #1
 80108d2:	e7f8      	b.n	80108c6 <__ascii_mbtowc+0x16>

080108d4 <__malloc_lock>:
 80108d4:	4801      	ldr	r0, [pc, #4]	; (80108dc <__malloc_lock+0x8>)
 80108d6:	f7fe bf24 	b.w	800f722 <__retarget_lock_acquire_recursive>
 80108da:	bf00      	nop
 80108dc:	200046b8 	.word	0x200046b8

080108e0 <__malloc_unlock>:
 80108e0:	4801      	ldr	r0, [pc, #4]	; (80108e8 <__malloc_unlock+0x8>)
 80108e2:	f7fe bf1f 	b.w	800f724 <__retarget_lock_release_recursive>
 80108e6:	bf00      	nop
 80108e8:	200046b8 	.word	0x200046b8

080108ec <_read_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d07      	ldr	r5, [pc, #28]	; (801090c <_read_r+0x20>)
 80108f0:	4604      	mov	r4, r0
 80108f2:	4608      	mov	r0, r1
 80108f4:	4611      	mov	r1, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	602a      	str	r2, [r5, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	f7f1 f947 	bl	8001b8e <_read>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_read_r+0x1e>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_read_r+0x1e>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	200046c4 	.word	0x200046c4

08010910 <__ascii_wctomb>:
 8010910:	b149      	cbz	r1, 8010926 <__ascii_wctomb+0x16>
 8010912:	2aff      	cmp	r2, #255	; 0xff
 8010914:	bf85      	ittet	hi
 8010916:	238a      	movhi	r3, #138	; 0x8a
 8010918:	6003      	strhi	r3, [r0, #0]
 801091a:	700a      	strbls	r2, [r1, #0]
 801091c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010920:	bf98      	it	ls
 8010922:	2001      	movls	r0, #1
 8010924:	4770      	bx	lr
 8010926:	4608      	mov	r0, r1
 8010928:	4770      	bx	lr

0801092a <abort>:
 801092a:	b508      	push	{r3, lr}
 801092c:	2006      	movs	r0, #6
 801092e:	f000 f84d 	bl	80109cc <raise>
 8010932:	2001      	movs	r0, #1
 8010934:	f7f1 f921 	bl	8001b7a <_exit>

08010938 <_fstat_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4d07      	ldr	r5, [pc, #28]	; (8010958 <_fstat_r+0x20>)
 801093c:	2300      	movs	r3, #0
 801093e:	4604      	mov	r4, r0
 8010940:	4608      	mov	r0, r1
 8010942:	4611      	mov	r1, r2
 8010944:	602b      	str	r3, [r5, #0]
 8010946:	f7f1 f967 	bl	8001c18 <_fstat>
 801094a:	1c43      	adds	r3, r0, #1
 801094c:	d102      	bne.n	8010954 <_fstat_r+0x1c>
 801094e:	682b      	ldr	r3, [r5, #0]
 8010950:	b103      	cbz	r3, 8010954 <_fstat_r+0x1c>
 8010952:	6023      	str	r3, [r4, #0]
 8010954:	bd38      	pop	{r3, r4, r5, pc}
 8010956:	bf00      	nop
 8010958:	200046c4 	.word	0x200046c4

0801095c <_isatty_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d06      	ldr	r5, [pc, #24]	; (8010978 <_isatty_r+0x1c>)
 8010960:	2300      	movs	r3, #0
 8010962:	4604      	mov	r4, r0
 8010964:	4608      	mov	r0, r1
 8010966:	602b      	str	r3, [r5, #0]
 8010968:	f7f1 f966 	bl	8001c38 <_isatty>
 801096c:	1c43      	adds	r3, r0, #1
 801096e:	d102      	bne.n	8010976 <_isatty_r+0x1a>
 8010970:	682b      	ldr	r3, [r5, #0]
 8010972:	b103      	cbz	r3, 8010976 <_isatty_r+0x1a>
 8010974:	6023      	str	r3, [r4, #0]
 8010976:	bd38      	pop	{r3, r4, r5, pc}
 8010978:	200046c4 	.word	0x200046c4

0801097c <_raise_r>:
 801097c:	291f      	cmp	r1, #31
 801097e:	b538      	push	{r3, r4, r5, lr}
 8010980:	4604      	mov	r4, r0
 8010982:	460d      	mov	r5, r1
 8010984:	d904      	bls.n	8010990 <_raise_r+0x14>
 8010986:	2316      	movs	r3, #22
 8010988:	6003      	str	r3, [r0, #0]
 801098a:	f04f 30ff 	mov.w	r0, #4294967295
 801098e:	bd38      	pop	{r3, r4, r5, pc}
 8010990:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010992:	b112      	cbz	r2, 801099a <_raise_r+0x1e>
 8010994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010998:	b94b      	cbnz	r3, 80109ae <_raise_r+0x32>
 801099a:	4620      	mov	r0, r4
 801099c:	f000 f830 	bl	8010a00 <_getpid_r>
 80109a0:	462a      	mov	r2, r5
 80109a2:	4601      	mov	r1, r0
 80109a4:	4620      	mov	r0, r4
 80109a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109aa:	f000 b817 	b.w	80109dc <_kill_r>
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d00a      	beq.n	80109c8 <_raise_r+0x4c>
 80109b2:	1c59      	adds	r1, r3, #1
 80109b4:	d103      	bne.n	80109be <_raise_r+0x42>
 80109b6:	2316      	movs	r3, #22
 80109b8:	6003      	str	r3, [r0, #0]
 80109ba:	2001      	movs	r0, #1
 80109bc:	e7e7      	b.n	801098e <_raise_r+0x12>
 80109be:	2400      	movs	r4, #0
 80109c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109c4:	4628      	mov	r0, r5
 80109c6:	4798      	blx	r3
 80109c8:	2000      	movs	r0, #0
 80109ca:	e7e0      	b.n	801098e <_raise_r+0x12>

080109cc <raise>:
 80109cc:	4b02      	ldr	r3, [pc, #8]	; (80109d8 <raise+0xc>)
 80109ce:	4601      	mov	r1, r0
 80109d0:	6818      	ldr	r0, [r3, #0]
 80109d2:	f7ff bfd3 	b.w	801097c <_raise_r>
 80109d6:	bf00      	nop
 80109d8:	20002858 	.word	0x20002858

080109dc <_kill_r>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	4d07      	ldr	r5, [pc, #28]	; (80109fc <_kill_r+0x20>)
 80109e0:	2300      	movs	r3, #0
 80109e2:	4604      	mov	r4, r0
 80109e4:	4608      	mov	r0, r1
 80109e6:	4611      	mov	r1, r2
 80109e8:	602b      	str	r3, [r5, #0]
 80109ea:	f7f1 f8b6 	bl	8001b5a <_kill>
 80109ee:	1c43      	adds	r3, r0, #1
 80109f0:	d102      	bne.n	80109f8 <_kill_r+0x1c>
 80109f2:	682b      	ldr	r3, [r5, #0]
 80109f4:	b103      	cbz	r3, 80109f8 <_kill_r+0x1c>
 80109f6:	6023      	str	r3, [r4, #0]
 80109f8:	bd38      	pop	{r3, r4, r5, pc}
 80109fa:	bf00      	nop
 80109fc:	200046c4 	.word	0x200046c4

08010a00 <_getpid_r>:
 8010a00:	f7f1 b8a3 	b.w	8001b4a <_getpid>

08010a04 <_init>:
 8010a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a06:	bf00      	nop
 8010a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a0a:	bc08      	pop	{r3}
 8010a0c:	469e      	mov	lr, r3
 8010a0e:	4770      	bx	lr

08010a10 <_fini>:
 8010a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a12:	bf00      	nop
 8010a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a16:	bc08      	pop	{r3}
 8010a18:	469e      	mov	lr, r3
 8010a1a:	4770      	bx	lr
