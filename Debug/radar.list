
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080118c0  080118c0  000218c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d3c  08011d3c  00032a2c  2**0
                  CONTENTS
  4 .ARM          00000000  08011d3c  08011d3c  00032a2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011d3c  08011d3c  00032a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d3c  08011d3c  00021d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d40  08011d40  00021d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a2c  20000000  08011d44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d2c  20002a2c  08014770  00032a2c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004758  08014770  00034758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a2c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cbe1  00000000  00000000  00032a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c85  00000000  00000000  0005f63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002710  00000000  00000000  000642c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e8  00000000  00000000  000669d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028681  00000000  00000000  00068ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000285ab  00000000  00000000  00091541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf7d  00000000  00000000  000b9aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9c4  00000000  00000000  001b6abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a2c 	.word	0x20002a2c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080118a8 	.word	0x080118a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a30 	.word	0x20002a30
 800021c:	080118a8 	.word	0x080118a8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000c32:	2301      	movs	r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	210f      	movs	r1, #15
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffdd 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c3e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c40:	68fb      	ldr	r3, [r7, #12]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000c52:	4b5c      	ldr	r3, [pc, #368]	; (8000dc4 <main+0x178>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
VTune_first_cycle_complete = 0;
 8000c58:	4b5b      	ldr	r3, [pc, #364]	; (8000dc8 <main+0x17c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
// uint8_t lsm6dslError[] ="LSM6DSL whoAmI error";
uint32_t runtime_additional_time_ms = 250;
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28


// initialize command struct and set default values
control user_input;
user_input.mode_instructed = range; // r:range, s:speed, i: idle
 8000c62:	2372      	movs	r3, #114	; 0x72
 8000c64:	76bb      	strb	r3, [r7, #26]
user_input.mode_running = none; // x:none
 8000c66:	2378      	movs	r3, #120	; 0x78
 8000c68:	76fb      	strb	r3, [r7, #27]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	833b      	strh	r3, [r7, #24]
user_input.time_out = 3600000; // will run in range mode upon start up for 1 hour before setting VCO to idle freq
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <main+0x180>)
 8000c70:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f001 f9f6 	bl	8002062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f8bd 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 fb7f 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7e:	f000 fb3f 	bl	8001300 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c82:	f000 f901 	bl	8000e88 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000c86:	f000 f985 	bl	8000f94 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000c8a:	f000 faeb 	bl	8001264 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c8e:	f000 f9fb 	bl	8001088 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000c92:	f00d fb39 	bl	800e308 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000c96:	f000 fa35 	bl	8001104 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000c9a:	f000 f9b5 	bl	8001008 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  set_DAC_for_VCO(&user_input, 0); // starts timer and sets dac output used for VCO
 8000c9e:	f107 0318 	add.w	r3, r7, #24
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fde5 	bl	8001874 <set_DAC_for_VCO>
  HAL_TIM_Base_Start(&htim1); // start timer 1 for adc1 conversion for radar mixer o/p
 8000caa:	4849      	ldr	r0, [pc, #292]	; (8000dd0 <main+0x184>)
 8000cac:	f008 fa8c 	bl	80091c8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // sets output compare for timer1, sets PA10 to toggle on timer1 register reload (40kHz)
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	4847      	ldr	r0, [pc, #284]	; (8000dd0 <main+0x184>)
 8000cb4:	f008 fb80 	bl	80093b8 <HAL_TIM_OC_Start>

  uint8_t digital_pot_buf = 0; // 0x7f is full scale, 0x3f is midscale, 0 is zero scale
 8000cb8:	2300      	movs	r3, #0
 8000cba:	75fb      	strb	r3, [r7, #23]
  uint8_t digital_pot_check = 0; // register used to read potentiometer register
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  HAL_StatusTypeDef ret;
  ret = HAL_I2C_Master_Transmit(&hi2c2, DIGITAL_POT_ADDR, &digital_pot_buf, 1, 1000);
 8000cc2:	235e      	movs	r3, #94	; 0x5e
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	f107 0217 	add.w	r2, r7, #23
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4840      	ldr	r0, [pc, #256]	; (8000dd4 <main+0x188>)
 8000cd4:	f004 f9f2 	bl	80050bc <HAL_I2C_Master_Transmit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000cde:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <main+0x18c>)
 8000ce0:	607b      	str	r3, [r7, #4]
  dev_ctx.read_reg = platform_read;
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <main+0x190>)
 8000ce4:	60bb      	str	r3, [r7, #8]
  dev_ctx.handle = &hspi1;
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <main+0x194>)
 8000ce8:	613b      	str	r3, [r7, #16]
  /* Check device ID */
    whoamI = 0;
 8000cea:	4b3e      	ldr	r3, [pc, #248]	; (8000de4 <main+0x198>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	493c      	ldr	r1, [pc, #240]	; (8000de4 <main+0x198>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff97 	bl	8000c28 <lsm6dsl_device_id_get>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // on command from PC, read command
	  if (input_received_flag)
 8000cfa:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <main+0x178>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d034      	beq.n	8000d6c <main+0x120>
	  {
		    // read command
	 	    process_input(&UserRxBufferFS,&user_input);
 8000d02:	f107 0318 	add.w	r3, r7, #24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4837      	ldr	r0, [pc, #220]	; (8000de8 <main+0x19c>)
 8000d0a:	f000 fc7d 	bl	8001608 <process_input>
	 	    // when instructed
	 	    // start the DAC for VCO according to command
	 	    // start ADC for reading input/outputting to PC
	 	    if (user_input.mode_instructed != none) {
 8000d0e:	7ebb      	ldrb	r3, [r7, #26]
 8000d10:	2b78      	cmp	r3, #120	; 0x78
 8000d12:	d028      	beq.n	8000d66 <main+0x11a>
	 	    	if (user_input.mode_instructed == range) {
 8000d14:	7ebb      	ldrb	r3, [r7, #26]
 8000d16:	2b72      	cmp	r3, #114	; 0x72
 8000d18:	d102      	bne.n	8000d20 <main+0xd4>
	 	    		VTune_first_cycle_complete = 0; // clear cycle complete flag for vtune
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <main+0x17c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
	 	    	}
	 	    	set_DAC_for_VCO(&user_input, 1);  // set DAC/ADC and calculate end time of run
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fda4 	bl	8001874 <set_DAC_for_VCO>
	 	    	if (user_input.mode_instructed == range) { // wait for 1 VTune cycle complete
 8000d2c:	7ebb      	ldrb	r3, [r7, #26]
 8000d2e:	2b72      	cmp	r3, #114	; 0x72
 8000d30:	d107      	bne.n	8000d42 <main+0xf6>
	 	    		while (VTune_first_cycle_complete != 1) {
 8000d32:	bf00      	nop
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <main+0x17c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1fb      	bne.n	8000d34 <main+0xe8>
	 	    			// stuck in loop until first dac_complete callback sets VTune_first _cycle_complete flag
	 	    		}
	 	    		HAL_Delay(2.5);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f001 fa01 	bl	8002144 <HAL_Delay>
	 	    	}
	 	    	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf_mixer_out, DMA_BUF_LEN); // start the adc with dma
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	4929      	ldr	r1, [pc, #164]	; (8000dec <main+0x1a0>)
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <main+0x1a4>)
 8000d48:	f001 fe50 	bl	80029ec <HAL_ADC_Start_DMA>
	 	    	user_input.time_out = HAL_GetTick() + (user_input.run_time_sec * 1000) + runtime_additional_time_ms;	// HAL_GetTick returns milliseconds
 8000d4c:	f001 f9ee 	bl	800212c <HAL_GetTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	8b3a      	ldrh	r2, [r7, #24]
 8000d54:	4611      	mov	r1, r2
 8000d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5a:	fb01 f202 	mul.w	r2, r1, r2
 8000d5e:	441a      	add	r2, r3
 8000d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d62:	4413      	add	r3, r2
 8000d64:	623b      	str	r3, [r7, #32]
	 	 	}
	 	        input_received_flag=0; // clear input flag
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <main+0x178>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
	  }
	  // when running, check for time elapsed of run being greater than time instructed
	  if (user_input.mode_running != idle) {
 8000d6c:	7efb      	ldrb	r3, [r7, #27]
 8000d6e:	2b69      	cmp	r3, #105	; 0x69
 8000d70:	d0c3      	beq.n	8000cfa <main+0xae>
		  if (HAL_GetTick() > user_input.time_out) {
 8000d72:	f001 f9db 	bl	800212c <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d90a      	bls.n	8000d94 <main+0x148>
			  // when run times out, set mode_instructed to i, stop the ADC and set DAC to "off mode"
			  user_input.mode_instructed = idle;
 8000d7e:	2369      	movs	r3, #105	; 0x69
 8000d80:	76bb      	strb	r3, [r7, #26]
			  HAL_ADC_Stop_DMA(&hadc1);	// stop ADC
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <main+0x1a4>)
 8000d84:	f001 ff06 	bl	8002b94 <HAL_ADC_Stop_DMA>
	 	      set_DAC_for_VCO(&user_input, 0);  // set DAC
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd70 	bl	8001874 <set_DAC_for_VCO>
		  }
		  // digital pot does not acknowledge after address sent
	  uint8_t digital_pot_buf = 0x7f; // 0x7f is full scale, 0x3f is midscale, 0 is zero scale
 8000d94:	237f      	movs	r3, #127	; 0x7f
 8000d96:	70fb      	strb	r3, [r7, #3]

	  if (ret != HAL_OK) {
 8000d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0ac      	beq.n	8000cfa <main+0xae>
		  HAL_Delay(10);
 8000da0:	200a      	movs	r0, #10
 8000da2:	f001 f9cf 	bl	8002144 <HAL_Delay>
		  ret = HAL_I2C_Master_Transmit(&hi2c2, DIGITAL_POT_ADDR, &digital_pot_buf, 1, 1000);
 8000da6:	235e      	movs	r3, #94	; 0x5e
 8000da8:	b299      	uxth	r1, r3
 8000daa:	1cfa      	adds	r2, r7, #3
 8000dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <main+0x188>)
 8000db6:	f004 f981 	bl	80050bc <HAL_I2C_Master_Transmit>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (input_received_flag)
 8000dc0:	e79b      	b.n	8000cfa <main+0xae>
 8000dc2:	bf00      	nop
 8000dc4:	20004030 	.word	0x20004030
 8000dc8:	20002d52 	.word	0x20002d52
 8000dcc:	0036ee80 	.word	0x0036ee80
 8000dd0:	20002c38 	.word	0x20002c38
 8000dd4:	20002b88 	.word	0x20002b88
 8000dd8:	0800147d 	.word	0x0800147d
 8000ddc:	080014d9 	.word	0x080014d9
 8000de0:	20002bd4 	.word	0x20002bd4
 8000de4:	20002d50 	.word	0x20002d50
 8000de8:	20003030 	.word	0x20003030
 8000dec:	20002cd0 	.word	0x20002cd0
 8000df0:	20002a48 	.word	0x20002a48

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2238      	movs	r2, #56	; 0x38
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f00d ffba 	bl	800ed7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e1a:	f006 fa0b 	bl	8007234 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000e34:	230c      	movs	r3, #12
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fa97 	bl	800737c <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e54:	f000 fd7c 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2103      	movs	r1, #3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fd9b 	bl	80079ac <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e7c:	f000 fd68 	bl	8001950 <Error_Handler>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3750      	adds	r7, #80	; 0x50
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00d ff6b 	bl	800ed7c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ea8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000eb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ef0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2c:	4817      	ldr	r0, [pc, #92]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f2e:	f001 fb9b 	bl	8002668 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000f38:	f000 fd0a 	bl	8001950 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f48:	f002 fd08 	bl	800395c <HAL_ADCEx_MultiModeConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000f52:	f000 fcfd 	bl	8001950 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_ADC1_Init+0x108>)
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f62:	237f      	movs	r3, #127	; 0x7f
 8000f64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f66:	2304      	movs	r3, #4
 8000f68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_ADC1_Init+0x104>)
 8000f74:	f001 fe7a 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000f7e:	f000 fce7 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20002a48 	.word	0x20002a48
 8000f90:	04300002 	.word	0x04300002

08000f94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2230      	movs	r2, #48	; 0x30
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00d feeb 	bl	800ed7c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_DAC1_Init+0x6c>)
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <MX_DAC1_Init+0x70>)
 8000faa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fac:	4814      	ldr	r0, [pc, #80]	; (8001000 <MX_DAC1_Init+0x6c>)
 8000fae:	f002 feec 	bl	8003d8a <HAL_DAC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fb8:	f000 fcca 	bl	8001950 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_DAC1_Init+0x6c>)
 8000fe8:	f003 f8b8 	bl	800415c <HAL_DAC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ff2:	f000 fcad 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	; 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20002b14 	.word	0x20002b14
 8001004:	50000800 	.word	0x50000800

08001008 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_I2C2_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_I2C2_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B0DCFB;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_I2C2_Init+0x74>)
 8001014:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <MX_I2C2_Init+0x7c>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_I2C2_Init+0x74>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_I2C2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_I2C2_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_I2C2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <MX_I2C2_Init+0x74>)
 8001044:	f003 ffab 	bl	8004f9e <HAL_I2C_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800104e:	f000 fc7f 	bl	8001950 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <MX_I2C2_Init+0x74>)
 8001056:	f004 fb23 	bl	80056a0 <HAL_I2CEx_ConfigAnalogFilter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001060:	f000 fc76 	bl	8001950 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_I2C2_Init+0x74>)
 8001068:	f004 fb65 	bl	8005736 <HAL_I2CEx_ConfigDigitalFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 fc6d 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20002b88 	.word	0x20002b88
 8001080:	40005800 	.word	0x40005800
 8001084:	10b0dcfb 	.word	0x10b0dcfb

08001088 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_SPI1_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_SPI1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_SPI1_Init+0x74>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_SPI1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI1_Init+0x74>)
 80010a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_SPI1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI1_Init+0x74>)
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI1_Init+0x74>)
 80010be:	2220      	movs	r2, #32
 80010c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_SPI1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI1_Init+0x74>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_SPI1_Init+0x74>)
 80010e8:	f007 f89a 	bl	8008220 <HAL_SPI_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 fc2d 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20002bd4 	.word	0x20002bd4
 8001100:	40013000 	.word	0x40013000

08001104 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09c      	sub	sp, #112	; 0x70
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2234      	movs	r2, #52	; 0x34
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00d fe1c 	bl	800ed7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001144:	4b45      	ldr	r3, [pc, #276]	; (800125c <MX_TIM1_Init+0x158>)
 8001146:	4a46      	ldr	r2, [pc, #280]	; (8001260 <MX_TIM1_Init+0x15c>)
 8001148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <MX_TIM1_Init+0x158>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b42      	ldr	r3, [pc, #264]	; (800125c <MX_TIM1_Init+0x158>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1199;
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <MX_TIM1_Init+0x158>)
 8001158:	f240 42af 	movw	r2, #1199	; 0x4af
 800115c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <MX_TIM1_Init+0x158>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001164:	4b3d      	ldr	r3, [pc, #244]	; (800125c <MX_TIM1_Init+0x158>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <MX_TIM1_Init+0x158>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001170:	483a      	ldr	r0, [pc, #232]	; (800125c <MX_TIM1_Init+0x158>)
 8001172:	f007 ffd1 	bl	8009118 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800117c:	f000 fbe8 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800118a:	4619      	mov	r1, r3
 800118c:	4833      	ldr	r0, [pc, #204]	; (800125c <MX_TIM1_Init+0x158>)
 800118e:	f008 fa9f 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001198:	f000 fbda 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <MX_TIM1_Init+0x158>)
 800119e:	f008 f8aa 	bl	80092f6 <HAL_TIM_OC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011a8:	f000 fbd2 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011ac:	2320      	movs	r3, #32
 80011ae:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011bc:	4619      	mov	r1, r3
 80011be:	4827      	ldr	r0, [pc, #156]	; (800125c <MX_TIM1_Init+0x158>)
 80011c0:	f009 f826 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ca:	f000 fbc1 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80011ce:	2330      	movs	r3, #48	; 0x30
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d6:	2300      	movs	r3, #0
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ee:	2208      	movs	r2, #8
 80011f0:	4619      	mov	r1, r3
 80011f2:	481a      	ldr	r0, [pc, #104]	; (800125c <MX_TIM1_Init+0x158>)
 80011f4:	f008 f9f2 	bl	80095dc <HAL_TIM_OC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011fe:	f000 fba7 	bl	8001950 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM1_Init+0x158>)
 8001240:	f009 f87c 	bl	800a33c <HAL_TIMEx_ConfigBreakDeadTime>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800124a:	f000 fb81 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM1_Init+0x158>)
 8001250:	f000 fd6e 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3770      	adds	r7, #112	; 0x70
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20002c38 	.word	0x20002c38
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM2_Init+0x98>)
 8001284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001288:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM2_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM2_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1543;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM2_Init+0x98>)
 8001298:	f240 6207 	movw	r2, #1543	; 0x607
 800129c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_TIM2_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_TIM2_Init+0x98>)
 80012ac:	f007 ff34 	bl	8009118 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012b6:	f000 fb4b 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM2_Init+0x98>)
 80012c8:	f008 fa02 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012d2:	f000 fb3d 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012d6:	2320      	movs	r3, #32
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM2_Init+0x98>)
 80012e4:	f008 ff94 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ee:	f000 fb2f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20002c84 	.word	0x20002c84

08001300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_DMA_Init+0x78>)
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <MX_DMA_Init+0x78>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6493      	str	r3, [r2, #72]	; 0x48
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_DMA_Init+0x78>)
 8001314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_DMA_Init+0x78>)
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	4a15      	ldr	r2, [pc, #84]	; (8001378 <MX_DMA_Init+0x78>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6493      	str	r3, [r2, #72]	; 0x48
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_DMA_Init+0x78>)
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_DMA_Init+0x78>)
 8001338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <MX_DMA_Init+0x78>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6493      	str	r3, [r2, #72]	; 0x48
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <MX_DMA_Init+0x78>)
 8001344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	200b      	movs	r0, #11
 8001354:	f002 fce5 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001358:	200b      	movs	r0, #11
 800135a:	f002 fcfc 	bl	8003d56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2038      	movs	r0, #56	; 0x38
 8001364:	f002 fcdd 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001368:	2038      	movs	r0, #56	; 0x38
 800136a:	f002 fcf4 	bl	8003d56 <HAL_NVIC_EnableIRQ>

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_GPIO_Init+0xf8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a37      	ldr	r2, [pc, #220]	; (8001474 <MX_GPIO_Init+0xf8>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a31      	ldr	r2, [pc, #196]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <MX_GPIO_Init+0xf8>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	4825      	ldr	r0, [pc, #148]	; (8001478 <MX_GPIO_Init+0xfc>)
 80013e2:	f003 fda1 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f003 fd9a 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	481b      	ldr	r0, [pc, #108]	; (8001478 <MX_GPIO_Init+0xfc>)
 800140a:	f003 fc0b 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800140e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <MX_GPIO_Init+0xfc>)
 8001428:	f003 fbfc 	bl	8004c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 800142c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f003 fbec 	bl	8004c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2006      	movs	r0, #6
 8001452:	f002 fc66 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001456:	2006      	movs	r0, #6
 8001458:	f002 fc7d 	bl	8003d56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2007      	movs	r0, #7
 8001462:	f002 fc5e 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001466:	2007      	movs	r0, #7
 8001468:	f002 fc75 	bl	8003d56 <HAL_NVIC_EnableIRQ>

}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	48000400 	.word	0x48000400

0800147c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	461a      	mov	r2, r3
 8001488:	460b      	mov	r3, r1
 800148a:	72fb      	strb	r3, [r7, #11]
 800148c:	4613      	mov	r3, r2
 800148e:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f003 fd45 	bl	8004f28 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 2);
 800149e:	f107 010b 	add.w	r1, r7, #11
 80014a2:	2302      	movs	r3, #2
 80014a4:	2201      	movs	r2, #1
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <platform_write+0x58>)
 80014a8:	f006 ff65 	bl	8008376 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) bufp, len, 1000);
 80014ac:	893a      	ldrh	r2, [r7, #8]
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <platform_write+0x58>)
 80014b6:	f006 ff5e 	bl	8008376 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f003 fd30 	bl	8004f28 <HAL_GPIO_WritePin>
  return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20002bd4 	.word	0x20002bd4

080014d8 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	72fb      	strb	r3, [r7, #11]
 80014e8:	4613      	mov	r3, r2
 80014ea:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 80014f6:	2300      	movs	r3, #0
 80014f8:	757b      	strb	r3, [r7, #21]
	// get spi state
	HAL_SPI_StateTypeDef tmp_state;
	tmp_state = HAL_SPI_GetState(handle);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f007 fb54 	bl	8008ba8 <HAL_SPI_GetState>
 8001500:	4603      	mov	r3, r0
 8001502:	75fb      	strb	r3, [r7, #23]

	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f003 fd0b 	bl	8004f28 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(handle, &tx_data, bufp, len + 1);
 8001512:	893b      	ldrh	r3, [r7, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	b29b      	uxth	r3, r3
 8001518:	f107 0114 	add.w	r1, r7, #20
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f007 f898 	bl	8008654 <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
    while(HAL_SPI_GetState(handle) != tmp_state);
 8001524:	bf00      	nop
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f007 fb3e 	bl	8008ba8 <HAL_SPI_GetState>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	4293      	cmp	r3, r2
 8001534:	d1f7      	bne.n	8001526 <platform_read+0x4e>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f003 fcf2 	bl	8004f28 <HAL_GPIO_WritePin>
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_SPI_RxCpltCallback+0x1c>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20002d51 	.word	0x20002d51

08001570 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_SPI_TxRxCpltCallback+0x1c>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20002d51 	.word	0x20002d51

08001590 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 8001598:	2320      	movs	r3, #32
 800159a:	73fb      	strb	r3, [r7, #15]
	uint8_t halfIndex = len-1;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3b01      	subs	r3, #1
 80015a0:	73bb      	strb	r3, [r7, #14]
//	memcpy(tx_buffer[halfIndex],adc1_dma_buf_mixer_out[halfIndex],len);
	CDC_Transmit_FS(&adc1_dma_buf_mixer_out[halfIndex], len);
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x30>)
 80015a8:	4413      	add	r3, r2
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	b292      	uxth	r2, r2
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00c ff6b 	bl	800e48c <CDC_Transmit_FS>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20002cd0 	.word	0x20002cd0

080015c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 80015cc:	2320      	movs	r3, #32
 80015ce:	73fb      	strb	r3, [r7, #15]
//	memcpy(tx_buffer[0],adc1_dma_buf_mixer_out[0],len);
	CDC_Transmit_FS(&adc1_dma_buf_mixer_out[0], len);
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	4803      	ldr	r0, [pc, #12]	; (80015e4 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80015d8:	f00c ff58 	bl	800e48c <CDC_Transmit_FS>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20002cd0 	.word	0x20002cd0

080015e8 <HAL_DAC_ConvCpltCallbackCh1>:


void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	VTune_first_cycle_complete = 1;
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20002d52 	.word	0x20002d52

08001608 <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b098      	sub	sp, #96	; 0x60
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	char mode[]="mode:";
 8001612:	4a5e      	ldr	r2, [pc, #376]	; (800178c <process_input+0x184>)
 8001614:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161c:	6018      	str	r0, [r3, #0]
 800161e:	3304      	adds	r3, #4
 8001620:	8019      	strh	r1, [r3, #0]
    char time[] = "time:";
 8001622:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <process_input+0x188>)
 8001624:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162c:	6018      	str	r0, [r3, #0]
 800162e:	3304      	adds	r3, #4
 8001630:	8019      	strh	r1, [r3, #0]
    char validMode[] = {'r', 's', 'm', 'i'}; // range speed map
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <process_input+0x18c>)
 8001634:	64fb      	str	r3, [r7, #76]	; 0x4c
    char word[64] = {0};
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	223c      	movs	r2, #60	; 0x3c
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00d fb9a 	bl	800ed7c <memset>
    uint8_t i = sizeof(mode);
 8001648:	2306      	movs	r3, #6
 800164a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint8_t j= sizeof(time);
 800164e:	2306      	movs	r3, #6
 8001650:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    // check input to ensure "mode:" is received
    my_strcpy(word, arr, i);
 8001654:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f8c8 	bl	80017f4 <my_strcpy>
    if (strcontains(word,mode)) {
 8001664:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f892 	bl	8001798 <strcontains>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8082 	beq.w	8001780 <process_input+0x178>
    	if (isValid(arr[i-1],validMode)) {
 800167c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001680:	3b01      	subs	r3, #1
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f8d5 	bl	800183e <isValid>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d074      	beq.n	8001784 <process_input+0x17c>
    		pControl->mode_instructed=arr[i-1];     // set mode in command
 800169a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800169e:	3b01      	subs	r3, #1
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	709a      	strb	r2, [r3, #2]
    }
    else { // invalid command
    	return;
    }
    // move index past command for mode and then '\n'
    while(arr[i]=='\n') {
 80016aa:	e004      	b.n	80016b6 <process_input+0xae>
    	i++;
 80016ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    while(arr[i]=='\n') {
 80016b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b0a      	cmp	r3, #10
 80016c2:	d0f3      	beq.n	80016ac <process_input+0xa4>
    }
    // check input to ensure "time:" is received
    my_strcpy(word, &arr[i], j);
 80016c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	18d1      	adds	r1, r2, r3
 80016cc:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f88d 	bl	80017f4 <my_strcpy>
    	if (strcontains(word,time)) {//mode:r\ntime:10
 80016da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f857 	bl	8001798 <strcontains>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d04a      	beq.n	8001786 <process_input+0x17e>
    	   // set i to index one past command for time
			i=i+j-1;
 80016f0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80016f4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80016f8:	4413      	add	r3, r2
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			j=i+1;
 8001702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001706:	3301      	adds	r3, #1
 8001708:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			// get index of last digit
			while (arr[j]!='\n'&& arr[j]!='\0') {
 800170c:	e004      	b.n	8001718 <process_input+0x110>
			j++;
 800170e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001712:	3301      	adds	r3, #1
 8001714:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			while (arr[j]!='\n'&& arr[j]!='\0') {
 8001718:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d006      	beq.n	8001734 <process_input+0x12c>
 8001726:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ec      	bne.n	800170e <process_input+0x106>
			}
			// set run time to zero
			pControl->run_time_sec=0;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	801a      	strh	r2, [r3, #0]
			// add each digits value,
			// *10 to shift current value left one digit for adding next digit
			// -48 converts from ascii to int
			while (i < j) {
 800173a:	e017      	b.n	800176c <process_input+0x164>
			pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	4413      	add	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	440b      	add	r3, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b30      	subs	r3, #48	; 0x30
 800175c:	b29a      	uxth	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	801a      	strh	r2, [r3, #0]
			i++;
 8001762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001766:	3301      	adds	r3, #1
 8001768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			while (i < j) {
 800176c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001770:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001774:	429a      	cmp	r2, r3
 8001776:	d3e1      	bcc.n	800173c <process_input+0x134>
			}
			pControl->transmit_data_flag=1; // set flag for transmit data
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	711a      	strb	r2, [r3, #4]
 800177e:	e002      	b.n	8001786 <process_input+0x17e>
    	return;
 8001780:	bf00      	nop
 8001782:	e000      	b.n	8001786 <process_input+0x17e>
    		return;
 8001784:	bf00      	nop
       }
}
 8001786:	3760      	adds	r7, #96	; 0x60
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	080118c0 	.word	0x080118c0
 8001790:	080118c8 	.word	0x080118c8
 8001794:	696d7372 	.word	0x696d7372

08001798 <strcontains>:

/*
 * Compare two strings,
 * return 1 for same string, 0 for different strings
 */
uint8_t strcontains(const char* str1,const char* str2) {
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0, strings_match = 1; // strings match = true
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	2301      	movs	r3, #1
 80017a8:	73bb      	strb	r3, [r7, #14]
	  while (str2[i]!='\0') { // while both strings have a character
 80017aa:	e00e      	b.n	80017ca <strcontains+0x32>
		  if(str1[i] != str2[i]) {		// if check character doesn't match
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	440b      	add	r3, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <strcontains+0x2c>
			  	  strings_match = 0;	// strings match = false
 80017c0:	2300      	movs	r3, #0
 80017c2:	73bb      	strb	r3, [r7, #14]
		  }
		  i++;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	3301      	adds	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
	  while (str2[i]!='\0') { // while both strings have a character
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ea      	bne.n	80017ac <strcontains+0x14>
	  }
	  if (str2[i]!='\0') { // if either string has a character
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <strcontains+0x4e>
	        strings_match = 0;	// strings match = false
 80017e2:	2300      	movs	r3, #0
 80017e4:	73bb      	strb	r3, [r7, #14]
	  }
	  return strings_match;
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <my_strcpy>:
 * copy original string into copy
 * len is original strings length
 * WARNING copy must be adequate length
 * will stop early on null byte
 */
void my_strcpy(char* cpy, const char* orig, uint8_t len) {
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	4613      	mov	r3, r2
 8001800:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
	while(orig[i]!='\0' && i<=len) {
 8001806:	e00a      	b.n	800181e <my_strcpy+0x2a>
		cpy[i]=orig[i];
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	441a      	add	r2, r3
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	440b      	add	r3, r1
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	701a      	strb	r2, [r3, #0]
		i++;
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	3301      	adds	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
	while(orig[i]!='\0' && i<=len) {
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <my_strcpy+0x3e>
 800182a:	7dfa      	ldrb	r2, [r7, #23]
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	429a      	cmp	r2, r3
 8001830:	d9ea      	bls.n	8001808 <my_strcpy+0x14>
	}
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <isValid>:

/*
 * checks the checkChar is within the validModes char*
 * returns 1 for true, 0 for false
 */
uint8_t isValid(const char checkChar,const char* validModes) {
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	6039      	str	r1, [r7, #0]
 8001848:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0;sizeof(validModes);i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
		if (checkChar==validModes[i]) {
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	429a      	cmp	r2, r3
 800185a:	d101      	bne.n	8001860 <isValid+0x22>
			return 1;
 800185c:	2301      	movs	r3, #1
 800185e:	e003      	b.n	8001868 <isValid+0x2a>
	for(i=0;sizeof(validModes);i++) {
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3301      	adds	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
		if (checkChar==validModes[i]) {
 8001866:	e7f2      	b.n	800184e <isValid+0x10>
		}
	}
	return 0;
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <set_DAC_for_VCO>:
 * 		i = idle mode, DAC sets VCO to 2.48 GHz
 * 		r = range mode, DAC set with VTune signal
 * 		s = speed mode, DAC sets VCO to 2.455 GHz
 * 		m = map, DAC set with VTune signal
 */
void set_DAC_for_VCO(control *ctrl_ptr, uint8_t cycle_DAC) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running == ctrl_ptr->mode_instructed && cycle_DAC == 0) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	78da      	ldrb	r2, [r3, #3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	789b      	ldrb	r3, [r3, #2]
 8001888:	429a      	cmp	r2, r3
 800188a:	d102      	bne.n	8001892 <set_DAC_for_VCO+0x1e>
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d050      	beq.n	8001934 <set_DAC_for_VCO+0xc0>
		return;
	}

	// if currently running in other mode, turn it off,
	if (ctrl_ptr->mode_running == range || ctrl_ptr->mode_running == map) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	78db      	ldrb	r3, [r3, #3]
 8001896:	2b72      	cmp	r3, #114	; 0x72
 8001898:	d003      	beq.n	80018a2 <set_DAC_for_VCO+0x2e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	78db      	ldrb	r3, [r3, #3]
 800189e:	2b6d      	cmp	r3, #109	; 0x6d
 80018a0:	d107      	bne.n	80018b2 <set_DAC_for_VCO+0x3e>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80018a2:	2100      	movs	r1, #0
 80018a4:	4825      	ldr	r0, [pc, #148]	; (800193c <set_DAC_for_VCO+0xc8>)
 80018a6:	f002 fbd1 	bl	800404c <HAL_DAC_Stop_DMA>
		HAL_TIM_Base_Stop(&htim2);
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <set_DAC_for_VCO+0xcc>)
 80018ac:	f007 fcfc 	bl	80092a8 <HAL_TIM_Base_Stop>
 80018b0:	e00b      	b.n	80018ca <set_DAC_for_VCO+0x56>
	} else if (ctrl_ptr->mode_running == speed || ctrl_ptr->mode_running == idle) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	78db      	ldrb	r3, [r3, #3]
 80018b6:	2b73      	cmp	r3, #115	; 0x73
 80018b8:	d003      	beq.n	80018c2 <set_DAC_for_VCO+0x4e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	2b69      	cmp	r3, #105	; 0x69
 80018c0:	d103      	bne.n	80018ca <set_DAC_for_VCO+0x56>
		HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80018c2:	2100      	movs	r1, #0
 80018c4:	481d      	ldr	r0, [pc, #116]	; (800193c <set_DAC_for_VCO+0xc8>)
 80018c6:	f002 fad5 	bl	8003e74 <HAL_DAC_Stop>
	}

	  /* Set DAC_CH_1 to CTune VTune or IDLE based on user input for mode */
	if (ctrl_ptr->mode_instructed == range || ctrl_ptr->mode_instructed == map) {
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	789b      	ldrb	r3, [r3, #2]
 80018ce:	2b72      	cmp	r3, #114	; 0x72
 80018d0:	d003      	beq.n	80018da <set_DAC_for_VCO+0x66>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	789b      	ldrb	r3, [r3, #2]
 80018d6:	2b6d      	cmp	r3, #109	; 0x6d
 80018d8:	d10c      	bne.n	80018f4 <set_DAC_for_VCO+0x80>
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <set_DAC_for_VCO+0xd0>)
 80018e4:	2100      	movs	r1, #0
 80018e6:	4815      	ldr	r0, [pc, #84]	; (800193c <set_DAC_for_VCO+0xc8>)
 80018e8:	f002 fae2 	bl	8003eb0 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 80018ec:	4814      	ldr	r0, [pc, #80]	; (8001940 <set_DAC_for_VCO+0xcc>)
 80018ee:	f007 fc6b 	bl	80091c8 <HAL_TIM_Base_Start>
 80018f2:	e01a      	b.n	800192a <set_DAC_for_VCO+0xb6>
	} else if (ctrl_ptr->mode_instructed == speed) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	789b      	ldrb	r3, [r3, #2]
 80018f8:	2b73      	cmp	r3, #115	; 0x73
 80018fa:	d10b      	bne.n	8001914 <set_DAC_for_VCO+0xa0>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80018fc:	2100      	movs	r1, #0
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <set_DAC_for_VCO+0xc8>)
 8001900:	f002 fa65 	bl	8003dce <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <set_DAC_for_VCO+0xd4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <set_DAC_for_VCO+0xc8>)
 800190e:	f002 fbe8 	bl	80040e2 <HAL_DAC_SetValue>
 8001912:	e00a      	b.n	800192a <set_DAC_for_VCO+0xb6>

	} else {
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001914:	2100      	movs	r1, #0
 8001916:	4809      	ldr	r0, [pc, #36]	; (800193c <set_DAC_for_VCO+0xc8>)
 8001918:	f002 fa59 	bl	8003dce <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, IDLE);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <set_DAC_for_VCO+0xd8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <set_DAC_for_VCO+0xc8>)
 8001926:	f002 fbdc 	bl	80040e2 <HAL_DAC_SetValue>
	}
	ctrl_ptr->mode_running = ctrl_ptr->mode_instructed;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	789a      	ldrb	r2, [r3, #2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	70da      	strb	r2, [r3, #3]
 8001932:	e000      	b.n	8001936 <set_DAC_for_VCO+0xc2>
		return;
 8001934:	bf00      	nop
}
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20002b14 	.word	0x20002b14
 8001940:	20002c84 	.word	0x20002c84
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004
 800194c:	20000000 	.word	0x20000000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x44>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x44>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6613      	str	r3, [r2, #96]	; 0x60
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x44>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x44>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x44>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x44>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b09e      	sub	sp, #120	; 0x78
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	2254      	movs	r2, #84	; 0x54
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00d f9d9 	bl	800ed7c <memset>
  if(hadc->Instance==ADC1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d2:	d160      	bne.n	8001a96 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80019da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 f9cd 	bl	8007d84 <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019f0:	f7ff ffae 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_ADC_MspInit+0xfc>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	4a29      	ldr	r2, [pc, #164]	; (8001aa0 <HAL_ADC_MspInit+0xfc>)
 80019fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_ADC_MspInit+0xfc>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_ADC_MspInit+0xfc>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_ADC_MspInit+0xfc>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_ADC_MspInit+0xfc>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = mixer_op_filtered_Pin;
 8001a24:	2301      	movs	r3, #1
 8001a26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(mixer_op_filtered_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a34:	4619      	mov	r1, r3
 8001a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3a:	f003 f8f3 	bl	8004c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_ADC_MspInit+0x104>)
 8001a42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a46:	2205      	movs	r2, #5
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a6e:	2220      	movs	r2, #32
 8001a70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a7a:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a7c:	f002 fda0 	bl	80045c0 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001a86:	f7ff ff63 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_ADC_MspInit+0x100>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3778      	adds	r7, #120	; 0x78
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	20002ab4 	.word	0x20002ab4
 8001aa8:	40020408 	.word	0x40020408

08001aac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <HAL_DAC_MspInit+0xcc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d150      	bne.n	8001b70 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_DAC_MspInit+0xd0>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <HAL_DAC_MspInit+0xd0>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_DAC_MspInit+0xd0>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_DAC_MspInit+0xd0>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <HAL_DAC_MspInit+0xd0>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_DAC_MspInit+0xd0>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001afe:	2310      	movs	r3, #16
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f003 f886 	bl	8004c24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <HAL_DAC_MspInit+0xd8>)
 8001b1c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b20:	2206      	movs	r2, #6
 8001b22:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b26:	2210      	movs	r2, #16
 8001b28:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b44:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b48:	2220      	movs	r2, #32
 8001b4a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b4e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b56:	f002 fd33 	bl	80045c0 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001b60:	f7ff fef6 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <HAL_DAC_MspInit+0xd4>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	50000800 	.word	0x50000800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	20002b28 	.word	0x20002b28
 8001b84:	40020008 	.word	0x40020008

08001b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b09e      	sub	sp, #120	; 0x78
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2254      	movs	r2, #84	; 0x54
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00d f8e7 	bl	800ed7c <memset>
  if(hi2c->Instance==I2C2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_I2C_MspInit+0xa8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d137      	bne.n	8001c28 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f006 f8dd 	bl	8007d84 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bd0:	f7ff febe 	bl	8001950 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_I2C_MspInit+0xac>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_I2C_MspInit+0xac>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_I2C_MspInit+0xac>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = I2C2_SDA_digital_pot_Pin|I2C2_SCL_digital_pot_Pin;
 8001bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf2:	2312      	movs	r3, #18
 8001bf4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f003 f80a 	bl	8004c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0xac>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_I2C_MspInit+0xac>)
 8001c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_I2C_MspInit+0xac>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3778      	adds	r7, #120	; 0x78
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005800 	.word	0x40005800
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_SPI_MspInit+0x8c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d130      	bne.n	8001cbc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_SPI_MspInit+0x90>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <HAL_SPI_MspInit+0x90>)
 8001c60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c64:	6613      	str	r3, [r2, #96]	; 0x60
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_SPI_MspInit+0x90>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_SPI_MspInit+0x90>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_SPI_MspInit+0x90>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_SPI_MspInit+0x90>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c8a:	23e0      	movs	r3, #224	; 0xe0
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f002 ffbc 	bl	8004c24 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2023      	movs	r0, #35	; 0x23
 8001cb2:	f002 f836 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cb6:	2023      	movs	r0, #35	; 0x23
 8001cb8:	f002 f84d 	bl	8003d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_TIM_Base_MspInit+0x5c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_TIM_Base_MspInit+0x60>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_TIM_Base_MspInit+0x60>)
 8001ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_TIM_Base_MspInit+0x60>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cf6:	e010      	b.n	8001d1a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d10b      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_TIM_Base_MspInit+0x60>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_TIM_Base_MspInit+0x60>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_TIM_Base_MspInit+0x60>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_TIM_MspPostInit+0x68>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11d      	bne.n	8001d8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_TIM_MspPostInit+0x6c>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_TIM_MspPostInit+0x6c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_TIM_MspPostInit+0x6c>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f002 ff4b 	bl	8004c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40021000 	.word	0x40021000

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f98c 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f003 f8ad 	bl	8004f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e06:	2002      	movs	r0, #2
 8001e08:	f003 f8a6 	bl	8004f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA1_Channel1_IRQHandler+0x10>)
 8001e16:	f002 fdb6 	bl	8004986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20002b28 	.word	0x20002b28

08001e24 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USB_LP_IRQHandler+0x10>)
 8001e2a:	f003 fdd7 	bl	80059dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20004234 	.word	0x20004234

08001e38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <SPI1_IRQHandler+0x10>)
 8001e3e:	f006 fd95 	bl	800896c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20002bd4 	.word	0x20002bd4

08001e4c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA2_Channel1_IRQHandler+0x10>)
 8001e52:	f002 fd98 	bl	8004986 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20002ab4 	.word	0x20002ab4

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_kill>:

int _kill(int pid, int sig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7a:	f00c ff55 	bl	800ed28 <__errno>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2216      	movs	r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
	return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_exit>:

void _exit (int status)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffe7 	bl	8001e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea2:	e7fe      	b.n	8001ea2 <_exit+0x12>

08001ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e00a      	b.n	8001ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb6:	f3af 8000 	nop.w
 8001eba:	4601      	mov	r1, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	60ba      	str	r2, [r7, #8]
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dbf0      	blt.n	8001eb6 <_read+0x12>
	}

return len;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e009      	b.n	8001f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	60ba      	str	r2, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf1      	blt.n	8001ef0 <_write+0x12>
	}
	return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_close>:

int _close(int file)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_isatty>:

int _isatty(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	return 1;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f00c feba 	bl	800ed28 <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20020000 	.word	0x20020000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	20002d54 	.word	0x20002d54
 8001fe8:	20004758 	.word	0x20004758

08001fec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002012:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <LoopForever+0x6>)
  ldr r1, =_edata
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <LoopForever+0xe>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopForever+0x12>)
  ldr r4, =_ebss
 800202c:	4c0b      	ldr	r4, [pc, #44]	; (800205c <LoopForever+0x16>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800203a:	f7ff ffd7 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f00c fe79 	bl	800ed34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002042:	f7fe fe03 	bl	8000c4c <main>

08002046 <LoopForever>:

LoopForever:
    b LoopForever
 8002046:	e7fe      	b.n	8002046 <LoopForever>
  ldr   r0, =_estack
 8002048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20002a2c 	.word	0x20002a2c
  ldr r2, =_sidata
 8002054:	08011d44 	.word	0x08011d44
  ldr r2, =_sbss
 8002058:	20002a2c 	.word	0x20002a2c
  ldr r4, =_ebss
 800205c:	20004758 	.word	0x20004758

08002060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC1_2_IRQHandler>

08002062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f001 fe4d 	bl	8003d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002072:	200f      	movs	r0, #15
 8002074:	f000 f80e 	bl	8002094 <HAL_InitTick>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	e001      	b.n	8002088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002084:	f7ff fc6a 	bl	800195c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002088:	79fb      	ldrb	r3, [r7, #7]

}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_InitTick+0x68>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d022      	beq.n	80020ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_InitTick+0x6c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_InitTick+0x68>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fe58 	bl	8003d72 <HAL_SYSTICK_Config>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10f      	bne.n	80020e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	d809      	bhi.n	80020e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ce:	2200      	movs	r2, #0
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	f04f 30ff 	mov.w	r0, #4294967295
 80020d6:	f001 fe24 	bl	8003d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_InitTick+0x70>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e007      	b.n	80020f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e004      	b.n	80020f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e001      	b.n	80020f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200026e0 	.word	0x200026e0
 8002100:	200026d8 	.word	0x200026d8
 8002104:	200026dc 	.word	0x200026dc

08002108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_IncTick+0x1c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_IncTick+0x20>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4413      	add	r3, r2
 8002116:	4a03      	ldr	r2, [pc, #12]	; (8002124 <HAL_IncTick+0x1c>)
 8002118:	6013      	str	r3, [r2, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20002d58 	.word	0x20002d58
 8002128:	200026e0 	.word	0x200026e0

0800212c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_GetTick+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20002d58 	.word	0x20002d58

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff ffee 	bl	800212c <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d004      	beq.n	8002168 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_Delay+0x40>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002168:	bf00      	nop
 800216a:	f7ff ffdf 	bl	800212c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	429a      	cmp	r2, r3
 8002178:	d8f7      	bhi.n	800216a <HAL_Delay+0x26>
  {
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200026e0 	.word	0x200026e0

08002188 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	609a      	str	r2, [r3, #8]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3360      	adds	r3, #96	; 0x60
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <LL_ADC_SetOffset+0x44>)
 8002212:	4013      	ands	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	4313      	orrs	r3, r2
 8002220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002228:	bf00      	nop
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	03fff000 	.word	0x03fff000

08002238 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3360      	adds	r3, #96	; 0x60
 8002246:	461a      	mov	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3360      	adds	r3, #96	; 0x60
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	431a      	orrs	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800229a:	b480      	push	{r7}
 800229c:	b087      	sub	sp, #28
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3360      	adds	r3, #96	; 0x60
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	431a      	orrs	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3360      	adds	r3, #96	; 0x60
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	615a      	str	r2, [r3, #20]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002352:	b480      	push	{r7}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3330      	adds	r3, #48	; 0x30
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	211f      	movs	r1, #31
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 011f 	and.w	r1, r3, #31
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b087      	sub	sp, #28
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3314      	adds	r3, #20
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0e5b      	lsrs	r3, r3, #25
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	4413      	add	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	0d1b      	lsrs	r3, r3, #20
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2107      	movs	r1, #7
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	401a      	ands	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0d1b      	lsrs	r3, r3, #20
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	431a      	orrs	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10a      	bne.n	800242a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	431a      	orrs	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002428:	e00a      	b.n	8002440 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	43db      	mvns	r3, r3
 8002438:	401a      	ands	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	407f0000 	.word	0x407f0000

08002450 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 031f 	and.w	r3, r3, #31
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800247c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6093      	str	r3, [r2, #8]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a4:	d101      	bne.n	80024aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f4:	d101      	bne.n	80024fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002544:	f043 0202 	orr.w	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <LL_ADC_IsEnabled+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_ADC_IsEnabled+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d101      	bne.n	8002596 <LL_ADC_IsDisableOngoing+0x18>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_IsDisableOngoing+0x1a>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e0:	f043 0210 	orr.w	r2, r3, #16
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d101      	bne.n	800260c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800262a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b08      	cmp	r3, #8
 8002654:	d101      	bne.n	800265a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1af      	b.n	80029e2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff f987 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fef1 	bl	8002490 <LL_ADC_IsDeepPowerDownEnabled>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fed7 	bl	800246c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff0c 	bl	80024e0 <LL_ADC_IsInternalRegulatorEnabled>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fef0 	bl	80024b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d8:	4b9f      	ldr	r3, [pc, #636]	; (8002958 <HAL_ADC_Init+0x2f0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	4a9f      	ldr	r2, [pc, #636]	; (800295c <HAL_ADC_Init+0x2f4>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff feee 	bl	80024e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff62 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002730:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 8148 	bne.w	80029d0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f040 8144 	bne.w	80029d0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002750:	f043 0202 	orr.w	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fefb 	bl	8002558 <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d141      	bne.n	80027ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_Init+0x114>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7a      	ldr	r2, [pc, #488]	; (8002960 <HAL_ADC_Init+0x2f8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10f      	bne.n	800279c <HAL_ADC_Init+0x134>
 800277c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002780:	f7ff feea 	bl	8002558 <LL_ADC_IsEnabled>
 8002784:	4604      	mov	r4, r0
 8002786:	4876      	ldr	r0, [pc, #472]	; (8002960 <HAL_ADC_Init+0x2f8>)
 8002788:	f7ff fee6 	bl	8002558 <LL_ADC_IsEnabled>
 800278c:	4603      	mov	r3, r0
 800278e:	4323      	orrs	r3, r4
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e012      	b.n	80027c2 <HAL_ADC_Init+0x15a>
 800279c:	4871      	ldr	r0, [pc, #452]	; (8002964 <HAL_ADC_Init+0x2fc>)
 800279e:	f7ff fedb 	bl	8002558 <LL_ADC_IsEnabled>
 80027a2:	4604      	mov	r4, r0
 80027a4:	4870      	ldr	r0, [pc, #448]	; (8002968 <HAL_ADC_Init+0x300>)
 80027a6:	f7ff fed7 	bl	8002558 <LL_ADC_IsEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	431c      	orrs	r4, r3
 80027ae:	486f      	ldr	r0, [pc, #444]	; (800296c <HAL_ADC_Init+0x304>)
 80027b0:	f7ff fed2 	bl	8002558 <LL_ADC_IsEnabled>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4323      	orrs	r3, r4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ce:	d004      	beq.n	80027da <HAL_ADC_Init+0x172>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a62      	ldr	r2, [pc, #392]	; (8002960 <HAL_ADC_Init+0x2f8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Init+0x176>
 80027da:	4a65      	ldr	r2, [pc, #404]	; (8002970 <HAL_ADC_Init+0x308>)
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_Init+0x178>
 80027de:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_ADC_Init+0x30c>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7ff fcce 	bl	8002188 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7f5b      	ldrb	r3, [r3, #29]
 80027f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002802:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800280a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002816:	2b01      	cmp	r3, #1
 8002818:	d106      	bne.n	8002828 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	3b01      	subs	r3, #1
 8002820:	045b      	lsls	r3, r3, #17
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	4b4b      	ldr	r3, [pc, #300]	; (8002978 <HAL_ADC_Init+0x310>)
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff febe 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002878:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fedf 	bl	8002642 <LL_ADC_INJ_IsConversionOngoing>
 8002884:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d17f      	bne.n	800298c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d17c      	bne.n	800298c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002896:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800289e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ae:	f023 0302 	bic.w	r3, r3, #2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6911      	ldr	r1, [r2, #16]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028f2:	e013      	b.n	800291c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002902:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002914:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002918:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002922:	2b01      	cmp	r3, #1
 8002924:	d12a      	bne.n	800297c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002942:	4311      	orrs	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002948:	430a      	orrs	r2, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e019      	b.n	800298c <HAL_ADC_Init+0x324>
 8002958:	200026d8 	.word	0x200026d8
 800295c:	053e2d63 	.word	0x053e2d63
 8002960:	50000100 	.word	0x50000100
 8002964:	50000400 	.word	0x50000400
 8002968:	50000500 	.word	0x50000500
 800296c:	50000600 	.word	0x50000600
 8002970:	50000300 	.word	0x50000300
 8002974:	50000700 	.word	0x50000700
 8002978:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d10c      	bne.n	80029ae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f023 010f 	bic.w	r1, r3, #15
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
 80029ac:	e007      	b.n	80029be <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 020f 	bic.w	r2, r2, #15
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ce:	e007      	b.n	80029e0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop

080029ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a00:	d004      	beq.n	8002a0c <HAL_ADC_Start_DMA+0x20>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a5a      	ldr	r2, [pc, #360]	; (8002b70 <HAL_ADC_Start_DMA+0x184>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_Start_DMA+0x24>
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_ADC_Start_DMA+0x188>)
 8002a0e:	e000      	b.n	8002a12 <HAL_ADC_Start_DMA+0x26>
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_ADC_Start_DMA+0x18c>)
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fd1c 	bl	8002450 <LL_ADC_GetMultimode>
 8002a18:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fde8 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 809b 	bne.w	8002b62 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x4e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e096      	b.n	8002b68 <HAL_ADC_Start_DMA+0x17c>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_ADC_Start_DMA+0x190>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d008      	beq.n	8002a5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	d17a      	bne.n	8002b54 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fe00 	bl	8003664 <ADC_Enable>
 8002a64:	4603      	mov	r3, r0
 8002a66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d16d      	bne.n	8002b4a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_ADC_Start_DMA+0x184>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0xb4>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3b      	ldr	r2, [pc, #236]	; (8002b80 <HAL_ADC_Start_DMA+0x194>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d002      	beq.n	8002a9c <HAL_ADC_Start_DMA+0xb0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	e003      	b.n	8002aa4 <HAL_ADC_Start_DMA+0xb8>
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_ADC_Start_DMA+0x198>)
 8002a9e:	e001      	b.n	8002aa4 <HAL_ADC_Start_DMA+0xb8>
 8002aa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	f023 0206 	bic.w	r2, r3, #6
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ad6:	e002      	b.n	8002ade <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_ADC_Start_DMA+0x19c>)
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_ADC_Start_DMA+0x1a0>)
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_ADC_Start_DMA+0x1a4>)
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	221c      	movs	r2, #28
 8002afc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0210 	orr.w	r2, r2, #16
 8002b14:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3340      	adds	r3, #64	; 0x40
 8002b30:	4619      	mov	r1, r3
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f001 fdeb 	bl	8004710 <HAL_DMA_Start_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fd2e 	bl	80025a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b48:	e00d      	b.n	8002b66 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002b52:	e008      	b.n	8002b66 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b60:	e001      	b.n	8002b66 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	50000100 	.word	0x50000100
 8002b74:	50000300 	.word	0x50000300
 8002b78:	50000700 	.word	0x50000700
 8002b7c:	50000600 	.word	0x50000600
 8002b80:	50000500 	.word	0x50000500
 8002b84:	50000400 	.word	0x50000400
 8002b88:	080037e7 	.word	0x080037e7
 8002b8c:	080038bf 	.word	0x080038bf
 8002b90:	080038db 	.word	0x080038db

08002b94 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Stop_DMA+0x16>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e051      	b.n	8002c4e <HAL_ADC_Stop_DMA+0xba>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fc99 	bl	80034ec <ADC_ConversionStop>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d13f      	bne.n	8002c44 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d10f      	bne.n	8002c02 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 fe0d 	bl	8004806 <HAL_DMA_Abort>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0210 	bic.w	r2, r2, #16
 8002c10:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fd85 	bl	8003728 <ADC_Disable>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e002      	b.n	8002c2a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fd7f 	bl	8003728 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f043 0201 	orr.w	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0b6      	sub	sp, #216	; 0xd8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x24>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f000 bc13 	b.w	80034b6 <HAL_ADC_ConfigChannel+0x84a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fca9 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 83f3 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7ff fb4b 	bl	8002352 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fc97 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8002cc6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fcb7 	bl	8002642 <LL_ADC_INJ_IsConversionOngoing>
 8002cd4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 81d9 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 81d4 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cf4:	d10f      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7ff fb52 	bl	80023aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff faf9 	bl	8002306 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d14:	e00e      	b.n	8002d34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f7ff fb41 	bl	80023aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fae9 	bl	8002306 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d022      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d66:	f7ff fa43 	bl	80021f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7ff fa8f 	bl	800229a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	7f1b      	ldrb	r3, [r3, #28]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x126>
 8002d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d90:	e000      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x128>
 8002d92:	2300      	movs	r3, #0
 8002d94:	461a      	mov	r2, r3
 8002d96:	f7ff fa9b 	bl	80022d0 <LL_ADC_SetOffsetSaturation>
 8002d9a:	e17b      	b.n	8003094 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fa48 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x15c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa3d 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	e01e      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x19a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fa32 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e004      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x1b2>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	e018      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1e4>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fa01 	bl	8002264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f9e5 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x222>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f9da 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	e01e      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x260>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff f9cf 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e004      	b.n	8002eca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x278>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	e018      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x2aa>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e004      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d106      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f99e 	bl	8002264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f982 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2e8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f977 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	e01e      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x326>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f96c 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e004      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x33e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	e016      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x36c>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f93d 	bl	8002264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2103      	movs	r1, #3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f921 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x3aa>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f916 	bl	8002238 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	0e9b      	lsrs	r3, r3, #26
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	e017      	b.n	8003046 <HAL_ADC_ConfigChannel+0x3da>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2103      	movs	r1, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f90b 	bl	8002238 <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800302e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003030:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800303c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_ADC_ConfigChannel+0x3f2>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	e011      	b.n	8003082 <HAL_ADC_ConfigChannel+0x416>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800306c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800306e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003076:	2320      	movs	r3, #32
 8003078:	e003      	b.n	8003082 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800307a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003082:	429a      	cmp	r2, r3
 8003084:	d106      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f8e8 	bl	8002264 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fa5d 	bl	8002558 <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f040 813d 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7ff f9a4 	bl	8002400 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4aa2      	ldr	r2, [pc, #648]	; (8003348 <HAL_ADC_ConfigChannel+0x6dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	f040 812e 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x480>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e019      	b.n	8003120 <HAL_ADC_ConfigChannel+0x4b4>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2b09      	cmp	r3, #9
 8003118:	bf94      	ite	ls
 800311a:	2301      	movls	r3, #1
 800311c:	2300      	movhi	r3, #0
 800311e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	2b00      	cmp	r3, #0
 8003122:	d079      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x4d4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	3301      	adds	r3, #1
 8003138:	069b      	lsls	r3, r3, #26
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313e:	e015      	b.n	800316c <HAL_ADC_ConfigChannel+0x500>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800315c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_ConfigChannel+0x520>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	e017      	b.n	80031bc <HAL_ADC_ConfigChannel+0x550>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x576>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	051b      	lsls	r3, r3, #20
 80031e0:	e018      	b.n	8003214 <HAL_ADC_ConfigChannel+0x5a8>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003214:	430b      	orrs	r3, r1
 8003216:	e07e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x5c8>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0e9b      	lsrs	r3, r3, #26
 800322a:	3301      	adds	r3, #1
 800322c:	069b      	lsls	r3, r3, #26
 800322e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003232:	e015      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5f4>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e003      	b.n	8003258 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3301      	adds	r3, #1
 800325a:	069b      	lsls	r3, r3, #26
 800325c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x614>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	e017      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x644>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	61fb      	str	r3, [r7, #28]
  return result;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x670>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	3301      	adds	r3, #1
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	3b1e      	subs	r3, #30
 80032d4:	051b      	lsls	r3, r3, #20
 80032d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032da:	e01b      	b.n	8003314 <HAL_ADC_ConfigChannel+0x6a8>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	613b      	str	r3, [r7, #16]
  return result;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	3b1e      	subs	r3, #30
 800330e:	051b      	lsls	r3, r3, #20
 8003310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003314:	430b      	orrs	r3, r1
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	6892      	ldr	r2, [r2, #8]
 800331a:	4619      	mov	r1, r3
 800331c:	f7ff f845 	bl	80023aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_ADC_ConfigChannel+0x6e0>)
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80be 	beq.w	80034aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003336:	d004      	beq.n	8003342 <HAL_ADC_ConfigChannel+0x6d6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_ADC_ConfigChannel+0x6e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10a      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x6ec>
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_ADC_ConfigChannel+0x6e8>)
 8003344:	e009      	b.n	800335a <HAL_ADC_ConfigChannel+0x6ee>
 8003346:	bf00      	nop
 8003348:	407f0000 	.word	0x407f0000
 800334c:	80080000 	.word	0x80080000
 8003350:	50000100 	.word	0x50000100
 8003354:	50000300 	.word	0x50000300
 8003358:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe ff3a 	bl	80021d4 <LL_ADC_GetCommonPathInternalCh>
 8003360:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_ADC_ConfigChannel+0x858>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x70c>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_ADC_ConfigChannel+0x85c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d13a      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800337c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d134      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338c:	d005      	beq.n	800339a <HAL_ADC_ConfigChannel+0x72e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_ADC_ConfigChannel+0x860>)
 8003394:	4293      	cmp	r3, r2
 8003396:	f040 8085 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a2:	d004      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x742>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a49      	ldr	r2, [pc, #292]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x746>
 80033ae:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 80033b0:	e000      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x748>
 80033b2:	4a43      	ldr	r2, [pc, #268]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 80033b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fe fef5 	bl	80021ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c4:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_ADC_ConfigChannel+0x86c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	4a44      	ldr	r2, [pc, #272]	; (80034dc <HAL_ADC_ConfigChannel+0x870>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033de:	e002      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ec:	e05a      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <HAL_ADC_ConfigChannel+0x874>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d125      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x7d8>
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11f      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a31      	ldr	r2, [pc, #196]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d104      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x7ac>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <HAL_ADC_ConfigChannel+0x878>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d047      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d004      	beq.n	800342c <HAL_ADC_ConfigChannel+0x7c0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x7c4>
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 800342e:	e000      	b.n	8003432 <HAL_ADC_ConfigChannel+0x7c6>
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 8003432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe feb6 	bl	80021ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003442:	e031      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <HAL_ADC_ConfigChannel+0x87c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12d      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800344e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d127      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x80c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x810>
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 800347a:	e000      	b.n	800347e <HAL_ADC_ConfigChannel+0x812>
 800347c:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe fe90 	bl	80021ae <LL_ADC_SetCommonPathInternalCh>
 800348e:	e00c      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034a2:	e002      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	37d8      	adds	r7, #216	; 0xd8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	50000700 	.word	0x50000700
 80034c4:	c3210000 	.word	0xc3210000
 80034c8:	90c00010 	.word	0x90c00010
 80034cc:	50000600 	.word	0x50000600
 80034d0:	50000100 	.word	0x50000100
 80034d4:	50000300 	.word	0x50000300
 80034d8:	200026d8 	.word	0x200026d8
 80034dc:	053e2d63 	.word	0x053e2d63
 80034e0:	c7520000 	.word	0xc7520000
 80034e4:	50000500 	.word	0x50000500
 80034e8:	cb840000 	.word	0xcb840000

080034ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff f876 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8003508:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f897 	bl	8002642 <LL_ADC_INJ_IsConversionOngoing>
 8003514:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8098 	beq.w	8003654 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d02a      	beq.n	8003588 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7f5b      	ldrb	r3, [r3, #29]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d126      	bne.n	8003588 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f1b      	ldrb	r3, [r3, #28]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d122      	bne.n	8003588 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003546:	e014      	b.n	8003572 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4a45      	ldr	r2, [pc, #276]	; (8003660 <ADC_ConversionStop+0x174>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d90d      	bls.n	800356c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003554:	f043 0210 	orr.w	r2, r3, #16
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e074      	b.n	8003656 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d1e3      	bne.n	8003548 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d014      	beq.n	80035b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f82e 	bl	80025f4 <LL_ADC_REG_IsConversionOngoing>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ffeb 	bl	800257e <LL_ADC_IsDisableOngoing>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff f80a 	bl	80025cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d014      	beq.n	80035e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f83d 	bl	8002642 <LL_ADC_INJ_IsConversionOngoing>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe ffd3 	bl	800257e <LL_ADC_IsDisableOngoing>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f819 	bl	800261a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d005      	beq.n	80035fa <ADC_ConversionStop+0x10e>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d105      	bne.n	8003600 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035f4:	230c      	movs	r3, #12
 80035f6:	617b      	str	r3, [r7, #20]
        break;
 80035f8:	e005      	b.n	8003606 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035fa:	2308      	movs	r3, #8
 80035fc:	617b      	str	r3, [r7, #20]
        break;
 80035fe:	e002      	b.n	8003606 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003600:	2304      	movs	r3, #4
 8003602:	617b      	str	r3, [r7, #20]
        break;
 8003604:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003606:	f7fe fd91 	bl	800212c <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800360c:	e01b      	b.n	8003646 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800360e:	f7fe fd8d 	bl	800212c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b05      	cmp	r3, #5
 800361a:	d914      	bls.n	8003646 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1dc      	bne.n	800360e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	a33fffff 	.word	0xa33fffff

08003664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe ff71 	bl	8002558 <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d14d      	bne.n	8003718 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b28      	ldr	r3, [pc, #160]	; (8003724 <ADC_Enable+0xc0>)
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e039      	b.n	800371a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe ff2c 	bl	8002508 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036b0:	f7fe fd3c 	bl	800212c <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036b6:	e028      	b.n	800370a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe ff4b 	bl	8002558 <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe ff1b 	bl	8002508 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036d2:	f7fe fd2b 	bl	800212c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d914      	bls.n	800370a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d00d      	beq.n	800370a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d1cf      	bne.n	80036b8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	8000003f 	.word	0x8000003f

08003728 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe ff22 	bl	800257e <LL_ADC_IsDisableOngoing>
 800373a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe ff09 	bl	8002558 <LL_ADC_IsEnabled>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d047      	beq.n	80037dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d144      	bne.n	80037dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030d 	and.w	r3, r3, #13
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10c      	bne.n	800377a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fee3 	bl	8002530 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2203      	movs	r2, #3
 8003770:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003772:	f7fe fcdb 	bl	800212c <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003778:	e029      	b.n	80037ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	f043 0210 	orr.w	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e023      	b.n	80037de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003796:	f7fe fcc9 	bl	800212c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d914      	bls.n	80037ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	f043 0210 	orr.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1dc      	bne.n	8003796 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d14b      	bne.n	8003898 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d021      	beq.n	800385e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fd84 	bl	800232c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d032      	beq.n	8003890 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d12b      	bne.n	8003890 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11f      	bne.n	8003890 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c
 800385c:	e018      	b.n	8003890 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d111      	bne.n	8003890 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7fd fe7d 	bl	8001590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003896:	e00e      	b.n	80038b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff f9d6 	bl	8002c56 <HAL_ADC_ErrorCallback>
}
 80038aa:	e004      	b.n	80038b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7fd fe79 	bl	80015c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff f9a8 	bl	8002c56 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <LL_ADC_IsEnabled>:
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <LL_ADC_IsEnabled+0x18>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_ADC_IsEnabled+0x1a>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_REG_IsConversionOngoing>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d101      	bne.n	800394c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b0a1      	sub	sp, #132	; 0x84
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003976:	2302      	movs	r3, #2
 8003978:	e0e7      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003982:	2300      	movs	r3, #0
 8003984:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003986:	2300      	movs	r3, #0
 8003988:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003992:	d102      	bne.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003994:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	e009      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d102      	bne.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039a4:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	e001      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0be      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ffb0 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 80039d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ffaa 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80a0 	bne.w	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 809c 	bne.w	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f8:	d004      	beq.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a04:	4b56      	ldr	r3, [pc, #344]	; (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a06:	e000      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d04b      	beq.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a26:	035b      	lsls	r3, r3, #13
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a38:	d004      	beq.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a45      	ldr	r2, [pc, #276]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d10f      	bne.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a48:	f7ff ff61 	bl	800390e <LL_ADC_IsEnabled>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	4841      	ldr	r0, [pc, #260]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a50:	f7ff ff5d 	bl	800390e <LL_ADC_IsEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4323      	orrs	r3, r4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e012      	b.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a64:	483c      	ldr	r0, [pc, #240]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a66:	f7ff ff52 	bl	800390e <LL_ADC_IsEnabled>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	483b      	ldr	r0, [pc, #236]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a6e:	f7ff ff4e 	bl	800390e <LL_ADC_IsEnabled>
 8003a72:	4603      	mov	r3, r0
 8003a74:	431c      	orrs	r4, r3
 8003a76:	483c      	ldr	r0, [pc, #240]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a78:	f7ff ff49 	bl	800390e <LL_ADC_IsEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d056      	beq.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a96:	f023 030f 	bic.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aaa:	e047      	b.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac0:	d004      	beq.n	8003acc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10f      	bne.n	8003aec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ad0:	f7ff ff1d 	bl	800390e <LL_ADC_IsEnabled>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	481f      	ldr	r0, [pc, #124]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ad8:	f7ff ff19 	bl	800390e <LL_ADC_IsEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	4323      	orrs	r3, r4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e012      	b.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003aec:	481a      	ldr	r0, [pc, #104]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003aee:	f7ff ff0e 	bl	800390e <LL_ADC_IsEnabled>
 8003af2:	4604      	mov	r4, r0
 8003af4:	4819      	ldr	r0, [pc, #100]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003af6:	f7ff ff0a 	bl	800390e <LL_ADC_IsEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	431c      	orrs	r4, r3
 8003afe:	481a      	ldr	r0, [pc, #104]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b00:	f7ff ff05 	bl	800390e <LL_ADC_IsEnabled>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4323      	orrs	r3, r4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d012      	beq.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b1e:	f023 030f 	bic.w	r3, r3, #15
 8003b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b26:	e009      	b.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b3a:	e000      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3784      	adds	r7, #132	; 0x84
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	50000100 	.word	0x50000100
 8003b58:	50000400 	.word	0x50000400
 8003b5c:	50000500 	.word	0x50000500
 8003b60:	50000300 	.word	0x50000300
 8003b64:	50000700 	.word	0x50000700
 8003b68:	50000600 	.word	0x50000600

08003b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9e:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	60d3      	str	r3, [r2, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <__NVIC_GetPriorityGrouping+0x18>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 0307 	and.w	r3, r3, #7
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	db0b      	blt.n	8003bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	4907      	ldr	r1, [pc, #28]	; (8003c08 <__NVIC_EnableIRQ+0x38>)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000e100 	.word	0xe000e100

08003c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	db0a      	blt.n	8003c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	490c      	ldr	r1, [pc, #48]	; (8003c58 <__NVIC_SetPriority+0x4c>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c34:	e00a      	b.n	8003c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4908      	ldr	r1, [pc, #32]	; (8003c5c <__NVIC_SetPriority+0x50>)
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	3b04      	subs	r3, #4
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	440b      	add	r3, r1
 8003c4a:	761a      	strb	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	; 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f1c3 0307 	rsb	r3, r3, #7
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf28      	it	cs
 8003c7e:	2304      	movcs	r3, #4
 8003c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d902      	bls.n	8003c90 <NVIC_EncodePriority+0x30>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3b03      	subs	r3, #3
 8003c8e:	e000      	b.n	8003c92 <NVIC_EncodePriority+0x32>
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43d9      	mvns	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	4313      	orrs	r3, r2
         );
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd8:	d301      	bcc.n	8003cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00f      	b.n	8003cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <SysTick_Config+0x40>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f7ff ff8e 	bl	8003c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <SysTick_Config+0x40>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <SysTick_Config+0x40>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000e010 	.word	0xe000e010

08003d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff29 	bl	8003b6c <__NVIC_SetPriorityGrouping>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d30:	f7ff ff40 	bl	8003bb4 <__NVIC_GetPriorityGrouping>
 8003d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff ff90 	bl	8003c60 <NVIC_EncodePriority>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff5f 	bl	8003c0c <__NVIC_SetPriority>
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff33 	bl	8003bd0 <__NVIC_EnableIRQ>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffa4 	bl	8003cc8 <SysTick_Config>
 8003d80:	4603      	mov	r3, r0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e014      	b.n	8003dc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd fe7d 	bl	8001aac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	795b      	ldrb	r3, [r3, #5]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_DAC_Start+0x16>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e043      	b.n	8003e6c <HAL_DAC_Start+0x9e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7fe f99b 	bl	8002144 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d11d      	bne.n	8003e5e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e014      	b.n	8003e5e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2102      	movs	r1, #2
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d107      	bne.n	8003e5e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0202 	orr.w	r2, r2, #2
 8003e5c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43da      	mvns	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	400a      	ands	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7fe f952 	bl	8002144 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	795b      	ldrb	r3, [r3, #5]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_DAC_Start_DMA+0x1e>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e0ae      	b.n	800402c <HAL_DAC_Start_DMA+0x17c>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d12f      	bne.n	8003f40 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a53      	ldr	r2, [pc, #332]	; (8004034 <HAL_DAC_Start_DMA+0x184>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a52      	ldr	r2, [pc, #328]	; (8004038 <HAL_DAC_Start_DMA+0x188>)
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a51      	ldr	r2, [pc, #324]	; (800403c <HAL_DAC_Start_DMA+0x18c>)
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f06:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d013      	beq.n	8003f36 <HAL_DAC_Start_DMA+0x86>
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d845      	bhi.n	8003fa0 <HAL_DAC_Start_DMA+0xf0>
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_DAC_Start_DMA+0x72>
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d005      	beq.n	8003f2c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003f20:	e03e      	b.n	8003fa0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3308      	adds	r3, #8
 8003f28:	613b      	str	r3, [r7, #16]
        break;
 8003f2a:	e03c      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
        break;
 8003f34:	e037      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	613b      	str	r3, [r7, #16]
        break;
 8003f3e:	e032      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a3e      	ldr	r2, [pc, #248]	; (8004040 <HAL_DAC_Start_DMA+0x190>)
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a3d      	ldr	r2, [pc, #244]	; (8004044 <HAL_DAC_Start_DMA+0x194>)
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <HAL_DAC_Start_DMA+0x198>)
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f66:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d013      	beq.n	8003f96 <HAL_DAC_Start_DMA+0xe6>
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d817      	bhi.n	8003fa4 <HAL_DAC_Start_DMA+0xf4>
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_DAC_Start_DMA+0xd2>
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d005      	beq.n	8003f8c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003f80:	e010      	b.n	8003fa4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3314      	adds	r3, #20
 8003f88:	613b      	str	r3, [r7, #16]
        break;
 8003f8a:	e00c      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3318      	adds	r3, #24
 8003f92:	613b      	str	r3, [r7, #16]
        break;
 8003f94:	e007      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	331c      	adds	r3, #28
 8003f9c:	613b      	str	r3, [r7, #16]
        break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003fa4:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6898      	ldr	r0, [r3, #8]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	f000 fba3 	bl	8004710 <HAL_DMA_Start_IT>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	75fb      	strb	r3, [r7, #23]
 8003fce:	e010      	b.n	8003ff2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003fde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68d8      	ldr	r0, [r3, #12]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	f000 fb91 	bl	8004710 <HAL_DMA_Start_IT>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2201      	movs	r2, #1
 800400c:	409a      	lsls	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004016:	2001      	movs	r0, #1
 8004018:	f7fe f894 	bl	8002144 <HAL_Delay>
 800401c:	e005      	b.n	800402a <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	080044ad 	.word	0x080044ad
 8004038:	080044cf 	.word	0x080044cf
 800403c:	080044eb 	.word	0x080044eb
 8004040:	08004555 	.word	0x08004555
 8004044:	08004577 	.word	0x08004577
 8004048:	08004593 	.word	0x08004593

0800404c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43da      	mvns	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	400a      	ands	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004090:	2001      	movs	r0, #1
 8004092:	f7fe f857 	bl	8002144 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fbb0 	bl	8004806 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e00c      	b.n	80040d2 <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fba2 	bl	8004806 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80040d0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b087      	sub	sp, #28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3308      	adds	r3, #8
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e004      	b.n	800411c <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	3314      	adds	r3, #20
 800411a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	461a      	mov	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	795b      	ldrb	r3, [r3, #5]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_DAC_ConfigChannel+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e192      	b.n	800449a <HAL_DAC_ConfigChannel+0x33e>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2202      	movs	r2, #2
 800417e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d174      	bne.n	8004272 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004188:	f7fd ffd0 	bl	800212c <HAL_GetTick>
 800418c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d134      	bne.n	80041fe <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004194:	e011      	b.n	80041ba <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004196:	f7fd ffc9 	bl	800212c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d90a      	bls.n	80041ba <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f043 0208 	orr.w	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2203      	movs	r2, #3
 80041b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e16f      	b.n	800449a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80041c8:	2001      	movs	r0, #1
 80041ca:	f7fd ffbb 	bl	8002144 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
 80041d8:	e01e      	b.n	8004218 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80041da:	f7fd ffa7 	bl	800212c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d90a      	bls.n	80041fe <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f043 0208 	orr.w	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2203      	movs	r2, #3
 80041f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e14d      	b.n	800449a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	2b00      	cmp	r3, #0
 8004206:	dbe8      	blt.n	80041da <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004208:	2001      	movs	r0, #1
 800420a:	f7fd ff9b 	bl	8002144 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	ea02 0103 	and.w	r1, r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	409a      	lsls	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	21ff      	movs	r1, #255	; 0xff
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	ea02 0103 	and.w	r1, r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	409a      	lsls	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d11d      	bne.n	80042b6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	221f      	movs	r2, #31
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	4013      	ands	r3, r2
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	4313      	orrs	r3, r2
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2207      	movs	r2, #7
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	4013      	ands	r3, r2
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80042da:	2300      	movs	r3, #0
 80042dc:	623b      	str	r3, [r7, #32]
 80042de:	e00f      	b.n	8004300 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d102      	bne.n	80042ee <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80042e8:	2301      	movs	r3, #1
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	e008      	b.n	8004300 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80042f6:	2301      	movs	r3, #1
 80042f8:	623b      	str	r3, [r7, #32]
 80042fa:	e001      	b.n	8004300 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	4013      	ands	r3, r2
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	791b      	ldrb	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_DAC_ConfigChannel+0x1d8>
 800432e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004332:	e000      	b.n	8004336 <HAL_DAC_ConfigChannel+0x1da>
 8004334:	2300      	movs	r3, #0
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434e:	4013      	ands	r3, r2
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	795b      	ldrb	r3, [r3, #5]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d102      	bne.n	8004360 <HAL_DAC_ConfigChannel+0x204>
 800435a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800435e:	e000      	b.n	8004362 <HAL_DAC_ConfigChannel+0x206>
 8004360:	2300      	movs	r3, #0
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d114      	bne.n	80043a2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004378:	f003 fcb4 	bl	8007ce4 <HAL_RCC_GetHCLKFreq>
 800437c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4a48      	ldr	r2, [pc, #288]	; (80044a4 <HAL_DAC_ConfigChannel+0x348>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d904      	bls.n	8004390 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e00f      	b.n	80043b0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	4a45      	ldr	r2, [pc, #276]	; (80044a8 <HAL_DAC_ConfigChannel+0x34c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d90a      	bls.n	80043ae <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
 80043a0:	e006      	b.n	80043b0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	4313      	orrs	r3, r2
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	e000      	b.n	80043b0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80043ae:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	4313      	orrs	r3, r2
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	400a      	ands	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	4013      	ands	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441a:	4313      	orrs	r3, r2
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	22c0      	movs	r2, #192	; 0xc0
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43da      	mvns	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	400a      	ands	r2, r1
 8004440:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	ea02 0103 	and.w	r1, r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	409a      	lsls	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3728      	adds	r7, #40	; 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	09896800 	.word	0x09896800
 80044a8:	04c4b400 	.word	0x04c4b400

080044ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7fd f894 	bl	80015e8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	711a      	strb	r2, [r3, #4]
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fe28 	bl	8004132 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f043 0204 	orr.w	r2, r3, #4
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff fe1e 	bl	8004146 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	711a      	strb	r2, [r3, #4]
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff ffd8 	bl	8004518 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	711a      	strb	r2, [r3, #4]
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff ffd1 	bl	800452c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ffc7 	bl	8004540 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	711a      	strb	r2, [r3, #4]
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e08d      	b.n	80046ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <HAL_DMA_Init+0x138>)
 80045da:	429a      	cmp	r2, r3
 80045dc:	d80f      	bhi.n	80045fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b45      	ldr	r3, [pc, #276]	; (80046fc <HAL_DMA_Init+0x13c>)
 80045e6:	4413      	add	r3, r2
 80045e8:	4a45      	ldr	r2, [pc, #276]	; (8004700 <HAL_DMA_Init+0x140>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	009a      	lsls	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a42      	ldr	r2, [pc, #264]	; (8004704 <HAL_DMA_Init+0x144>)
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
 80045fc:	e00e      	b.n	800461c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	4b40      	ldr	r3, [pc, #256]	; (8004708 <HAL_DMA_Init+0x148>)
 8004606:	4413      	add	r3, r2
 8004608:	4a3d      	ldr	r2, [pc, #244]	; (8004700 <HAL_DMA_Init+0x140>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	009a      	lsls	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a3c      	ldr	r2, [pc, #240]	; (800470c <HAL_DMA_Init+0x14c>)
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa76 	bl	8004b60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467c:	d102      	bne.n	8004684 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004698:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <HAL_DMA_Init+0x104>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d80c      	bhi.n	80046c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa96 	bl	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	e008      	b.n	80046d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40020407 	.word	0x40020407
 80046fc:	bffdfff8 	.word	0xbffdfff8
 8004700:	cccccccd 	.word	0xcccccccd
 8004704:	40020000 	.word	0x40020000
 8004708:	bffdfbf8 	.word	0xbffdfbf8
 800470c:	40020400 	.word	0x40020400

08004710 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_DMA_Start_IT+0x20>
 800472c:	2302      	movs	r3, #2
 800472e:	e066      	b.n	80047fe <HAL_DMA_Start_IT+0xee>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d155      	bne.n	80047f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f9bb 	bl	8004ae4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 020e 	orr.w	r2, r2, #14
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e00f      	b.n	80047a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 020a 	orr.w	r2, r2, #10
 80047a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e005      	b.n	80047fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
 80047fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d005      	beq.n	800482a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2204      	movs	r2, #4
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e037      	b.n	800489a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 020e 	bic.w	r2, r2, #14
 8004838:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004848:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f003 021f 	and.w	r2, r3, #31
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004876:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004898:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d00d      	beq.n	80048ec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e047      	b.n	800497c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 020e 	bic.w	r2, r2, #14
 80048fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f202 	lsl.w	r2, r1, r2
 800492e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004938:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004950:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800495a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
    }
  }
  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2204      	movs	r2, #4
 80049a8:	409a      	lsls	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d026      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x7a>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d021      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0204 	bic.w	r2, r2, #4
 80049d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f003 021f 	and.w	r2, r3, #31
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2104      	movs	r1, #4
 80049e8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d071      	beq.n	8004ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049fe:	e06c      	b.n	8004ada <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2202      	movs	r2, #2
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02e      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d029      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 020a 	bic.w	r2, r2, #10
 8004a3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	f003 021f 	and.w	r2, r3, #31
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2102      	movs	r1, #2
 8004a52:	fa01 f202 	lsl.w	r2, r1, r2
 8004a56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d038      	beq.n	8004ada <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a70:	e033      	b.n	8004ada <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d02a      	beq.n	8004adc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d025      	beq.n	8004adc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 020e 	bic.w	r2, r2, #14
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2101      	movs	r1, #1
 8004aae:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
}
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004afa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f003 021f 	and.w	r2, r3, #31
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d108      	bne.n	8004b44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b42:	e007      	b.n	8004b54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d802      	bhi.n	8004b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e001      	b.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	3b08      	subs	r3, #8
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	009a      	lsls	r2, r3, #2
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40020407 	.word	0x40020407
 8004bcc:	40020800 	.word	0x40020800
 8004bd0:	40020820 	.word	0x40020820
 8004bd4:	cccccccd 	.word	0xcccccccd
 8004bd8:	40020880 	.word	0x40020880

08004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2201      	movs	r2, #1
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	1000823f 	.word	0x1000823f
 8004c20:	40020940 	.word	0x40020940

08004c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c32:	e15a      	b.n	8004eea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 814c 	beq.w	8004ee4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d005      	beq.n	8004c64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d130      	bne.n	8004cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0201 	and.w	r2, r3, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d017      	beq.n	8004d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d123      	bne.n	8004d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	08da      	lsrs	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3208      	adds	r2, #8
 8004d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	08da      	lsrs	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3208      	adds	r2, #8
 8004d50:	6939      	ldr	r1, [r7, #16]
 8004d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80a6 	beq.w	8004ee4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d98:	4b5b      	ldr	r3, [pc, #364]	; (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	4a5a      	ldr	r2, [pc, #360]	; (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6613      	str	r3, [r2, #96]	; 0x60
 8004da4:	4b58      	ldr	r3, [pc, #352]	; (8004f08 <HAL_GPIO_Init+0x2e4>)
 8004da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db0:	4a56      	ldr	r2, [pc, #344]	; (8004f0c <HAL_GPIO_Init+0x2e8>)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	3302      	adds	r3, #2
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	220f      	movs	r2, #15
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dda:	d01f      	beq.n	8004e1c <HAL_GPIO_Init+0x1f8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a4c      	ldr	r2, [pc, #304]	; (8004f10 <HAL_GPIO_Init+0x2ec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d019      	beq.n	8004e18 <HAL_GPIO_Init+0x1f4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a4b      	ldr	r2, [pc, #300]	; (8004f14 <HAL_GPIO_Init+0x2f0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_GPIO_Init+0x1f0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a4a      	ldr	r2, [pc, #296]	; (8004f18 <HAL_GPIO_Init+0x2f4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00d      	beq.n	8004e10 <HAL_GPIO_Init+0x1ec>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a49      	ldr	r2, [pc, #292]	; (8004f1c <HAL_GPIO_Init+0x2f8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <HAL_GPIO_Init+0x1e8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a48      	ldr	r2, [pc, #288]	; (8004f20 <HAL_GPIO_Init+0x2fc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_GPIO_Init+0x1e4>
 8004e04:	2305      	movs	r3, #5
 8004e06:	e00a      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e08:	2306      	movs	r3, #6
 8004e0a:	e008      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e006      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e10:	2303      	movs	r3, #3
 8004e12:	e004      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e002      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_GPIO_Init+0x1fa>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	f002 0203 	and.w	r2, r2, #3
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	4093      	lsls	r3, r2
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e2e:	4937      	ldr	r1, [pc, #220]	; (8004f0c <HAL_GPIO_Init+0x2e8>)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	3302      	adds	r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e60:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e8a:	4a26      	ldr	r2, [pc, #152]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e90:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eba:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ede:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <HAL_GPIO_Init+0x300>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f ae9d 	bne.w	8004c34 <HAL_GPIO_Init+0x10>
  }
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	48000400 	.word	0x48000400
 8004f14:	48000800 	.word	0x48000800
 8004f18:	48000c00 	.word	0x48000c00
 8004f1c:	48001000 	.word	0x48001000
 8004f20:	48001400 	.word	0x48001400
 8004f24:	40010400 	.word	0x40010400

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f44:	e002      	b.n	8004f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f6e:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f806 	bl	8004f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e081      	b.n	80050b4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fc fddf 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2224      	movs	r2, #36	; 0x24
 8004fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ffe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	e006      	b.n	8005026 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005024:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d104      	bne.n	8005038 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005036:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69d9      	ldr	r1, [r3, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	461a      	mov	r2, r3
 80050c8:	460b      	mov	r3, r1
 80050ca:	817b      	strh	r3, [r7, #10]
 80050cc:	4613      	mov	r3, r2
 80050ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b20      	cmp	r3, #32
 80050da:	f040 80da 	bne.w	8005292 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_I2C_Master_Transmit+0x30>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0d3      	b.n	8005294 <HAL_I2C_Master_Transmit+0x1d8>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050f4:	f7fd f81a 	bl	800212c <HAL_GetTick>
 80050f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2319      	movs	r3, #25
 8005100:	2201      	movs	r2, #1
 8005102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f8f0 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0be      	b.n	8005294 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2221      	movs	r2, #33	; 0x21
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2210      	movs	r2, #16
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	893a      	ldrh	r2, [r7, #8]
 8005136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	2bff      	cmp	r3, #255	; 0xff
 8005146:	d90e      	bls.n	8005166 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	b2da      	uxtb	r2, r3
 8005154:	8979      	ldrh	r1, [r7, #10]
 8005156:	4b51      	ldr	r3, [pc, #324]	; (800529c <HAL_I2C_Master_Transmit+0x1e0>)
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa6c 	bl	800563c <I2C_TransferConfig>
 8005164:	e06c      	b.n	8005240 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	b2da      	uxtb	r2, r3
 8005176:	8979      	ldrh	r1, [r7, #10]
 8005178:	4b48      	ldr	r3, [pc, #288]	; (800529c <HAL_I2C_Master_Transmit+0x1e0>)
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa5b 	bl	800563c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005186:	e05b      	b.n	8005240 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	6a39      	ldr	r1, [r7, #32]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f8ed 	bl	800536c <I2C_WaitOnTXISFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e07b      	b.n	8005294 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d034      	beq.n	8005240 <HAL_I2C_Master_Transmit+0x184>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d130      	bne.n	8005240 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2180      	movs	r1, #128	; 0x80
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f87f 	bl	80052ec <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e04d      	b.n	8005294 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2bff      	cmp	r3, #255	; 0xff
 8005200:	d90e      	bls.n	8005220 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	b2da      	uxtb	r2, r3
 800520e:	8979      	ldrh	r1, [r7, #10]
 8005210:	2300      	movs	r3, #0
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fa0f 	bl	800563c <I2C_TransferConfig>
 800521e:	e00f      	b.n	8005240 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	b2da      	uxtb	r2, r3
 8005230:	8979      	ldrh	r1, [r7, #10]
 8005232:	2300      	movs	r3, #0
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f9fe 	bl	800563c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d19e      	bne.n	8005188 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	6a39      	ldr	r1, [r7, #32]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f8cc 	bl	80053ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e01a      	b.n	8005294 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2220      	movs	r2, #32
 8005264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005272:	400b      	ands	r3, r1
 8005274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e000      	b.n	8005294 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
  }
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	80002000 	.word	0x80002000
 80052a0:	fe00e800 	.word	0xfe00e800

080052a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d103      	bne.n	80052c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d007      	beq.n	80052e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	619a      	str	r2, [r3, #24]
  }
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052fc:	e022      	b.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d01e      	beq.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fc ff11 	bl	800212c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d113      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	f043 0220 	orr.w	r2, r3, #32
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e00f      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	d0cd      	beq.n	80052fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005378:	e02c      	b.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f870 	bl	8005464 <I2C_IsErrorOccurred>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e02a      	b.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d01e      	beq.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fc fec9 	bl	800212c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d113      	bne.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e007      	b.n	80053e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d1cb      	bne.n	800537a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053f8:	e028      	b.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f830 	bl	8005464 <I2C_IsErrorOccurred>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e026      	b.n	800545c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fc fe8d 	bl	800212c <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d113      	bne.n	800544c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e007      	b.n	800545c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d1cf      	bne.n	80053fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d075      	beq.n	800557c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2210      	movs	r2, #16
 8005496:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005498:	e056      	b.n	8005548 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d052      	beq.n	8005548 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fc fe43 	bl	800212c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <I2C_IsErrorOccurred+0x54>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d147      	bne.n	8005548 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054da:	d12e      	bne.n	800553a <I2C_IsErrorOccurred+0xd6>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e2:	d02a      	beq.n	800553a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d027      	beq.n	800553a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054fa:	f7fc fe17 	bl	800212c <HAL_GetTick>
 80054fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005500:	e01b      	b.n	800553a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005502:	f7fc fe13 	bl	800212c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b19      	cmp	r3, #25
 800550e:	d914      	bls.n	800553a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d1dc      	bne.n	8005502 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b20      	cmp	r3, #32
 8005554:	d003      	beq.n	800555e <I2C_IsErrorOccurred+0xfa>
 8005556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800555a:	2b00      	cmp	r3, #0
 800555c:	d09d      	beq.n	800549a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800555e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2220      	movs	r2, #32
 800556c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	f043 0304 	orr.w	r3, r3, #4
 8005574:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f043 0308 	orr.w	r3, r3, #8
 80055b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	f043 0302 	orr.w	r3, r3, #2
 80055d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01c      	beq.n	800562c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fe56 	bl	80052a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6859      	ldr	r1, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <I2C_IsErrorOccurred+0x1d4>)
 8005604:	400b      	ands	r3, r1
 8005606:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	431a      	orrs	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005630:	4618      	mov	r0, r3
 8005632:	3728      	adds	r7, #40	; 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	fe00e800 	.word	0xfe00e800

0800563c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	817b      	strh	r3, [r7, #10]
 800564a:	4613      	mov	r3, r2
 800564c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005654:	7a7b      	ldrb	r3, [r7, #9]
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800565c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	4313      	orrs	r3, r2
 8005666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800566a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	0d5b      	lsrs	r3, r3, #21
 8005676:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800567a:	4b08      	ldr	r3, [pc, #32]	; (800569c <I2C_TransferConfig+0x60>)
 800567c:	430b      	orrs	r3, r1
 800567e:	43db      	mvns	r3, r3
 8005680:	ea02 0103 	and.w	r1, r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	03ff63ff 	.word	0x03ff63ff

080056a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d138      	bne.n	8005728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e032      	b.n	800572a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b20      	cmp	r3, #32
 800574a:	d139      	bne.n	80057c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005756:	2302      	movs	r3, #2
 8005758:	e033      	b.n	80057c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2224      	movs	r2, #36	; 0x24
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0201 	bic.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005788:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d0:	b08b      	sub	sp, #44	; 0x2c
 80057d2:	af06      	add	r7, sp, #24
 80057d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0d7      	b.n	8005990 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f008 ff91 	bl	800e71c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2203      	movs	r2, #3
 80057fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f004 fe61 	bl	800a4ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	e04c      	b.n	80058ac <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	440b      	add	r3, r1
 8005822:	3301      	adds	r3, #1
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	7bfa      	ldrb	r2, [r7, #15]
 800583a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800583c:	7bfa      	ldrb	r2, [r7, #15]
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	b298      	uxth	r0, r3
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	440b      	add	r3, r1
 800584e:	3336      	adds	r3, #54	; 0x36
 8005850:	4602      	mov	r2, r0
 8005852:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	440b      	add	r3, r1
 8005864:	3303      	adds	r3, #3
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	440b      	add	r3, r1
 8005878:	3338      	adds	r3, #56	; 0x38
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	333c      	adds	r3, #60	; 0x3c
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	440b      	add	r3, r1
 80058a0:	3340      	adds	r3, #64	; 0x40
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	3301      	adds	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3ad      	bcc.n	8005812 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
 80058ba:	e044      	b.n	8005946 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	440b      	add	r3, r1
 80058ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058d2:	7bfa      	ldrb	r2, [r7, #15]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	440b      	add	r3, r1
 80058e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058e4:	7bfa      	ldrb	r2, [r7, #15]
 80058e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	440b      	add	r3, r1
 80058f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	440b      	add	r3, r1
 8005922:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	3301      	adds	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d3b5      	bcc.n	80058bc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	687e      	ldr	r6, [r7, #4]
 8005958:	466d      	mov	r5, sp
 800595a:	f106 0410 	add.w	r4, r6, #16
 800595e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	1d33      	adds	r3, r6, #4
 8005968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800596a:	6838      	ldr	r0, [r7, #0]
 800596c:	f004 fdca 	bl	800a504 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d102      	bne.n	800598e <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fc29 	bl	80071e0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005998 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_PCD_Start+0x16>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e012      	b.n	80059d4 <HAL_PCD_Start+0x3c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f004 fd70 	bl	800a4a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f006 ff89 	bl	800c8dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f006 ff8e 	bl	800c90a <USB_ReadInterrupts>
 80059ee:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb26 	bl	800604c <PCD_EP_ISR_Handler>

    return;
 8005a00:	e110      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1e:	b292      	uxth	r2, r2
 8005a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f008 ff0a 	bl	800e83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f8fc 	bl	8005c2a <HAL_PCD_SetAddress>

    return;
 8005a32:	e0f7      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00c      	beq.n	8005a58 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a50:	b292      	uxth	r2, r2
 8005a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005a56:	e0e5      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a74:	b292      	uxth	r2, r2
 8005a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005a7a:	e0d3      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d034      	beq.n	8005af0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0204 	bic.w	r2, r2, #4
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0208 	bic.w	r2, r2, #8
 8005ab0:	b292      	uxth	r2, r2
 8005ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d107      	bne.n	8005ad0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f009 f8ac 	bl	800ec28 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f008 feed 	bl	800e8b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005aee:	e099      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d027      	beq.n	8005b4a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0208 	orr.w	r2, r2, #8
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b24:	b292      	uxth	r2, r2
 8005b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0204 	orr.w	r2, r2, #4
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f008 fe9a 	bl	800e87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005b48:	e06c      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d040      	beq.n	8005bd6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b66:	b292      	uxth	r2, r2
 8005b68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d12b      	bne.n	8005bce <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0204 	orr.w	r2, r2, #4
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0208 	orr.w	r2, r2, #8
 8005ba0:	b292      	uxth	r2, r2
 8005ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f009 f82e 	bl	800ec28 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005bcc:	e02a      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f008 fe54 	bl	800e87c <HAL_PCD_SuspendCallback>
    return;
 8005bd4:	e026      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00f      	beq.n	8005c00 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bf2:	b292      	uxth	r2, r2
 8005bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f008 fe12 	bl	800e822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005bfe:	e011      	b.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00c      	beq.n	8005c24 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005c22:	bf00      	nop
  }
}
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	460b      	mov	r3, r1
 8005c34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_PCD_SetAddress+0x1a>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e013      	b.n	8005c6c <HAL_PCD_SetAddress+0x42>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f006 fe29 	bl	800c8b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	70fb      	strb	r3, [r7, #3]
 8005c86:	460b      	mov	r3, r1
 8005c88:	803b      	strh	r3, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da0e      	bge.n	8005cb8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	705a      	strb	r2, [r3, #1]
 8005cb6:	e00e      	b.n	8005cd6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	f003 0207 	and.w	r2, r3, #7
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ce2:	883a      	ldrh	r2, [r7, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	78ba      	ldrb	r2, [r7, #2]
 8005cec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d00:	78bb      	ldrb	r3, [r7, #2]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d102      	bne.n	8005d0c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_PCD_EP_Open+0xa6>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e00e      	b.n	8005d38 <HAL_PCD_EP_Open+0xc4>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f004 fc0d 	bl	800a548 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005d36:	7afb      	ldrb	r3, [r7, #11]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da0e      	bge.n	8005d72 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	705a      	strb	r2, [r3, #1]
 8005d70:	e00e      	b.n	8005d90 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 0207 	and.w	r2, r3, #7
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_PCD_EP_Close+0x6a>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e00e      	b.n	8005dc8 <HAL_PCD_EP_Close+0x88>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f004 ff59 	bl	800ac70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	f003 0207 	and.w	r2, r3, #7
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2200      	movs	r2, #0
 8005e08:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e1c:	7afb      	ldrb	r3, [r7, #11]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6979      	ldr	r1, [r7, #20]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f005 f90c 	bl	800b04a <USB_EPStartXfer>
 8005e32:	e005      	b.n	8005e40 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6979      	ldr	r1, [r7, #20]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f005 f905 	bl	800b04a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	f003 0207 	and.w	r2, r3, #7
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005e6c:	681b      	ldr	r3, [r3, #0]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
 8005e86:	460b      	mov	r3, r1
 8005e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6979      	ldr	r1, [r7, #20]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f005 f8b1 	bl	800b04a <USB_EPStartXfer>
 8005ee8:	e005      	b.n	8005ef6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f005 f8aa 	bl	800b04a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	f003 0207 	and.w	r2, r3, #7
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d901      	bls.n	8005f1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e03e      	b.n	8005f9c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da0e      	bge.n	8005f44 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	4413      	add	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	705a      	strb	r2, [r3, #1]
 8005f42:	e00c      	b.n	8005f5e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_PCD_EP_SetStall+0x7e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e00e      	b.n	8005f9c <HAL_PCD_EP_SetStall+0x9c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f006 fb92 	bl	800c6b6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d901      	bls.n	8005fc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e040      	b.n	8006044 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da0e      	bge.n	8005fe8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4413      	add	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	705a      	strb	r2, [r3, #1]
 8005fe6:	e00e      	b.n	8006006 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	f003 0207 	and.w	r2, r3, #7
 8005fee:	4613      	mov	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_PCD_EP_ClrStall+0x82>
 8006022:	2302      	movs	r3, #2
 8006024:	e00e      	b.n	8006044 <HAL_PCD_EP_ClrStall+0xa0>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	4618      	mov	r0, r3
 8006036:	f006 fb8f 	bl	800c758 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b096      	sub	sp, #88	; 0x58
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006054:	e39c      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800605e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006062:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006070:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 815e 	bne.w	8006336 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800607a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b00      	cmp	r3, #0
 8006084:	d150      	bne.n	8006128 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	81fb      	strh	r3, [r7, #14]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	89fb      	ldrh	r3, [r7, #14]
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3328      	adds	r3, #40	; 0x28
 80060ae:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4413      	add	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80060d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	441a      	add	r2, r3
 80060e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80060e6:	2100      	movs	r1, #0
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f008 fb80 	bl	800e7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 834a 	beq.w	8006790 <PCD_EP_ISR_Handler+0x744>
 80060fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 8345 	bne.w	8006790 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006112:	b2da      	uxtb	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	b292      	uxth	r2, r2
 800611a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006126:	e333      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800612e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800613a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800613e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006142:	2b00      	cmp	r3, #0
 8006144:	d032      	beq.n	80061ac <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	4413      	add	r3, r2
 8006160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800617c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800617e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006180:	b29b      	uxth	r3, r3
 8006182:	f006 fc14 	bl	800c9ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29a      	uxth	r2, r3
 800618e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006192:	4013      	ands	r3, r2
 8006194:	823b      	strh	r3, [r7, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	8a3a      	ldrh	r2, [r7, #16]
 800619c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061a0:	b292      	uxth	r2, r2
 80061a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f008 faf5 	bl	800e794 <HAL_PCD_SetupStageCallback>
 80061aa:	e2f1      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80061ac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f280 82ed 	bge.w	8006790 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80061c2:	4013      	ands	r3, r2
 80061c4:	83fb      	strh	r3, [r7, #30]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	8bfa      	ldrh	r2, [r7, #30]
 80061cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061d0:	b292      	uxth	r2, r2
 80061d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	4413      	add	r3, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80061fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d019      	beq.n	8006238 <PCD_EP_ISR_Handler+0x1ec>
 8006204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d015      	beq.n	8006238 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006212:	6959      	ldr	r1, [r3, #20]
 8006214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006216:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800621c:	b29b      	uxth	r3, r3
 800621e:	f006 fbc6 	bl	800c9ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	441a      	add	r2, r3
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006230:	2100      	movs	r1, #0
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f008 fac0 	bl	800e7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 82a3 	bne.w	8006790 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	4413      	add	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b3e      	cmp	r3, #62	; 0x3e
 8006270:	d918      	bls.n	80062a4 <PCD_EP_ISR_Handler+0x258>
 8006272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
 800627a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <PCD_EP_ISR_Handler+0x240>
 8006286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006288:	3b01      	subs	r3, #1
 800628a:	647b      	str	r3, [r7, #68]	; 0x44
 800628c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29b      	uxth	r3, r3
 8006294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629c:	b29a      	uxth	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e029      	b.n	80062f8 <PCD_EP_ISR_Handler+0x2ac>
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <PCD_EP_ISR_Handler+0x286>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e012      	b.n	80062f8 <PCD_EP_ISR_Handler+0x2ac>
 80062d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	647b      	str	r3, [r7, #68]	; 0x44
 80062da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <PCD_EP_ISR_Handler+0x2a0>
 80062e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e8:	3301      	adds	r3, #1
 80062ea:	647b      	str	r3, [r7, #68]	; 0x44
 80062ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	029b      	lsls	r3, r3, #10
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006308:	827b      	strh	r3, [r7, #18]
 800630a:	8a7b      	ldrh	r3, [r7, #18]
 800630c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006310:	827b      	strh	r3, [r7, #18]
 8006312:	8a7b      	ldrh	r3, [r7, #18]
 8006314:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006318:	827b      	strh	r3, [r7, #18]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	8a7b      	ldrh	r3, [r7, #18]
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
 8006334:	e22c      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800634a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800634e:	2b00      	cmp	r3, #0
 8006350:	f280 80f6 	bge.w	8006540 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29a      	uxth	r2, r3
 8006366:	f640 738f 	movw	r3, #3983	; 0xf8f
 800636a:	4013      	ands	r3, r2
 800636c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006386:	b292      	uxth	r2, r2
 8006388:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800638a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a2:	7b1b      	ldrb	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d123      	bne.n	80063f0 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80063d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 808e 	beq.w	80064f6 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	6959      	ldr	r1, [r3, #20]
 80063e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e4:	88da      	ldrh	r2, [r3, #6]
 80063e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063ea:	f006 fae0 	bl	800c9ae <USB_ReadPMA>
 80063ee:	e082      	b.n	80064f6 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80063f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f2:	78db      	ldrb	r3, [r3, #3]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d10a      	bne.n	800640e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80063f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063fc:	461a      	mov	r2, r3
 80063fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9d3 	bl	80067ac <HAL_PCD_EP_DB_Receive>
 8006406:	4603      	mov	r3, r0
 8006408:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800640c:	e073      	b.n	80064f6 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006428:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d022      	beq.n	80064b2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	4413      	add	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	4413      	add	r3, r2
 8006486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006490:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006494:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006498:	2b00      	cmp	r3, #0
 800649a:	d02c      	beq.n	80064f6 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	6959      	ldr	r1, [r3, #20]
 80064a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a6:	891a      	ldrh	r2, [r3, #8]
 80064a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064ac:	f006 fa7f 	bl	800c9ae <USB_ReadPMA>
 80064b0:	e021      	b.n	80064f6 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	4413      	add	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	4413      	add	r3, r2
 80064cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80064da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ec:	895a      	ldrh	r2, [r3, #10]
 80064ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064f2:	f006 fa5c 	bl	800c9ae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	69da      	ldr	r2, [r3, #28]
 80064fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064fe:	441a      	add	r2, r3
 8006500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006502:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800650c:	441a      	add	r2, r3
 800650e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006510:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <PCD_EP_ISR_Handler+0x4da>
 800651a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800651e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	429a      	cmp	r2, r3
 8006524:	d206      	bcs.n	8006534 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f008 f943 	bl	800e7b8 <HAL_PCD_DataOutStageCallback>
 8006532:	e005      	b.n	8006540 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800653a:	4618      	mov	r0, r3
 800653c:	f004 fd85 	bl	800b04a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006540:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8121 	beq.w	8006790 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800654e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	4413      	add	r3, r2
 8006560:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	f000 80a2 	beq.w	80066ec <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	2200      	movs	r2, #0
 80065ac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80065ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b0:	7b1b      	ldrb	r3, [r3, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8093 	beq.w	80066de <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d046      	beq.n	8006652 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d126      	bne.n	800661a <PCD_EP_ISR_Handler+0x5ce>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	4413      	add	r3, r2
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
 80065e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	00da      	lsls	r2, r3, #3
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065f2:	623b      	str	r3, [r7, #32]
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006612:	b29a      	uxth	r2, r3
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e061      	b.n	80066de <PCD_EP_ISR_Handler+0x692>
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	785b      	ldrb	r3, [r3, #1]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d15d      	bne.n	80066de <PCD_EP_ISR_Handler+0x692>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006630:	b29b      	uxth	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	4413      	add	r3, r2
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	00da      	lsls	r2, r3, #3
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	4413      	add	r3, r2
 8006644:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	2200      	movs	r2, #0
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e045      	b.n	80066de <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d126      	bne.n	80066ae <PCD_EP_ISR_Handler+0x662>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006674:	4413      	add	r3, r2
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	00da      	lsls	r2, r3, #3
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	4413      	add	r3, r2
 8006682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006692:	b29a      	uxth	r2, r3
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e017      	b.n	80066de <PCD_EP_ISR_Handler+0x692>
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d113      	bne.n	80066de <PCD_EP_ISR_Handler+0x692>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066be:	b29b      	uxth	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	4413      	add	r3, r2
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	00da      	lsls	r2, r3, #3
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	2200      	movs	r2, #0
 80066dc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f008 f882 	bl	800e7ee <HAL_PCD_DataInStageCallback>
 80066ea:	e051      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80066ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d144      	bne.n	8006782 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	4413      	add	r3, r2
 8006712:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800671c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006728:	429a      	cmp	r2, r3
 800672a:	d907      	bls.n	800673c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	699a      	ldr	r2, [r3, #24]
 8006730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006738:	619a      	str	r2, [r3, #24]
 800673a:	e002      	b.n	8006742 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800673c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673e:	2200      	movs	r2, #0
 8006740:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f008 f84c 	bl	800e7ee <HAL_PCD_DataInStageCallback>
 8006756:	e01b      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006760:	441a      	add	r2, r3
 8006762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006764:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800676e:	441a      	add	r2, r3
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006772:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800677a:	4618      	mov	r0, r3
 800677c:	f004 fc65 	bl	800b04a <USB_EPStartXfer>
 8006780:	e006      	b.n	8006790 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006782:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006786:	461a      	mov	r2, r3
 8006788:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f917 	bl	80069be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006798:	b29b      	uxth	r3, r3
 800679a:	b21b      	sxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	f6ff ac5a 	blt.w	8006056 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3758      	adds	r7, #88	; 0x58
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d07c      	beq.n	80068be <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	4413      	add	r3, r2
 80067de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	8b7b      	ldrh	r3, [r7, #26]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d306      	bcc.n	8006802 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	8b7b      	ldrh	r3, [r7, #26]
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	619a      	str	r2, [r3, #24]
 8006800:	e002      	b.n	8006808 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2200      	movs	r2, #0
 8006806:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d123      	bne.n	8006858 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	833b      	strh	r3, [r7, #24]
 800682c:	8b3b      	ldrh	r3, [r7, #24]
 800682e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006832:	833b      	strh	r3, [r7, #24]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	441a      	add	r2, r3
 8006842:	8b3b      	ldrh	r3, [r7, #24]
 8006844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	b29b      	uxth	r3, r3
 8006856:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01f      	beq.n	80068a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687c:	82fb      	strh	r3, [r7, #22]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8afb      	ldrh	r3, [r7, #22]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068a2:	8b7b      	ldrh	r3, [r7, #26]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8085 	beq.w	80069b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6959      	ldr	r1, [r3, #20]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	891a      	ldrh	r2, [r3, #8]
 80068b6:	8b7b      	ldrh	r3, [r7, #26]
 80068b8:	f006 f879 	bl	800c9ae <USB_ReadPMA>
 80068bc:	e07a      	b.n	80069b4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	4413      	add	r3, r2
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	8b7b      	ldrh	r3, [r7, #26]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d306      	bcc.n	80068fc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	8b7b      	ldrh	r3, [r7, #26]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	619a      	str	r2, [r3, #24]
 80068fa:	e002      	b.n	8006902 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d123      	bne.n	8006952 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	83fb      	strh	r3, [r7, #30]
 8006926:	8bfb      	ldrh	r3, [r7, #30]
 8006928:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800692c:	83fb      	strh	r3, [r7, #30]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8bfb      	ldrh	r3, [r7, #30]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11f      	bne.n	800699c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	83bb      	strh	r3, [r7, #28]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	8bbb      	ldrh	r3, [r7, #28]
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800699c:	8b7b      	ldrh	r3, [r7, #26]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6959      	ldr	r1, [r3, #20]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	895a      	ldrh	r2, [r3, #10]
 80069ae:	8b7b      	ldrh	r3, [r7, #26]
 80069b0:	f005 fffd 	bl	800c9ae <USB_ReadPMA>
    }
  }

  return count;
 80069b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b0a2      	sub	sp, #136	; 0x88
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 81c5 	beq.w	8006d62 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4413      	add	r3, r2
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	4413      	add	r3, r2
 80069f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d907      	bls.n	8006a1c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a14:	1ad2      	subs	r2, r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	619a      	str	r2, [r3, #24]
 8006a1a:	e002      	b.n	8006a22 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 80b9 	bne.w	8006b9e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d126      	bne.n	8006a82 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	4413      	add	r3, r2
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	00da      	lsls	r2, r3, #3
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e01a      	b.n	8006ab8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d116      	bne.n	8006ab8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	4413      	add	r3, r2
 8006aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	00da      	lsls	r2, r3, #3
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	4413      	add	r3, r2
 8006aac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d126      	bne.n	8006b14 <HAL_PCD_EP_DB_Transmit+0x156>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	4413      	add	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	00da      	lsls	r2, r3, #3
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	e017      	b.n	8006b44 <HAL_PCD_EP_DB_Transmit+0x186>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d113      	bne.n	8006b44 <HAL_PCD_EP_DB_Transmit+0x186>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	00da      	lsls	r2, r3, #3
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2200      	movs	r2, #0
 8006b42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f007 fe4f 	bl	800e7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 82d2 	beq.w	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	827b      	strh	r3, [r7, #18]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	8a7b      	ldrh	r3, [r7, #18]
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
 8006b9c:	e2b0      	b.n	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d021      	beq.n	8006bec <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	441a      	add	r2, r3
 8006bd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	f040 8284 	bne.w	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c00:	441a      	add	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	69da      	ldr	r2, [r3, #28]
 8006c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c0e:	441a      	add	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d309      	bcc.n	8006c34 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2c:	1ad2      	subs	r2, r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	621a      	str	r2, [r3, #32]
 8006c32:	e015      	b.n	8006c60 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006c4a:	e009      	b.n	8006c60 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d155      	bne.n	8006d14 <HAL_PCD_EP_DB_Transmit+0x356>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	4413      	add	r3, r2
 8006c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	00da      	lsls	r2, r3, #3
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c92:	2b3e      	cmp	r3, #62	; 0x3e
 8006c94:	d916      	bls.n	8006cc4 <HAL_PCD_EP_DB_Transmit+0x306>
 8006c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	029b      	lsls	r3, r3, #10
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e043      	b.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d112      	bne.n	8006cf0 <HAL_PCD_EP_DB_Transmit+0x332>
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	e02d      	b.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf2:	085b      	lsrs	r3, r3, #1
 8006cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_PCD_EP_DB_Transmit+0x348>
 8006d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d02:	3301      	adds	r3, #1
 8006d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	029b      	lsls	r3, r3, #10
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e01b      	b.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d117      	bne.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	643b      	str	r3, [r7, #64]	; 0x40
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d30:	4413      	add	r3, r2
 8006d32:	643b      	str	r3, [r7, #64]	; 0x40
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	00da      	lsls	r2, r3, #3
 8006d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6959      	ldr	r1, [r3, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	891a      	ldrh	r2, [r3, #8]
 8006d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f005 fde5 	bl	800c92a <USB_WritePMA>
 8006d60:	e1ce      	b.n	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	4413      	add	r3, r2
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	699a      	ldr	r2, [r3, #24]
 8006d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d307      	bcc.n	8006da6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	619a      	str	r2, [r3, #24]
 8006da4:	e002      	b.n	8006dac <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 80c4 	bne.w	8006f3e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	785b      	ldrb	r3, [r3, #1]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d126      	bne.n	8006e0c <HAL_PCD_EP_DB_Transmit+0x44e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dd2:	4413      	add	r3, r2
 8006dd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00da      	lsls	r2, r3, #3
 8006ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006de4:	667b      	str	r3, [r7, #100]	; 0x64
 8006de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df4:	801a      	strh	r2, [r3, #0]
 8006df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e01a      	b.n	8006e42 <HAL_PCD_EP_DB_Transmit+0x484>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d116      	bne.n	8006e42 <HAL_PCD_EP_DB_Transmit+0x484>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	673b      	str	r3, [r7, #112]	; 0x70
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e28:	4413      	add	r3, r2
 8006e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	00da      	lsls	r2, r3, #3
 8006e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e34:	4413      	add	r3, r2
 8006e36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3e:	2200      	movs	r2, #0
 8006e40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d12f      	bne.n	8006eb0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e68:	4413      	add	r3, r2
 8006e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00da      	lsls	r2, r3, #3
 8006e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e78:	4413      	add	r3, r2
 8006e7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e94:	801a      	strh	r2, [r3, #0]
 8006e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e017      	b.n	8006ee0 <HAL_PCD_EP_DB_Transmit+0x522>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d113      	bne.n	8006ee0 <HAL_PCD_EP_DB_Transmit+0x522>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ec6:	4413      	add	r3, r2
 8006ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00da      	lsls	r2, r3, #3
 8006ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006edc:	2200      	movs	r2, #0
 8006ede:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f007 fc81 	bl	800e7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 8104 	bne.w	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	441a      	add	r2, r3
 8006f24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]
 8006f3c:	e0e0      	b.n	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d121      	bne.n	8006f8c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	f040 80b4 	bne.w	8007100 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fae:	441a      	add	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d309      	bcc.n	8006fd4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6a1a      	ldr	r2, [r3, #32]
 8006fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fcc:	1ad2      	subs	r2, r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	621a      	str	r2, [r3, #32]
 8006fd2:	e015      	b.n	8007000 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d107      	bne.n	8006fec <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006fea:	e009      	b.n	8007000 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	663b      	str	r3, [r7, #96]	; 0x60
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d155      	bne.n	80070ba <HAL_PCD_EP_DB_Transmit+0x6fc>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	65bb      	str	r3, [r7, #88]	; 0x58
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007022:	4413      	add	r3, r2
 8007024:	65bb      	str	r3, [r7, #88]	; 0x58
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	00da      	lsls	r2, r3, #3
 800702c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800702e:	4413      	add	r3, r2
 8007030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007034:	657b      	str	r3, [r7, #84]	; 0x54
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	2b3e      	cmp	r3, #62	; 0x3e
 800703a:	d916      	bls.n	800706a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800703c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	677b      	str	r3, [r7, #116]	; 0x74
 8007042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <HAL_PCD_EP_DB_Transmit+0x694>
 800704c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800704e:	3b01      	subs	r3, #1
 8007050:	677b      	str	r3, [r7, #116]	; 0x74
 8007052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007062:	b29a      	uxth	r2, r3
 8007064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e040      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x72e>
 800706a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706c:	2b00      	cmp	r3, #0
 800706e:	d112      	bne.n	8007096 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707a:	b29a      	uxth	r2, r3
 800707c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708e:	b29a      	uxth	r2, r3
 8007090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e02a      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x72e>
 8007096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	677b      	str	r3, [r7, #116]	; 0x74
 800709c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_PCD_EP_DB_Transmit+0x6ee>
 80070a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a8:	3301      	adds	r3, #1
 80070aa:	677b      	str	r3, [r7, #116]	; 0x74
 80070ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	029b      	lsls	r3, r3, #10
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	e018      	b.n	80070ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d114      	bne.n	80070ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d0:	4413      	add	r3, r2
 80070d2:	663b      	str	r3, [r7, #96]	; 0x60
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00da      	lsls	r2, r3, #3
 80070da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070dc:	4413      	add	r3, r2
 80070de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6959      	ldr	r1, [r3, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	895a      	ldrh	r2, [r3, #10]
 80070f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f005 fc15 	bl	800c92a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711a:	823b      	strh	r3, [r7, #16]
 800711c:	8a3b      	ldrh	r3, [r7, #16]
 800711e:	f083 0310 	eor.w	r3, r3, #16
 8007122:	823b      	strh	r3, [r7, #16]
 8007124:	8a3b      	ldrh	r3, [r7, #16]
 8007126:	f083 0320 	eor.w	r3, r3, #32
 800712a:	823b      	strh	r3, [r7, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	441a      	add	r2, r3
 800713a:	8a3b      	ldrh	r3, [r7, #16]
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3788      	adds	r7, #136	; 0x88
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800715a:	b480      	push	{r7}
 800715c:	b087      	sub	sp, #28
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	817b      	strh	r3, [r7, #10]
 8007168:	4613      	mov	r3, r2
 800716a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800716c:	897b      	ldrh	r3, [r7, #10]
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007178:	897b      	ldrh	r3, [r7, #10]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e009      	b.n	80071a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007190:	897a      	ldrh	r2, [r7, #10]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d107      	bne.n	80071ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2200      	movs	r2, #0
 80071ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	80da      	strh	r2, [r3, #6]
 80071b8:	e00b      	b.n	80071d2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2201      	movs	r2, #1
 80071be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	0c1b      	lsrs	r3, r3, #16
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007204:	b29b      	uxth	r3, r3
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007218:	b29b      	uxth	r3, r3
 800721a:	f043 0302 	orr.w	r3, r3, #2
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d141      	bne.n	80072c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007242:	4b4b      	ldr	r3, [pc, #300]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800724a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724e:	d131      	bne.n	80072b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007250:	4b47      	ldr	r3, [pc, #284]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007256:	4a46      	ldr	r2, [pc, #280]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800725c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007260:	4b43      	ldr	r3, [pc, #268]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007268:	4a41      	ldr	r2, [pc, #260]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800726a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800726e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007270:	4b40      	ldr	r3, [pc, #256]	; (8007374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2232      	movs	r2, #50	; 0x32
 8007276:	fb02 f303 	mul.w	r3, r2, r3
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800727c:	fba2 2303 	umull	r2, r3, r2, r3
 8007280:	0c9b      	lsrs	r3, r3, #18
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007286:	e002      	b.n	800728e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3b01      	subs	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800728e:	4b38      	ldr	r3, [pc, #224]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729a:	d102      	bne.n	80072a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f2      	bne.n	8007288 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072a2:	4b33      	ldr	r3, [pc, #204]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ae:	d158      	bne.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e057      	b.n	8007364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072b4:	4b2e      	ldr	r3, [pc, #184]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ba:	4a2d      	ldr	r2, [pc, #180]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80072c4:	e04d      	b.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072cc:	d141      	bne.n	8007352 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072ce:	4b28      	ldr	r3, [pc, #160]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072da:	d131      	bne.n	8007340 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072dc:	4b24      	ldr	r3, [pc, #144]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072e2:	4a23      	ldr	r2, [pc, #140]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072ec:	4b20      	ldr	r3, [pc, #128]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072f4:	4a1e      	ldr	r2, [pc, #120]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072fc:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2232      	movs	r2, #50	; 0x32
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	4a1c      	ldr	r2, [pc, #112]	; (8007378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	0c9b      	lsrs	r3, r3, #18
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007312:	e002      	b.n	800731a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b01      	subs	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800731a:	4b15      	ldr	r3, [pc, #84]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007326:	d102      	bne.n	800732e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f2      	bne.n	8007314 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800732e:	4b10      	ldr	r3, [pc, #64]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733a:	d112      	bne.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e011      	b.n	8007364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007340:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007350:	e007      	b.n	8007362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800735a:	4a05      	ldr	r2, [pc, #20]	; (8007370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800735c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007360:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40007000 	.word	0x40007000
 8007374:	200026d8 	.word	0x200026d8
 8007378:	431bde83 	.word	0x431bde83

0800737c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e306      	b.n	800799c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d075      	beq.n	8007486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800739a:	4b97      	ldr	r3, [pc, #604]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 030c 	and.w	r3, r3, #12
 80073a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073a4:	4b94      	ldr	r3, [pc, #592]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b0c      	cmp	r3, #12
 80073b2:	d102      	bne.n	80073ba <HAL_RCC_OscConfig+0x3e>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d002      	beq.n	80073c0 <HAL_RCC_OscConfig+0x44>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d10b      	bne.n	80073d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c0:	4b8d      	ldr	r3, [pc, #564]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d05b      	beq.n	8007484 <HAL_RCC_OscConfig+0x108>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d157      	bne.n	8007484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e2e1      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e0:	d106      	bne.n	80073f0 <HAL_RCC_OscConfig+0x74>
 80073e2:	4b85      	ldr	r3, [pc, #532]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a84      	ldr	r2, [pc, #528]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e01d      	b.n	800742c <HAL_RCC_OscConfig+0xb0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073f8:	d10c      	bne.n	8007414 <HAL_RCC_OscConfig+0x98>
 80073fa:	4b7f      	ldr	r3, [pc, #508]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a7e      	ldr	r2, [pc, #504]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4b7c      	ldr	r3, [pc, #496]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a7b      	ldr	r2, [pc, #492]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800740c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e00b      	b.n	800742c <HAL_RCC_OscConfig+0xb0>
 8007414:	4b78      	ldr	r3, [pc, #480]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a77      	ldr	r2, [pc, #476]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800741a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	4b75      	ldr	r3, [pc, #468]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a74      	ldr	r2, [pc, #464]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800742a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d013      	beq.n	800745c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007434:	f7fa fe7a 	bl	800212c <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800743c:	f7fa fe76 	bl	800212c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b64      	cmp	r3, #100	; 0x64
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e2a6      	b.n	800799c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800744e:	4b6a      	ldr	r3, [pc, #424]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f0      	beq.n	800743c <HAL_RCC_OscConfig+0xc0>
 800745a:	e014      	b.n	8007486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745c:	f7fa fe66 	bl	800212c <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007464:	f7fa fe62 	bl	800212c <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b64      	cmp	r3, #100	; 0x64
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e292      	b.n	800799c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007476:	4b60      	ldr	r3, [pc, #384]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f0      	bne.n	8007464 <HAL_RCC_OscConfig+0xe8>
 8007482:	e000      	b.n	8007486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d075      	beq.n	800757e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007492:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
 800749a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800749c:	4b56      	ldr	r3, [pc, #344]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b0c      	cmp	r3, #12
 80074aa:	d102      	bne.n	80074b2 <HAL_RCC_OscConfig+0x136>
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d002      	beq.n	80074b8 <HAL_RCC_OscConfig+0x13c>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d11f      	bne.n	80074f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074b8:	4b4f      	ldr	r3, [pc, #316]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_OscConfig+0x154>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e265      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d0:	4b49      	ldr	r3, [pc, #292]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	4946      	ldr	r1, [pc, #280]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80074e4:	4b45      	ldr	r3, [pc, #276]	; (80075fc <HAL_RCC_OscConfig+0x280>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fa fdd3 	bl	8002094 <HAL_InitTick>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d043      	beq.n	800757c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e251      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d023      	beq.n	8007548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007500:	4b3d      	ldr	r3, [pc, #244]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3c      	ldr	r2, [pc, #240]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fa fe0e 	bl	800212c <HAL_GetTick>
 8007510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007514:	f7fa fe0a 	bl	800212c <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b02      	cmp	r3, #2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e23a      	b.n	800799c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007526:	4b34      	ldr	r3, [pc, #208]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0f0      	beq.n	8007514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007532:	4b31      	ldr	r3, [pc, #196]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	061b      	lsls	r3, r3, #24
 8007540:	492d      	ldr	r1, [pc, #180]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007542:	4313      	orrs	r3, r2
 8007544:	604b      	str	r3, [r1, #4]
 8007546:	e01a      	b.n	800757e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007548:	4b2b      	ldr	r3, [pc, #172]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a2a      	ldr	r2, [pc, #168]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800754e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007554:	f7fa fdea 	bl	800212c <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800755c:	f7fa fde6 	bl	800212c <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e216      	b.n	800799c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800756e:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1f0      	bne.n	800755c <HAL_RCC_OscConfig+0x1e0>
 800757a:	e000      	b.n	800757e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800757c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0308 	and.w	r3, r3, #8
 8007586:	2b00      	cmp	r3, #0
 8007588:	d041      	beq.n	800760e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01c      	beq.n	80075cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007592:	4b19      	ldr	r3, [pc, #100]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 8007594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007598:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a2:	f7fa fdc3 	bl	800212c <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075aa:	f7fa fdbf 	bl	800212c <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e1ef      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80075be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0ef      	beq.n	80075aa <HAL_RCC_OscConfig+0x22e>
 80075ca:	e020      	b.n	800760e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80075ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d2:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <HAL_RCC_OscConfig+0x27c>)
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075dc:	f7fa fda6 	bl	800212c <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075e2:	e00d      	b.n	8007600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075e4:	f7fa fda2 	bl	800212c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d906      	bls.n	8007600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e1d2      	b.n	800799c <HAL_RCC_OscConfig+0x620>
 80075f6:	bf00      	nop
 80075f8:	40021000 	.word	0x40021000
 80075fc:	200026dc 	.word	0x200026dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007600:	4b8c      	ldr	r3, [pc, #560]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1ea      	bne.n	80075e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80a6 	beq.w	8007768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800761c:	2300      	movs	r3, #0
 800761e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007620:	4b84      	ldr	r3, [pc, #528]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_RCC_OscConfig+0x2b4>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <HAL_RCC_OscConfig+0x2b6>
 8007630:	2300      	movs	r3, #0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00d      	beq.n	8007652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007636:	4b7f      	ldr	r3, [pc, #508]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763a:	4a7e      	ldr	r2, [pc, #504]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 800763c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007640:	6593      	str	r3, [r2, #88]	; 0x58
 8007642:	4b7c      	ldr	r3, [pc, #496]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800764e:	2301      	movs	r3, #1
 8007650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007652:	4b79      	ldr	r3, [pc, #484]	; (8007838 <HAL_RCC_OscConfig+0x4bc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765a:	2b00      	cmp	r3, #0
 800765c:	d118      	bne.n	8007690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800765e:	4b76      	ldr	r3, [pc, #472]	; (8007838 <HAL_RCC_OscConfig+0x4bc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a75      	ldr	r2, [pc, #468]	; (8007838 <HAL_RCC_OscConfig+0x4bc>)
 8007664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800766a:	f7fa fd5f 	bl	800212c <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007672:	f7fa fd5b 	bl	800212c <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e18b      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007684:	4b6c      	ldr	r3, [pc, #432]	; (8007838 <HAL_RCC_OscConfig+0x4bc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0f0      	beq.n	8007672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d108      	bne.n	80076aa <HAL_RCC_OscConfig+0x32e>
 8007698:	4b66      	ldr	r3, [pc, #408]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	4a65      	ldr	r2, [pc, #404]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076a0:	f043 0301 	orr.w	r3, r3, #1
 80076a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076a8:	e024      	b.n	80076f4 <HAL_RCC_OscConfig+0x378>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d110      	bne.n	80076d4 <HAL_RCC_OscConfig+0x358>
 80076b2:	4b60      	ldr	r3, [pc, #384]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	4a5e      	ldr	r2, [pc, #376]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076ba:	f043 0304 	orr.w	r3, r3, #4
 80076be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076c2:	4b5c      	ldr	r3, [pc, #368]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c8:	4a5a      	ldr	r2, [pc, #360]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076d2:	e00f      	b.n	80076f4 <HAL_RCC_OscConfig+0x378>
 80076d4:	4b57      	ldr	r3, [pc, #348]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076da:	4a56      	ldr	r2, [pc, #344]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076e4:	4b53      	ldr	r3, [pc, #332]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ea:	4a52      	ldr	r2, [pc, #328]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80076ec:	f023 0304 	bic.w	r3, r3, #4
 80076f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d016      	beq.n	800772a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fc:	f7fa fd16 	bl	800212c <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007702:	e00a      	b.n	800771a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007704:	f7fa fd12 	bl	800212c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e140      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800771a:	4b46      	ldr	r3, [pc, #280]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0ed      	beq.n	8007704 <HAL_RCC_OscConfig+0x388>
 8007728:	e015      	b.n	8007756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772a:	f7fa fcff 	bl	800212c <HAL_GetTick>
 800772e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007730:	e00a      	b.n	8007748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007732:	f7fa fcfb 	bl	800212c <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e129      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007748:	4b3a      	ldr	r3, [pc, #232]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1ed      	bne.n	8007732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007756:	7ffb      	ldrb	r3, [r7, #31]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d105      	bne.n	8007768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800775c:	4b35      	ldr	r3, [pc, #212]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 800775e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007760:	4a34      	ldr	r2, [pc, #208]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007766:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d03c      	beq.n	80077ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01c      	beq.n	80077b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800777c:	4b2d      	ldr	r3, [pc, #180]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 800777e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007782:	4a2c      	ldr	r2, [pc, #176]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778c:	f7fa fcce 	bl	800212c <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007794:	f7fa fcca 	bl	800212c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e0fa      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077a6:	4b23      	ldr	r3, [pc, #140]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80077a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ef      	beq.n	8007794 <HAL_RCC_OscConfig+0x418>
 80077b4:	e01b      	b.n	80077ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077b6:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80077b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077bc:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c6:	f7fa fcb1 	bl	800212c <HAL_GetTick>
 80077ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077cc:	e008      	b.n	80077e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ce:	f7fa fcad 	bl	800212c <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e0dd      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80077e0:	4b14      	ldr	r3, [pc, #80]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80077e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1ef      	bne.n	80077ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80d1 	beq.w	800799a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 030c 	and.w	r3, r3, #12
 8007800:	2b0c      	cmp	r3, #12
 8007802:	f000 808b 	beq.w	800791c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d15e      	bne.n	80078cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a08      	ldr	r2, [pc, #32]	; (8007834 <HAL_RCC_OscConfig+0x4b8>)
 8007814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781a:	f7fa fc87 	bl	800212c <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007820:	e00c      	b.n	800783c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007822:	f7fa fc83 	bl	800212c <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d905      	bls.n	800783c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e0b3      	b.n	800799c <HAL_RCC_OscConfig+0x620>
 8007834:	40021000 	.word	0x40021000
 8007838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800783c:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ec      	bne.n	8007822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007848:	4b56      	ldr	r3, [pc, #344]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	4b56      	ldr	r3, [pc, #344]	; (80079a8 <HAL_RCC_OscConfig+0x62c>)
 800784e:	4013      	ands	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6a11      	ldr	r1, [r2, #32]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007858:	3a01      	subs	r2, #1
 800785a:	0112      	lsls	r2, r2, #4
 800785c:	4311      	orrs	r1, r2
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007862:	0212      	lsls	r2, r2, #8
 8007864:	4311      	orrs	r1, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800786a:	0852      	lsrs	r2, r2, #1
 800786c:	3a01      	subs	r2, #1
 800786e:	0552      	lsls	r2, r2, #21
 8007870:	4311      	orrs	r1, r2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007876:	0852      	lsrs	r2, r2, #1
 8007878:	3a01      	subs	r2, #1
 800787a:	0652      	lsls	r2, r2, #25
 800787c:	4311      	orrs	r1, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007882:	06d2      	lsls	r2, r2, #27
 8007884:	430a      	orrs	r2, r1
 8007886:	4947      	ldr	r1, [pc, #284]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 8007888:	4313      	orrs	r3, r2
 800788a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800788c:	4b45      	ldr	r3, [pc, #276]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a44      	ldr	r2, [pc, #272]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 8007892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007898:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4a41      	ldr	r2, [pc, #260]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 800789e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a4:	f7fa fc42 	bl	800212c <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ac:	f7fa fc3e 	bl	800212c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e06e      	b.n	800799c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078be:	4b39      	ldr	r3, [pc, #228]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x530>
 80078ca:	e066      	b.n	800799a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078cc:	4b35      	ldr	r3, [pc, #212]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a34      	ldr	r2, [pc, #208]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80078d8:	4b32      	ldr	r3, [pc, #200]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4a31      	ldr	r2, [pc, #196]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078de:	f023 0303 	bic.w	r3, r3, #3
 80078e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80078e4:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	4a2e      	ldr	r2, [pc, #184]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 80078ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fa fc1a 	bl	800212c <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fa fc16 	bl	800212c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e046      	b.n	800799c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800790e:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f0      	bne.n	80078fc <HAL_RCC_OscConfig+0x580>
 800791a:	e03e      	b.n	800799a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e039      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <HAL_RCC_OscConfig+0x628>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f003 0203 	and.w	r2, r3, #3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	429a      	cmp	r2, r3
 800793a:	d12c      	bne.n	8007996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	3b01      	subs	r3, #1
 8007948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794a:	429a      	cmp	r2, r3
 800794c:	d123      	bne.n	8007996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800795a:	429a      	cmp	r2, r3
 800795c:	d11b      	bne.n	8007996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800796a:	429a      	cmp	r2, r3
 800796c:	d113      	bne.n	8007996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	3b01      	subs	r3, #1
 800797c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800797e:	429a      	cmp	r2, r3
 8007980:	d109      	bne.n	8007996 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798c:	085b      	lsrs	r3, r3, #1
 800798e:	3b01      	subs	r3, #1
 8007990:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d001      	beq.n	800799a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40021000 	.word	0x40021000
 80079a8:	019f800c 	.word	0x019f800c

080079ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e11e      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079c4:	4b91      	ldr	r3, [pc, #580]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d910      	bls.n	80079f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d2:	4b8e      	ldr	r3, [pc, #568]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f023 020f 	bic.w	r2, r3, #15
 80079da:	498c      	ldr	r1, [pc, #560]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e2:	4b8a      	ldr	r3, [pc, #552]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e106      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d073      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d129      	bne.n	8007a5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a08:	4b81      	ldr	r3, [pc, #516]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0f4      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a18:	f000 f970 	bl	8007cfc <RCC_GetSysClockFreqFromPLLSource>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4a7c      	ldr	r2, [pc, #496]	; (8007c14 <HAL_RCC_ClockConfig+0x268>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d93f      	bls.n	8007aa6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a26:	4b7a      	ldr	r3, [pc, #488]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d033      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d12f      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a46:	4b72      	ldr	r3, [pc, #456]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a4e:	4a70      	ldr	r2, [pc, #448]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a56:	2380      	movs	r3, #128	; 0x80
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e024      	b.n	8007aa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d107      	bne.n	8007a74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a64:	4b6a      	ldr	r3, [pc, #424]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d109      	bne.n	8007a84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0c6      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a74:	4b66      	ldr	r3, [pc, #408]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0be      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007a84:	f000 f8ce 	bl	8007c24 <HAL_RCC_GetSysClockFreq>
 8007a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4a61      	ldr	r2, [pc, #388]	; (8007c14 <HAL_RCC_ClockConfig+0x268>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d909      	bls.n	8007aa6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a92:	4b5f      	ldr	r3, [pc, #380]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a9a:	4a5d      	ldr	r2, [pc, #372]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007aa6:	4b5a      	ldr	r3, [pc, #360]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 0203 	bic.w	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4957      	ldr	r1, [pc, #348]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab8:	f7fa fb38 	bl	800212c <HAL_GetTick>
 8007abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	e00a      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac0:	f7fa fb34 	bl	800212c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e095      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad6:	4b4e      	ldr	r3, [pc, #312]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 020c 	and.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d1eb      	bne.n	8007ac0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d023      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b00:	4b43      	ldr	r3, [pc, #268]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	4a42      	ldr	r2, [pc, #264]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0308 	and.w	r3, r3, #8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b18:	4b3d      	ldr	r3, [pc, #244]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b20:	4a3b      	ldr	r2, [pc, #236]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b28:	4b39      	ldr	r3, [pc, #228]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	4936      	ldr	r1, [pc, #216]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	608b      	str	r3, [r1, #8]
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2b80      	cmp	r3, #128	; 0x80
 8007b40:	d105      	bne.n	8007b4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b42:	4b33      	ldr	r3, [pc, #204]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	4a32      	ldr	r2, [pc, #200]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d21d      	bcs.n	8007b98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5c:	4b2b      	ldr	r3, [pc, #172]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f023 020f 	bic.w	r2, r3, #15
 8007b64:	4929      	ldr	r1, [pc, #164]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b6c:	f7fa fade 	bl	800212c <HAL_GetTick>
 8007b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b72:	e00a      	b.n	8007b8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b74:	f7fa fada 	bl	800212c <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e03b      	b.n	8007c02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8a:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <HAL_RCC_ClockConfig+0x260>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1ed      	bne.n	8007b74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	4917      	ldr	r1, [pc, #92]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	490f      	ldr	r1, [pc, #60]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bd6:	f000 f825 	bl	8007c24 <HAL_RCC_GetSysClockFreq>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <HAL_RCC_ClockConfig+0x264>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	091b      	lsrs	r3, r3, #4
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	490c      	ldr	r1, [pc, #48]	; (8007c18 <HAL_RCC_ClockConfig+0x26c>)
 8007be8:	5ccb      	ldrb	r3, [r1, r3]
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf2:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <HAL_RCC_ClockConfig+0x270>)
 8007bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <HAL_RCC_ClockConfig+0x274>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fa fa4a 	bl	8002094 <HAL_InitTick>
 8007c00:	4603      	mov	r3, r0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	40022000 	.word	0x40022000
 8007c10:	40021000 	.word	0x40021000
 8007c14:	04c4b400 	.word	0x04c4b400
 8007c18:	08011950 	.word	0x08011950
 8007c1c:	200026d8 	.word	0x200026d8
 8007c20:	200026dc 	.word	0x200026dc

08007c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c2a:	4b2c      	ldr	r3, [pc, #176]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 030c 	and.w	r3, r3, #12
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d102      	bne.n	8007c3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	e047      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007c3c:	4b27      	ldr	r3, [pc, #156]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 030c 	and.w	r3, r3, #12
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d102      	bne.n	8007c4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c48:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	e03e      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007c4e:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f003 030c 	and.w	r3, r3, #12
 8007c56:	2b0c      	cmp	r3, #12
 8007c58:	d136      	bne.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c64:	4b1d      	ldr	r3, [pc, #116]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	091b      	lsrs	r3, r3, #4
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c78:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	4a16      	ldr	r2, [pc, #88]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c82:	68d2      	ldr	r2, [r2, #12]
 8007c84:	0a12      	lsrs	r2, r2, #8
 8007c86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	617b      	str	r3, [r7, #20]
      break;
 8007c90:	e00c      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c92:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9a:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c9c:	68d2      	ldr	r2, [r2, #12]
 8007c9e:	0a12      	lsrs	r2, r2, #8
 8007ca0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ca4:	fb02 f303 	mul.w	r3, r2, r3
 8007ca8:	617b      	str	r3, [r7, #20]
      break;
 8007caa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	0e5b      	lsrs	r3, r3, #25
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	e001      	b.n	8007ccc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ccc:	693b      	ldr	r3, [r7, #16]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40021000 	.word	0x40021000
 8007ce0:	00f42400 	.word	0x00f42400

08007ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cea:	681b      	ldr	r3, [r3, #0]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	200026d8 	.word	0x200026d8

08007cfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d02:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	091b      	lsrs	r3, r3, #4
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	3301      	adds	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d10c      	bne.n	8007d3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d20:	4a17      	ldr	r2, [pc, #92]	; (8007d80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d28:	4a14      	ldr	r2, [pc, #80]	; (8007d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d2a:	68d2      	ldr	r2, [r2, #12]
 8007d2c:	0a12      	lsrs	r2, r2, #8
 8007d2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	617b      	str	r3, [r7, #20]
    break;
 8007d38:	e00c      	b.n	8007d54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d3a:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d42:	4a0e      	ldr	r2, [pc, #56]	; (8007d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d44:	68d2      	ldr	r2, [r2, #12]
 8007d46:	0a12      	lsrs	r2, r2, #8
 8007d48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
    break;
 8007d52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d54:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	0e5b      	lsrs	r3, r3, #25
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	3301      	adds	r3, #1
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007d6e:	687b      	ldr	r3, [r7, #4]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	00f42400 	.word	0x00f42400

08007d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d90:	2300      	movs	r3, #0
 8007d92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8098 	beq.w	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007da2:	2300      	movs	r3, #0
 8007da4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007da6:	4b43      	ldr	r3, [pc, #268]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007db2:	4b40      	ldr	r3, [pc, #256]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db6:	4a3f      	ldr	r2, [pc, #252]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8007dbe:	4b3d      	ldr	r3, [pc, #244]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc6:	60bb      	str	r3, [r7, #8]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dce:	4b3a      	ldr	r3, [pc, #232]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a39      	ldr	r2, [pc, #228]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dda:	f7fa f9a7 	bl	800212c <HAL_GetTick>
 8007dde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007de0:	e009      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007de2:	f7fa f9a3 	bl	800212c <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d902      	bls.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	74fb      	strb	r3, [r7, #19]
        break;
 8007df4:	e005      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007df6:	4b30      	ldr	r3, [pc, #192]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0ef      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007e02:	7cfb      	ldrb	r3, [r7, #19]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d159      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e08:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01e      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d019      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e24:	4b23      	ldr	r3, [pc, #140]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e30:	4b20      	ldr	r3, [pc, #128]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e36:	4a1f      	ldr	r2, [pc, #124]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e40:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e50:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d016      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e62:	f7fa f963 	bl	800212c <HAL_GetTick>
 8007e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e68:	e00b      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e6a:	f7fa f95f 	bl	800212c <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d902      	bls.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8007e80:	e006      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0ec      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007e90:	7cfb      	ldrb	r3, [r7, #19]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10b      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea4:	4903      	ldr	r1, [pc, #12]	; (8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007eac:	e008      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007eae:	7cfb      	ldrb	r3, [r7, #19]
 8007eb0:	74bb      	strb	r3, [r7, #18]
 8007eb2:	e005      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebc:	7cfb      	ldrb	r3, [r7, #19]
 8007ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ec0:	7c7b      	ldrb	r3, [r7, #17]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d105      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ec6:	4ba7      	ldr	r3, [pc, #668]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eca:	4aa6      	ldr	r2, [pc, #664]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ed0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ede:	4ba1      	ldr	r3, [pc, #644]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee4:	f023 0203 	bic.w	r2, r3, #3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	499d      	ldr	r1, [pc, #628]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f00:	4b98      	ldr	r3, [pc, #608]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f06:	f023 020c 	bic.w	r2, r3, #12
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	4995      	ldr	r1, [pc, #596]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f22:	4b90      	ldr	r3, [pc, #576]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	498c      	ldr	r1, [pc, #560]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f44:	4b87      	ldr	r3, [pc, #540]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	4984      	ldr	r1, [pc, #528]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f66:	4b7f      	ldr	r3, [pc, #508]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	497b      	ldr	r1, [pc, #492]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f88:	4b76      	ldr	r3, [pc, #472]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	4973      	ldr	r1, [pc, #460]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007faa:	4b6e      	ldr	r3, [pc, #440]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	496a      	ldr	r1, [pc, #424]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007fcc:	4b65      	ldr	r3, [pc, #404]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	4962      	ldr	r1, [pc, #392]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007fee:	4b5d      	ldr	r3, [pc, #372]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	4959      	ldr	r1, [pc, #356]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008010:	4b54      	ldr	r3, [pc, #336]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008016:	f023 0203 	bic.w	r2, r3, #3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	4951      	ldr	r1, [pc, #324]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008020:	4313      	orrs	r3, r2
 8008022:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008032:	4b4c      	ldr	r3, [pc, #304]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4948      	ldr	r1, [pc, #288]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008050:	2b00      	cmp	r3, #0
 8008052:	d015      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008054:	4b43      	ldr	r3, [pc, #268]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	4940      	ldr	r1, [pc, #256]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008072:	d105      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008074:	4b3b      	ldr	r3, [pc, #236]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4a3a      	ldr	r2, [pc, #232]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800807a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800807e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008088:	2b00      	cmp	r3, #0
 800808a:	d015      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800808c:	4b35      	ldr	r3, [pc, #212]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800808e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809a:	4932      	ldr	r1, [pc, #200]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800809c:	4313      	orrs	r3, r2
 800809e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080aa:	d105      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080ac:	4b2d      	ldr	r3, [pc, #180]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	4a2c      	ldr	r2, [pc, #176]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d015      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080c4:	4b27      	ldr	r3, [pc, #156]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	4924      	ldr	r1, [pc, #144]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080e2:	d105      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080e4:	4b1f      	ldr	r3, [pc, #124]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d015      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810a:	4916      	ldr	r1, [pc, #88]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800810c:	4313      	orrs	r3, r2
 800810e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811a:	d105      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800811c:	4b11      	ldr	r3, [pc, #68]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4a10      	ldr	r2, [pc, #64]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008126:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d019      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008134:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	4908      	ldr	r1, [pc, #32]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008152:	d109      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008154:	4b03      	ldr	r3, [pc, #12]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4a02      	ldr	r2, [pc, #8]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800815a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800815e:	60d3      	str	r3, [r2, #12]
 8008160:	e002      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008162:	bf00      	nop
 8008164:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d015      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008174:	4b29      	ldr	r3, [pc, #164]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	4926      	ldr	r1, [pc, #152]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008192:	d105      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008194:	4b21      	ldr	r3, [pc, #132]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	4a20      	ldr	r2, [pc, #128]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800819a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800819e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d015      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80081ac:	4b1b      	ldr	r3, [pc, #108]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ba:	4918      	ldr	r1, [pc, #96]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ca:	d105      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4a12      	ldr	r2, [pc, #72]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d015      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f2:	490a      	ldr	r1, [pc, #40]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008202:	d105      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	4a04      	ldr	r2, [pc, #16]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800820a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800820e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008210:	7cbb      	ldrb	r3, [r7, #18]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	40021000 	.word	0x40021000

08008220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e09d      	b.n	800836e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b00      	cmp	r3, #0
 8008238:	d108      	bne.n	800824c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008242:	d009      	beq.n	8008258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	61da      	str	r2, [r3, #28]
 800824a:	e005      	b.n	8008258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7f9 fce0 	bl	8001c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008298:	d902      	bls.n	80082a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e002      	b.n	80082a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80082ae:	d007      	beq.n	80082c0 <HAL_SPI_Init+0xa0>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082b8:	d002      	beq.n	80082c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008302:	ea42 0103 	orr.w	r1, r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	0c1b      	lsrs	r3, r3, #16
 800831c:	f003 0204 	and.w	r2, r3, #4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800833c:	ea42 0103 	orr.w	r1, r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800835c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b088      	sub	sp, #32
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	603b      	str	r3, [r7, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_SPI_Transmit+0x22>
 8008394:	2302      	movs	r3, #2
 8008396:	e158      	b.n	800864a <HAL_SPI_Transmit+0x2d4>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083a0:	f7f9 fec4 	bl	800212c <HAL_GetTick>
 80083a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d002      	beq.n	80083bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083b6:	2302      	movs	r3, #2
 80083b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083ba:	e13d      	b.n	8008638 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_SPI_Transmit+0x52>
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083cc:	e134      	b.n	8008638 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2203      	movs	r2, #3
 80083d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	88fa      	ldrh	r2, [r7, #6]
 80083e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008418:	d10f      	bne.n	800843a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008438:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b40      	cmp	r3, #64	; 0x40
 8008446:	d007      	beq.n	8008458 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008460:	d94b      	bls.n	80084fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_SPI_Transmit+0xfa>
 800846a:	8afb      	ldrh	r3, [r7, #22]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d13e      	bne.n	80084ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	881a      	ldrh	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	1c9a      	adds	r2, r3, #2
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848a:	b29b      	uxth	r3, r3
 800848c:	3b01      	subs	r3, #1
 800848e:	b29a      	uxth	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008494:	e02b      	b.n	80084ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d112      	bne.n	80084ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	1c9a      	adds	r2, r3, #2
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084c8:	e011      	b.n	80084ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ca:	f7f9 fe2f 	bl	800212c <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d803      	bhi.n	80084e2 <HAL_SPI_Transmit+0x16c>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d102      	bne.n	80084e8 <HAL_SPI_Transmit+0x172>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084ec:	e0a4      	b.n	8008638 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1ce      	bne.n	8008496 <HAL_SPI_Transmit+0x120>
 80084f8:	e07c      	b.n	80085f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <HAL_SPI_Transmit+0x192>
 8008502:	8afb      	ldrh	r3, [r7, #22]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d170      	bne.n	80085ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	d912      	bls.n	8008538 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	1c9a      	adds	r2, r3, #2
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b02      	subs	r3, #2
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008536:	e058      	b.n	80085ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	330c      	adds	r3, #12
 8008542:	7812      	ldrb	r2, [r2, #0]
 8008544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800855e:	e044      	b.n	80085ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b02      	cmp	r3, #2
 800856c:	d12b      	bne.n	80085c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008572:	b29b      	uxth	r3, r3
 8008574:	2b01      	cmp	r3, #1
 8008576:	d912      	bls.n	800859e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	881a      	ldrh	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	1c9a      	adds	r2, r3, #2
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b02      	subs	r3, #2
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800859c:	e025      	b.n	80085ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330c      	adds	r3, #12
 80085a8:	7812      	ldrb	r2, [r2, #0]
 80085aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085c4:	e011      	b.n	80085ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085c6:	f7f9 fdb1 	bl	800212c <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d803      	bhi.n	80085de <HAL_SPI_Transmit+0x268>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d102      	bne.n	80085e4 <HAL_SPI_Transmit+0x26e>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d102      	bne.n	80085ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085e8:	e026      	b.n	8008638 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1b5      	bne.n	8008560 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fd47 	bl	800908c <SPI_EndRxTxTransaction>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10a      	bne.n	8008628 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	77fb      	strb	r3, [r7, #31]
 8008634:	e000      	b.n	8008638 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008636:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008648:	7ffb      	ldrb	r3, [r7, #31]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008670:	2302      	movs	r3, #2
 8008672:	e16c      	b.n	800894e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008682:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d00d      	beq.n	80086ac <HAL_SPI_TransmitReceive_DMA+0x58>
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008696:	d106      	bne.n	80086a6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80086a0:	7dbb      	ldrb	r3, [r7, #22]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d002      	beq.n	80086ac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80086a6:	2302      	movs	r3, #2
 80086a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086aa:	e14b      	b.n	8008944 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086c2:	e13f      	b.n	8008944 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d003      	beq.n	80086d8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2205      	movs	r2, #5
 80086d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	887a      	ldrh	r2, [r7, #2]
 80086e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	887a      	ldrh	r2, [r7, #2]
 80086ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	887a      	ldrh	r2, [r7, #2]
 80086fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	887a      	ldrh	r2, [r7, #2]
 8008702:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008720:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800872a:	d908      	bls.n	800873e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800873a:	605a      	str	r2, [r3, #4]
 800873c:	e06f      	b.n	800881e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800874c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008758:	d126      	bne.n	80087a8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10f      	bne.n	8008786 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008774:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800877a:	b29b      	uxth	r3, r3
 800877c:	085b      	lsrs	r3, r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008784:	e010      	b.n	80087a8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008794:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800879a:	b29b      	uxth	r3, r3
 800879c:	085b      	lsrs	r3, r3, #1
 800879e:	b29b      	uxth	r3, r3
 80087a0:	3301      	adds	r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b2:	d134      	bne.n	800881e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087c2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d111      	bne.n	80087f8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	085b      	lsrs	r3, r3, #1
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80087f6:	e012      	b.n	800881e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008806:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800880e:	b29b      	uxth	r3, r3
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	b29b      	uxth	r3, r3
 8008814:	3301      	adds	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b04      	cmp	r3, #4
 8008828:	d108      	bne.n	800883c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882e:	4a4a      	ldr	r2, [pc, #296]	; (8008958 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008830:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008836:	4a49      	ldr	r2, [pc, #292]	; (800895c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008838:	62da      	str	r2, [r3, #44]	; 0x2c
 800883a:	e007      	b.n	800884c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	4a47      	ldr	r2, [pc, #284]	; (8008960 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008842:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008848:	4a46      	ldr	r2, [pc, #280]	; (8008964 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800884a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	4a45      	ldr	r2, [pc, #276]	; (8008968 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008858:	2200      	movs	r2, #0
 800885a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	4619      	mov	r1, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008874:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008876:	f7fb ff4b 	bl	8004710 <HAL_DMA_Start_IT>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00c      	beq.n	800889a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008884:	f043 0210 	orr.w	r2, r3, #16
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008898:	e054      	b.n	8008944 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f042 0201 	orr.w	r2, r2, #1
 80088a8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ae:	2200      	movs	r2, #0
 80088b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b6:	2200      	movs	r2, #0
 80088b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088be:	2200      	movs	r2, #0
 80088c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c6:	2200      	movs	r2, #0
 80088c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d2:	4619      	mov	r1, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80088e2:	f7fb ff15 	bl	8004710 <HAL_DMA_Start_IT>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00c      	beq.n	8008906 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f0:	f043 0210 	orr.w	r2, r3, #16
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008904:	e01e      	b.n	8008944 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	d007      	beq.n	8008924 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008922:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0220 	orr.w	r2, r2, #32
 8008932:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0202 	orr.w	r2, r2, #2
 8008942:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	08008cfd 	.word	0x08008cfd
 800895c:	08008bc5 	.word	0x08008bc5
 8008960:	08008d19 	.word	0x08008d19
 8008964:	08008c6d 	.word	0x08008c6d
 8008968:	08008d35 	.word	0x08008d35

0800896c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	099b      	lsrs	r3, r3, #6
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10f      	bne.n	80089b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	099b      	lsrs	r3, r3, #6
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d004      	beq.n	80089b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
    return;
 80089ae:	e0d7      	b.n	8008b60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	085b      	lsrs	r3, r3, #1
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <HAL_SPI_IRQHandler+0x66>
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	09db      	lsrs	r3, r3, #7
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3
    return;
 80089d0:	e0c6      	b.n	8008b60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10c      	bne.n	80089f8 <HAL_SPI_IRQHandler+0x8c>
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	099b      	lsrs	r3, r3, #6
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	0a1b      	lsrs	r3, r3, #8
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 80b4 	beq.w	8008b60 <HAL_SPI_IRQHandler+0x1f4>
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80ad 	beq.w	8008b60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	099b      	lsrs	r3, r3, #6
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d023      	beq.n	8008a5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d011      	beq.n	8008a42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a22:	f043 0204 	orr.w	r2, r3, #4
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	e00b      	b.n	8008a5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	613b      	str	r3, [r7, #16]
 8008a56:	693b      	ldr	r3, [r7, #16]
        return;
 8008a58:	e082      	b.n	8008b60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d014      	beq.n	8008a90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6a:	f043 0201 	orr.w	r2, r3, #1
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00c      	beq.n	8008ab6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa0:	f043 0208 	orr.w	r2, r3, #8
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60bb      	str	r3, [r7, #8]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	60bb      	str	r3, [r7, #8]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d04f      	beq.n	8008b5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008acc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d104      	bne.n	8008aea <HAL_SPI_IRQHandler+0x17e>
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d034      	beq.n	8008b54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0203 	bic.w	r2, r2, #3
 8008af8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d011      	beq.n	8008b26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b06:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <HAL_SPI_IRQHandler+0x1fc>)
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fb fed2 	bl	80048b8 <HAL_DMA_Abort_IT>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d016      	beq.n	8008b5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	4a0d      	ldr	r2, [pc, #52]	; (8008b68 <HAL_SPI_IRQHandler+0x1fc>)
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fb febc 	bl	80048b8 <HAL_DMA_Abort_IT>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008b52:	e003      	b.n	8008b5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f81d 	bl	8008b94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008b5a:	e000      	b.n	8008b5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008b5c:	bf00      	nop
    return;
 8008b5e:	bf00      	nop
  }
}
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	08008d75 	.word	0x08008d75

08008b6c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bb6:	b2db      	uxtb	r3, r3
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bd2:	f7f9 faab 	bl	800212c <HAL_GetTick>
 8008bd6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d03c      	beq.n	8008c60 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0220 	bic.w	r2, r2, #32
 8008bf4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10d      	bne.n	8008c1a <SPI_DMAReceiveCplt+0x56>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c06:	d108      	bne.n	8008c1a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0203 	bic.w	r2, r2, #3
 8008c16:	605a      	str	r2, [r3, #4]
 8008c18:	e007      	b.n	8008c2a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 0201 	bic.w	r2, r2, #1
 8008c28:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	2164      	movs	r1, #100	; 0x64
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f9d4 	bl	8008fdc <SPI_EndRxTransaction>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff ff9b 	bl	8008b94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c5e:	e002      	b.n	8008c66 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7f8 fc75 	bl	8001550 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c7a:	f7f9 fa57 	bl	800212c <HAL_GetTick>
 8008c7e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d030      	beq.n	8008cf0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0220 	bic.w	r2, r2, #32
 8008c9c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	2164      	movs	r1, #100	; 0x64
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f9f2 	bl	800908c <SPI_EndRxTxTransaction>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d005      	beq.n	8008cba <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb2:	f043 0220 	orr.w	r2, r3, #32
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0203 	bic.w	r2, r2, #3
 8008cc8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff53 	bl	8008b94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008cee:	e002      	b.n	8008cf6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7f8 fc3d 	bl	8001570 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff ff2e 	bl	8008b6c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff ff2a 	bl	8008b80 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d2c:	bf00      	nop
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0203 	bic.w	r2, r2, #3
 8008d50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d56:	f043 0210 	orr.w	r2, r3, #16
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff ff14 	bl	8008b94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff feff 	bl	8008b94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008db0:	f7f9 f9bc 	bl	800212c <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008dc0:	f7f9 f9b4 	bl	800212c <HAL_GetTick>
 8008dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dc6:	4b39      	ldr	r3, [pc, #228]	; (8008eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	015b      	lsls	r3, r3, #5
 8008dcc:	0d1b      	lsrs	r3, r3, #20
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dd6:	e054      	b.n	8008e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dde:	d050      	beq.n	8008e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008de0:	f7f9 f9a4 	bl	800212c <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d902      	bls.n	8008df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d13d      	bne.n	8008e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e0e:	d111      	bne.n	8008e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e18:	d004      	beq.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e22:	d107      	bne.n	8008e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3c:	d10f      	bne.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e017      	b.n	8008ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bf0c      	ite	eq
 8008e92:	2301      	moveq	r3, #1
 8008e94:	2300      	movne	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d19b      	bne.n	8008dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	200026d8 	.word	0x200026d8

08008eb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08a      	sub	sp, #40	; 0x28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008ec2:	f7f9 f933 	bl	800212c <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	4413      	add	r3, r2
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008ed2:	f7f9 f92b 	bl	800212c <HAL_GetTick>
 8008ed6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	330c      	adds	r3, #12
 8008ede:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ee0:	4b3d      	ldr	r3, [pc, #244]	; (8008fd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	00da      	lsls	r2, r3, #3
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	0d1b      	lsrs	r3, r3, #20
 8008ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef2:	fb02 f303 	mul.w	r3, r2, r3
 8008ef6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ef8:	e060      	b.n	8008fbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f00:	d107      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d050      	beq.n	8008fbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f1a:	f7f9 f907 	bl	800212c <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d902      	bls.n	8008f30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d13d      	bne.n	8008fac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f48:	d111      	bne.n	8008f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f52:	d004      	beq.n	8008f5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f5c:	d107      	bne.n	8008f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f76:	d10f      	bne.n	8008f98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e010      	b.n	8008fce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d196      	bne.n	8008efa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200026d8 	.word	0x200026d8

08008fdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ff0:	d111      	bne.n	8009016 <SPI_EndRxTransaction+0x3a>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ffa:	d004      	beq.n	8009006 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009004:	d107      	bne.n	8009016 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009014:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2200      	movs	r2, #0
 800901e:	2180      	movs	r1, #128	; 0x80
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7ff febd 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009030:	f043 0220 	orr.w	r2, r3, #32
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e023      	b.n	8009084 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009044:	d11d      	bne.n	8009082 <SPI_EndRxTransaction+0xa6>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904e:	d004      	beq.n	800905a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009058:	d113      	bne.n	8009082 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff ff22 	bl	8008eb0 <SPI_WaitFifoStateUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009076:	f043 0220 	orr.w	r2, r3, #32
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e000      	b.n	8009084 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af02      	add	r7, sp, #8
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2200      	movs	r2, #0
 80090a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff ff03 	bl	8008eb0 <SPI_WaitFifoStateUntilTimeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d007      	beq.n	80090c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090b4:	f043 0220 	orr.w	r2, r3, #32
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e027      	b.n	8009110 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fe68 	bl	8008da0 <SPI_WaitFlagStateUntilTimeout>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d007      	beq.n	80090e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090da:	f043 0220 	orr.w	r2, r3, #32
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e014      	b.n	8009110 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7ff fedc 	bl	8008eb0 <SPI_WaitFifoStateUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009102:	f043 0220 	orr.w	r2, r3, #32
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e000      	b.n	8009110 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e049      	b.n	80091be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7f8 fdc4 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 fbc6 	bl	80098e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d001      	beq.n	80091e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e04c      	b.n	800927a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a26      	ldr	r2, [pc, #152]	; (8009288 <HAL_TIM_Base_Start+0xc0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d022      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fa:	d01d      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a22      	ldr	r2, [pc, #136]	; (800928c <HAL_TIM_Base_Start+0xc4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d018      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a21      	ldr	r2, [pc, #132]	; (8009290 <HAL_TIM_Base_Start+0xc8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d013      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a1f      	ldr	r2, [pc, #124]	; (8009294 <HAL_TIM_Base_Start+0xcc>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00e      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a1e      	ldr	r2, [pc, #120]	; (8009298 <HAL_TIM_Base_Start+0xd0>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d009      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1c      	ldr	r2, [pc, #112]	; (800929c <HAL_TIM_Base_Start+0xd4>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d004      	beq.n	8009238 <HAL_TIM_Base_Start+0x70>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1b      	ldr	r2, [pc, #108]	; (80092a0 <HAL_TIM_Base_Start+0xd8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d115      	bne.n	8009264 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <HAL_TIM_Base_Start+0xdc>)
 8009240:	4013      	ands	r3, r2
 8009242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b06      	cmp	r3, #6
 8009248:	d015      	beq.n	8009276 <HAL_TIM_Base_Start+0xae>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009250:	d011      	beq.n	8009276 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009262:	e008      	b.n	8009276 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e000      	b.n	8009278 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40013400 	.word	0x40013400
 800929c:	40014000 	.word	0x40014000
 80092a0:	40015000 	.word	0x40015000
 80092a4:	00010007 	.word	0x00010007

080092a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6a1a      	ldr	r2, [r3, #32]
 80092b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10f      	bne.n	80092e0 <HAL_TIM_Base_Stop+0x38>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6a1a      	ldr	r2, [r3, #32]
 80092c6:	f244 4344 	movw	r3, #17476	; 0x4444
 80092ca:	4013      	ands	r3, r2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d107      	bne.n	80092e0 <HAL_TIM_Base_Stop+0x38>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0201 	bic.w	r2, r2, #1
 80092de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e049      	b.n	800939c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f841 	bl	80093a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3304      	adds	r3, #4
 8009332:	4619      	mov	r1, r3
 8009334:	4610      	mov	r0, r2
 8009336:	f000 fad7 	bl	80098e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <HAL_TIM_OC_Start+0x24>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	bf14      	ite	ne
 80093d4:	2301      	movne	r3, #1
 80093d6:	2300      	moveq	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	e03c      	b.n	8009456 <HAL_TIM_OC_Start+0x9e>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d109      	bne.n	80093f6 <HAL_TIM_OC_Start+0x3e>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	bf14      	ite	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	2300      	moveq	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	e02f      	b.n	8009456 <HAL_TIM_OC_Start+0x9e>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d109      	bne.n	8009410 <HAL_TIM_OC_Start+0x58>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	e022      	b.n	8009456 <HAL_TIM_OC_Start+0x9e>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b0c      	cmp	r3, #12
 8009414:	d109      	bne.n	800942a <HAL_TIM_OC_Start+0x72>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b01      	cmp	r3, #1
 8009420:	bf14      	ite	ne
 8009422:	2301      	movne	r3, #1
 8009424:	2300      	moveq	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	e015      	b.n	8009456 <HAL_TIM_OC_Start+0x9e>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b10      	cmp	r3, #16
 800942e:	d109      	bne.n	8009444 <HAL_TIM_OC_Start+0x8c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	bf14      	ite	ne
 800943c:	2301      	movne	r3, #1
 800943e:	2300      	moveq	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	e008      	b.n	8009456 <HAL_TIM_OC_Start+0x9e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b01      	cmp	r3, #1
 800944e:	bf14      	ite	ne
 8009450:	2301      	movne	r3, #1
 8009452:	2300      	moveq	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e0a6      	b.n	80095ac <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d104      	bne.n	800946e <HAL_TIM_OC_Start+0xb6>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800946c:	e023      	b.n	80094b6 <HAL_TIM_OC_Start+0xfe>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b04      	cmp	r3, #4
 8009472:	d104      	bne.n	800947e <HAL_TIM_OC_Start+0xc6>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800947c:	e01b      	b.n	80094b6 <HAL_TIM_OC_Start+0xfe>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b08      	cmp	r3, #8
 8009482:	d104      	bne.n	800948e <HAL_TIM_OC_Start+0xd6>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800948c:	e013      	b.n	80094b6 <HAL_TIM_OC_Start+0xfe>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d104      	bne.n	800949e <HAL_TIM_OC_Start+0xe6>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800949c:	e00b      	b.n	80094b6 <HAL_TIM_OC_Start+0xfe>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b10      	cmp	r3, #16
 80094a2:	d104      	bne.n	80094ae <HAL_TIM_OC_Start+0xf6>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094ac:	e003      	b.n	80094b6 <HAL_TIM_OC_Start+0xfe>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fe80 	bl	800a1c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a3a      	ldr	r2, [pc, #232]	; (80095b4 <HAL_TIM_OC_Start+0x1fc>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d018      	beq.n	8009500 <HAL_TIM_OC_Start+0x148>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a39      	ldr	r2, [pc, #228]	; (80095b8 <HAL_TIM_OC_Start+0x200>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d013      	beq.n	8009500 <HAL_TIM_OC_Start+0x148>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a37      	ldr	r2, [pc, #220]	; (80095bc <HAL_TIM_OC_Start+0x204>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00e      	beq.n	8009500 <HAL_TIM_OC_Start+0x148>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a36      	ldr	r2, [pc, #216]	; (80095c0 <HAL_TIM_OC_Start+0x208>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d009      	beq.n	8009500 <HAL_TIM_OC_Start+0x148>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a34      	ldr	r2, [pc, #208]	; (80095c4 <HAL_TIM_OC_Start+0x20c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <HAL_TIM_OC_Start+0x148>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a33      	ldr	r2, [pc, #204]	; (80095c8 <HAL_TIM_OC_Start+0x210>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d101      	bne.n	8009504 <HAL_TIM_OC_Start+0x14c>
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <HAL_TIM_OC_Start+0x14e>
 8009504:	2300      	movs	r3, #0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d007      	beq.n	800951a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a25      	ldr	r2, [pc, #148]	; (80095b4 <HAL_TIM_OC_Start+0x1fc>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d022      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952c:	d01d      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a26      	ldr	r2, [pc, #152]	; (80095cc <HAL_TIM_OC_Start+0x214>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d018      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a24      	ldr	r2, [pc, #144]	; (80095d0 <HAL_TIM_OC_Start+0x218>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a23      	ldr	r2, [pc, #140]	; (80095d4 <HAL_TIM_OC_Start+0x21c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00e      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <HAL_TIM_OC_Start+0x200>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d009      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a18      	ldr	r2, [pc, #96]	; (80095bc <HAL_TIM_OC_Start+0x204>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d004      	beq.n	800956a <HAL_TIM_OC_Start+0x1b2>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a18      	ldr	r2, [pc, #96]	; (80095c8 <HAL_TIM_OC_Start+0x210>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d115      	bne.n	8009596 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	4b19      	ldr	r3, [pc, #100]	; (80095d8 <HAL_TIM_OC_Start+0x220>)
 8009572:	4013      	ands	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b06      	cmp	r3, #6
 800957a:	d015      	beq.n	80095a8 <HAL_TIM_OC_Start+0x1f0>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009582:	d011      	beq.n	80095a8 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0201 	orr.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009594:	e008      	b.n	80095a8 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0201 	orr.w	r2, r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e000      	b.n	80095aa <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40012c00 	.word	0x40012c00
 80095b8:	40013400 	.word	0x40013400
 80095bc:	40014000 	.word	0x40014000
 80095c0:	40014400 	.word	0x40014400
 80095c4:	40014800 	.word	0x40014800
 80095c8:	40015000 	.word	0x40015000
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	00010007 	.word	0x00010007

080095dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80095f6:	2302      	movs	r3, #2
 80095f8:	e066      	b.n	80096c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b14      	cmp	r3, #20
 8009606:	d857      	bhi.n	80096b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009608:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <HAL_TIM_OC_ConfigChannel+0x34>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009665 	.word	0x08009665
 8009614:	080096b9 	.word	0x080096b9
 8009618:	080096b9 	.word	0x080096b9
 800961c:	080096b9 	.word	0x080096b9
 8009620:	08009673 	.word	0x08009673
 8009624:	080096b9 	.word	0x080096b9
 8009628:	080096b9 	.word	0x080096b9
 800962c:	080096b9 	.word	0x080096b9
 8009630:	08009681 	.word	0x08009681
 8009634:	080096b9 	.word	0x080096b9
 8009638:	080096b9 	.word	0x080096b9
 800963c:	080096b9 	.word	0x080096b9
 8009640:	0800968f 	.word	0x0800968f
 8009644:	080096b9 	.word	0x080096b9
 8009648:	080096b9 	.word	0x080096b9
 800964c:	080096b9 	.word	0x080096b9
 8009650:	0800969d 	.word	0x0800969d
 8009654:	080096b9 	.word	0x080096b9
 8009658:	080096b9 	.word	0x080096b9
 800965c:	080096b9 	.word	0x080096b9
 8009660:	080096ab 	.word	0x080096ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68b9      	ldr	r1, [r7, #8]
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f9e4 	bl	8009a38 <TIM_OC1_SetConfig>
      break;
 8009670:	e025      	b.n	80096be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fa77 	bl	8009b6c <TIM_OC2_SetConfig>
      break;
 800967e:	e01e      	b.n	80096be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fb04 	bl	8009c94 <TIM_OC3_SetConfig>
      break;
 800968c:	e017      	b.n	80096be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fb8f 	bl	8009db8 <TIM_OC4_SetConfig>
      break;
 800969a:	e010      	b.n	80096be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68b9      	ldr	r1, [r7, #8]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 fc1c 	bl	8009ee0 <TIM_OC5_SetConfig>
      break;
 80096a8:	e009      	b.n	80096be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fc7f 	bl	8009fb4 <TIM_OC6_SetConfig>
      break;
 80096b6:	e002      	b.n	80096be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	75fb      	strb	r3, [r7, #23]
      break;
 80096bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_ConfigClockSource+0x1c>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e0ee      	b.n	80098ca <HAL_TIM_ConfigClockSource+0x1fa>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800970a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800970e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a6b      	ldr	r2, [pc, #428]	; (80098d4 <HAL_TIM_ConfigClockSource+0x204>)
 8009726:	4293      	cmp	r3, r2
 8009728:	f000 80b9 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800972c:	4a69      	ldr	r2, [pc, #420]	; (80098d4 <HAL_TIM_ConfigClockSource+0x204>)
 800972e:	4293      	cmp	r3, r2
 8009730:	f200 80be 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009734:	4a68      	ldr	r2, [pc, #416]	; (80098d8 <HAL_TIM_ConfigClockSource+0x208>)
 8009736:	4293      	cmp	r3, r2
 8009738:	f000 80b1 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800973c:	4a66      	ldr	r2, [pc, #408]	; (80098d8 <HAL_TIM_ConfigClockSource+0x208>)
 800973e:	4293      	cmp	r3, r2
 8009740:	f200 80b6 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009744:	4a65      	ldr	r2, [pc, #404]	; (80098dc <HAL_TIM_ConfigClockSource+0x20c>)
 8009746:	4293      	cmp	r3, r2
 8009748:	f000 80a9 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800974c:	4a63      	ldr	r2, [pc, #396]	; (80098dc <HAL_TIM_ConfigClockSource+0x20c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	f200 80ae 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009754:	4a62      	ldr	r2, [pc, #392]	; (80098e0 <HAL_TIM_ConfigClockSource+0x210>)
 8009756:	4293      	cmp	r3, r2
 8009758:	f000 80a1 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800975c:	4a60      	ldr	r2, [pc, #384]	; (80098e0 <HAL_TIM_ConfigClockSource+0x210>)
 800975e:	4293      	cmp	r3, r2
 8009760:	f200 80a6 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009764:	4a5f      	ldr	r2, [pc, #380]	; (80098e4 <HAL_TIM_ConfigClockSource+0x214>)
 8009766:	4293      	cmp	r3, r2
 8009768:	f000 8099 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800976c:	4a5d      	ldr	r2, [pc, #372]	; (80098e4 <HAL_TIM_ConfigClockSource+0x214>)
 800976e:	4293      	cmp	r3, r2
 8009770:	f200 809e 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009774:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009778:	f000 8091 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800977c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009780:	f200 8096 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009788:	f000 8089 	beq.w	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 800978c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009790:	f200 808e 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 8009794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009798:	d03e      	beq.n	8009818 <HAL_TIM_ConfigClockSource+0x148>
 800979a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800979e:	f200 8087 	bhi.w	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a6:	f000 8086 	beq.w	80098b6 <HAL_TIM_ConfigClockSource+0x1e6>
 80097aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ae:	d87f      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097b0:	2b70      	cmp	r3, #112	; 0x70
 80097b2:	d01a      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x11a>
 80097b4:	2b70      	cmp	r3, #112	; 0x70
 80097b6:	d87b      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097b8:	2b60      	cmp	r3, #96	; 0x60
 80097ba:	d050      	beq.n	800985e <HAL_TIM_ConfigClockSource+0x18e>
 80097bc:	2b60      	cmp	r3, #96	; 0x60
 80097be:	d877      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097c0:	2b50      	cmp	r3, #80	; 0x50
 80097c2:	d03c      	beq.n	800983e <HAL_TIM_ConfigClockSource+0x16e>
 80097c4:	2b50      	cmp	r3, #80	; 0x50
 80097c6:	d873      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d058      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x1ae>
 80097cc:	2b40      	cmp	r3, #64	; 0x40
 80097ce:	d86f      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097d0:	2b30      	cmp	r3, #48	; 0x30
 80097d2:	d064      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097d4:	2b30      	cmp	r3, #48	; 0x30
 80097d6:	d86b      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d060      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097dc:	2b20      	cmp	r3, #32
 80097de:	d867      	bhi.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d05c      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d05a      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x1ce>
 80097e8:	e062      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	6899      	ldr	r1, [r3, #8]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f000 fcc3 	bl	800a184 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800980c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	609a      	str	r2, [r3, #8]
      break;
 8009816:	e04f      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6899      	ldr	r1, [r3, #8]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f000 fcac 	bl	800a184 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800983a:	609a      	str	r2, [r3, #8]
      break;
 800983c:	e03c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	6859      	ldr	r1, [r3, #4]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	461a      	mov	r2, r3
 800984c:	f000 fc1e 	bl	800a08c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2150      	movs	r1, #80	; 0x50
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fc77 	bl	800a14a <TIM_ITRx_SetConfig>
      break;
 800985c:	e02c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6859      	ldr	r1, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	461a      	mov	r2, r3
 800986c:	f000 fc3d 	bl	800a0ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2160      	movs	r1, #96	; 0x60
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fc67 	bl	800a14a <TIM_ITRx_SetConfig>
      break;
 800987c:	e01c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	f000 fbfe 	bl	800a08c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2140      	movs	r1, #64	; 0x40
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fc57 	bl	800a14a <TIM_ITRx_SetConfig>
      break;
 800989c:	e00c      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4619      	mov	r1, r3
 80098a8:	4610      	mov	r0, r2
 80098aa:	f000 fc4e 	bl	800a14a <TIM_ITRx_SetConfig>
      break;
 80098ae:	e003      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
      break;
 80098b4:	e000      	b.n	80098b8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80098b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	00100070 	.word	0x00100070
 80098d8:	00100050 	.word	0x00100050
 80098dc:	00100040 	.word	0x00100040
 80098e0:	00100030 	.word	0x00100030
 80098e4:	00100020 	.word	0x00100020

080098e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a46      	ldr	r2, [pc, #280]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d017      	beq.n	8009930 <TIM_Base_SetConfig+0x48>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d013      	beq.n	8009930 <TIM_Base_SetConfig+0x48>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a43      	ldr	r2, [pc, #268]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00f      	beq.n	8009930 <TIM_Base_SetConfig+0x48>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a42      	ldr	r2, [pc, #264]	; (8009a1c <TIM_Base_SetConfig+0x134>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00b      	beq.n	8009930 <TIM_Base_SetConfig+0x48>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a41      	ldr	r2, [pc, #260]	; (8009a20 <TIM_Base_SetConfig+0x138>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d007      	beq.n	8009930 <TIM_Base_SetConfig+0x48>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a40      	ldr	r2, [pc, #256]	; (8009a24 <TIM_Base_SetConfig+0x13c>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_Base_SetConfig+0x48>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a3f      	ldr	r2, [pc, #252]	; (8009a28 <TIM_Base_SetConfig+0x140>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d108      	bne.n	8009942 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a33      	ldr	r2, [pc, #204]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d023      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009950:	d01f      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a30      	ldr	r2, [pc, #192]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d01b      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a2f      	ldr	r2, [pc, #188]	; (8009a1c <TIM_Base_SetConfig+0x134>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d017      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a2e      	ldr	r2, [pc, #184]	; (8009a20 <TIM_Base_SetConfig+0x138>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d013      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <TIM_Base_SetConfig+0x13c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00f      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a2d      	ldr	r2, [pc, #180]	; (8009a2c <TIM_Base_SetConfig+0x144>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00b      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2c      	ldr	r2, [pc, #176]	; (8009a30 <TIM_Base_SetConfig+0x148>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d007      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a2b      	ldr	r2, [pc, #172]	; (8009a34 <TIM_Base_SetConfig+0x14c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d003      	beq.n	8009992 <TIM_Base_SetConfig+0xaa>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a26      	ldr	r2, [pc, #152]	; (8009a28 <TIM_Base_SetConfig+0x140>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d108      	bne.n	80099a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a12      	ldr	r2, [pc, #72]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d013      	beq.n	80099f8 <TIM_Base_SetConfig+0x110>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a14      	ldr	r2, [pc, #80]	; (8009a24 <TIM_Base_SetConfig+0x13c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00f      	beq.n	80099f8 <TIM_Base_SetConfig+0x110>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a14      	ldr	r2, [pc, #80]	; (8009a2c <TIM_Base_SetConfig+0x144>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d00b      	beq.n	80099f8 <TIM_Base_SetConfig+0x110>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a13      	ldr	r2, [pc, #76]	; (8009a30 <TIM_Base_SetConfig+0x148>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d007      	beq.n	80099f8 <TIM_Base_SetConfig+0x110>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a12      	ldr	r2, [pc, #72]	; (8009a34 <TIM_Base_SetConfig+0x14c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d003      	beq.n	80099f8 <TIM_Base_SetConfig+0x110>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a0d      	ldr	r2, [pc, #52]	; (8009a28 <TIM_Base_SetConfig+0x140>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d103      	bne.n	8009a00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	691a      	ldr	r2, [r3, #16]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	615a      	str	r2, [r3, #20]
}
 8009a06:	bf00      	nop
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	40012c00 	.word	0x40012c00
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40013400 	.word	0x40013400
 8009a28:	40015000 	.word	0x40015000
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40014400 	.word	0x40014400
 8009a34:	40014800 	.word	0x40014800

08009a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	f023 0201 	bic.w	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0303 	bic.w	r3, r3, #3
 8009a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f023 0302 	bic.w	r3, r3, #2
 8009a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a30      	ldr	r2, [pc, #192]	; (8009b54 <TIM_OC1_SetConfig+0x11c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d013      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x88>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a2f      	ldr	r2, [pc, #188]	; (8009b58 <TIM_OC1_SetConfig+0x120>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00f      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x88>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a2e      	ldr	r2, [pc, #184]	; (8009b5c <TIM_OC1_SetConfig+0x124>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00b      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x88>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a2d      	ldr	r2, [pc, #180]	; (8009b60 <TIM_OC1_SetConfig+0x128>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d007      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x88>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a2c      	ldr	r2, [pc, #176]	; (8009b64 <TIM_OC1_SetConfig+0x12c>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d003      	beq.n	8009ac0 <TIM_OC1_SetConfig+0x88>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a2b      	ldr	r2, [pc, #172]	; (8009b68 <TIM_OC1_SetConfig+0x130>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d10c      	bne.n	8009ada <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0308 	bic.w	r3, r3, #8
 8009ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f023 0304 	bic.w	r3, r3, #4
 8009ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <TIM_OC1_SetConfig+0x11c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d013      	beq.n	8009b0a <TIM_OC1_SetConfig+0xd2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a1c      	ldr	r2, [pc, #112]	; (8009b58 <TIM_OC1_SetConfig+0x120>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00f      	beq.n	8009b0a <TIM_OC1_SetConfig+0xd2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a1b      	ldr	r2, [pc, #108]	; (8009b5c <TIM_OC1_SetConfig+0x124>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00b      	beq.n	8009b0a <TIM_OC1_SetConfig+0xd2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <TIM_OC1_SetConfig+0x128>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d007      	beq.n	8009b0a <TIM_OC1_SetConfig+0xd2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <TIM_OC1_SetConfig+0x12c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d003      	beq.n	8009b0a <TIM_OC1_SetConfig+0xd2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <TIM_OC1_SetConfig+0x130>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d111      	bne.n	8009b2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	621a      	str	r2, [r3, #32]
}
 8009b48:	bf00      	nop
 8009b4a:	371c      	adds	r7, #28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	40012c00 	.word	0x40012c00
 8009b58:	40013400 	.word	0x40013400
 8009b5c:	40014000 	.word	0x40014000
 8009b60:	40014400 	.word	0x40014400
 8009b64:	40014800 	.word	0x40014800
 8009b68:	40015000 	.word	0x40015000

08009b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f023 0210 	bic.w	r2, r3, #16
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f023 0320 	bic.w	r3, r3, #32
 8009bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a2c      	ldr	r2, [pc, #176]	; (8009c7c <TIM_OC2_SetConfig+0x110>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d007      	beq.n	8009be0 <TIM_OC2_SetConfig+0x74>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a2b      	ldr	r2, [pc, #172]	; (8009c80 <TIM_OC2_SetConfig+0x114>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d003      	beq.n	8009be0 <TIM_OC2_SetConfig+0x74>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a2a      	ldr	r2, [pc, #168]	; (8009c84 <TIM_OC2_SetConfig+0x118>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d10d      	bne.n	8009bfc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a1f      	ldr	r2, [pc, #124]	; (8009c7c <TIM_OC2_SetConfig+0x110>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d013      	beq.n	8009c2c <TIM_OC2_SetConfig+0xc0>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <TIM_OC2_SetConfig+0x114>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00f      	beq.n	8009c2c <TIM_OC2_SetConfig+0xc0>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a1e      	ldr	r2, [pc, #120]	; (8009c88 <TIM_OC2_SetConfig+0x11c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00b      	beq.n	8009c2c <TIM_OC2_SetConfig+0xc0>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a1d      	ldr	r2, [pc, #116]	; (8009c8c <TIM_OC2_SetConfig+0x120>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d007      	beq.n	8009c2c <TIM_OC2_SetConfig+0xc0>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a1c      	ldr	r2, [pc, #112]	; (8009c90 <TIM_OC2_SetConfig+0x124>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d003      	beq.n	8009c2c <TIM_OC2_SetConfig+0xc0>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a17      	ldr	r2, [pc, #92]	; (8009c84 <TIM_OC2_SetConfig+0x118>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d113      	bne.n	8009c54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	621a      	str	r2, [r3, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	40012c00 	.word	0x40012c00
 8009c80:	40013400 	.word	0x40013400
 8009c84:	40015000 	.word	0x40015000
 8009c88:	40014000 	.word	0x40014000
 8009c8c:	40014400 	.word	0x40014400
 8009c90:	40014800 	.word	0x40014800

08009c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	021b      	lsls	r3, r3, #8
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a2b      	ldr	r2, [pc, #172]	; (8009da0 <TIM_OC3_SetConfig+0x10c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_OC3_SetConfig+0x72>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a2a      	ldr	r2, [pc, #168]	; (8009da4 <TIM_OC3_SetConfig+0x110>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_OC3_SetConfig+0x72>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a29      	ldr	r2, [pc, #164]	; (8009da8 <TIM_OC3_SetConfig+0x114>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d10d      	bne.n	8009d22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	021b      	lsls	r3, r3, #8
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <TIM_OC3_SetConfig+0x10c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d013      	beq.n	8009d52 <TIM_OC3_SetConfig+0xbe>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <TIM_OC3_SetConfig+0x110>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00f      	beq.n	8009d52 <TIM_OC3_SetConfig+0xbe>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a1d      	ldr	r2, [pc, #116]	; (8009dac <TIM_OC3_SetConfig+0x118>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00b      	beq.n	8009d52 <TIM_OC3_SetConfig+0xbe>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a1c      	ldr	r2, [pc, #112]	; (8009db0 <TIM_OC3_SetConfig+0x11c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d007      	beq.n	8009d52 <TIM_OC3_SetConfig+0xbe>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a1b      	ldr	r2, [pc, #108]	; (8009db4 <TIM_OC3_SetConfig+0x120>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d003      	beq.n	8009d52 <TIM_OC3_SetConfig+0xbe>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a16      	ldr	r2, [pc, #88]	; (8009da8 <TIM_OC3_SetConfig+0x114>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d113      	bne.n	8009d7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	621a      	str	r2, [r3, #32]
}
 8009d94:	bf00      	nop
 8009d96:	371c      	adds	r7, #28
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	40012c00 	.word	0x40012c00
 8009da4:	40013400 	.word	0x40013400
 8009da8:	40015000 	.word	0x40015000
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800

08009db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	031b      	lsls	r3, r3, #12
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a2c      	ldr	r2, [pc, #176]	; (8009ec8 <TIM_OC4_SetConfig+0x110>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d007      	beq.n	8009e2c <TIM_OC4_SetConfig+0x74>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a2b      	ldr	r2, [pc, #172]	; (8009ecc <TIM_OC4_SetConfig+0x114>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <TIM_OC4_SetConfig+0x74>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a2a      	ldr	r2, [pc, #168]	; (8009ed0 <TIM_OC4_SetConfig+0x118>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d10d      	bne.n	8009e48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	031b      	lsls	r3, r3, #12
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a1f      	ldr	r2, [pc, #124]	; (8009ec8 <TIM_OC4_SetConfig+0x110>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d013      	beq.n	8009e78 <TIM_OC4_SetConfig+0xc0>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a1e      	ldr	r2, [pc, #120]	; (8009ecc <TIM_OC4_SetConfig+0x114>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d00f      	beq.n	8009e78 <TIM_OC4_SetConfig+0xc0>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <TIM_OC4_SetConfig+0x11c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d00b      	beq.n	8009e78 <TIM_OC4_SetConfig+0xc0>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1d      	ldr	r2, [pc, #116]	; (8009ed8 <TIM_OC4_SetConfig+0x120>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d007      	beq.n	8009e78 <TIM_OC4_SetConfig+0xc0>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1c      	ldr	r2, [pc, #112]	; (8009edc <TIM_OC4_SetConfig+0x124>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d003      	beq.n	8009e78 <TIM_OC4_SetConfig+0xc0>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a17      	ldr	r2, [pc, #92]	; (8009ed0 <TIM_OC4_SetConfig+0x118>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d113      	bne.n	8009ea0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	019b      	lsls	r3, r3, #6
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	019b      	lsls	r3, r3, #6
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	621a      	str	r2, [r3, #32]
}
 8009eba:	bf00      	nop
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40012c00 	.word	0x40012c00
 8009ecc:	40013400 	.word	0x40013400
 8009ed0:	40015000 	.word	0x40015000
 8009ed4:	40014000 	.word	0x40014000
 8009ed8:	40014400 	.word	0x40014400
 8009edc:	40014800 	.word	0x40014800

08009ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	041b      	lsls	r3, r3, #16
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a19      	ldr	r2, [pc, #100]	; (8009f9c <TIM_OC5_SetConfig+0xbc>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <TIM_OC5_SetConfig+0x82>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a18      	ldr	r2, [pc, #96]	; (8009fa0 <TIM_OC5_SetConfig+0xc0>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00f      	beq.n	8009f62 <TIM_OC5_SetConfig+0x82>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a17      	ldr	r2, [pc, #92]	; (8009fa4 <TIM_OC5_SetConfig+0xc4>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00b      	beq.n	8009f62 <TIM_OC5_SetConfig+0x82>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <TIM_OC5_SetConfig+0xc8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d007      	beq.n	8009f62 <TIM_OC5_SetConfig+0x82>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a15      	ldr	r2, [pc, #84]	; (8009fac <TIM_OC5_SetConfig+0xcc>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_OC5_SetConfig+0x82>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a14      	ldr	r2, [pc, #80]	; (8009fb0 <TIM_OC5_SetConfig+0xd0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d109      	bne.n	8009f76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	621a      	str	r2, [r3, #32]
}
 8009f90:	bf00      	nop
 8009f92:	371c      	adds	r7, #28
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	40012c00 	.word	0x40012c00
 8009fa0:	40013400 	.word	0x40013400
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40014400 	.word	0x40014400
 8009fac:	40014800 	.word	0x40014800
 8009fb0:	40015000 	.word	0x40015000

08009fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	051b      	lsls	r3, r3, #20
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	4313      	orrs	r3, r2
 800a006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a1a      	ldr	r2, [pc, #104]	; (800a074 <TIM_OC6_SetConfig+0xc0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d013      	beq.n	800a038 <TIM_OC6_SetConfig+0x84>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a19      	ldr	r2, [pc, #100]	; (800a078 <TIM_OC6_SetConfig+0xc4>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d00f      	beq.n	800a038 <TIM_OC6_SetConfig+0x84>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a18      	ldr	r2, [pc, #96]	; (800a07c <TIM_OC6_SetConfig+0xc8>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d00b      	beq.n	800a038 <TIM_OC6_SetConfig+0x84>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a17      	ldr	r2, [pc, #92]	; (800a080 <TIM_OC6_SetConfig+0xcc>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d007      	beq.n	800a038 <TIM_OC6_SetConfig+0x84>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a16      	ldr	r2, [pc, #88]	; (800a084 <TIM_OC6_SetConfig+0xd0>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d003      	beq.n	800a038 <TIM_OC6_SetConfig+0x84>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a15      	ldr	r2, [pc, #84]	; (800a088 <TIM_OC6_SetConfig+0xd4>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d109      	bne.n	800a04c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a03e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	029b      	lsls	r3, r3, #10
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	4313      	orrs	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	40012c00 	.word	0x40012c00
 800a078:	40013400 	.word	0x40013400
 800a07c:	40014000 	.word	0x40014000
 800a080:	40014400 	.word	0x40014400
 800a084:	40014800 	.word	0x40014800
 800a088:	40015000 	.word	0x40015000

0800a08c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	f023 0201 	bic.w	r2, r3, #1
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f023 030a 	bic.w	r3, r3, #10
 800a0c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	621a      	str	r2, [r3, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b087      	sub	sp, #28
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	f023 0210 	bic.w	r2, r3, #16
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	031b      	lsls	r3, r3, #12
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	4313      	orrs	r3, r2
 800a130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	621a      	str	r2, [r3, #32]
}
 800a13e:	bf00      	nop
 800a140:	371c      	adds	r7, #28
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	f043 0307 	orr.w	r3, r3, #7
 800a170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	609a      	str	r2, [r3, #8]
}
 800a178:	bf00      	nop
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a19e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	021a      	lsls	r2, r3, #8
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	609a      	str	r2, [r3, #8]
}
 800a1b8:	bf00      	nop
 800a1ba:	371c      	adds	r7, #28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f003 031f 	and.w	r3, r3, #31
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6a1a      	ldr	r2, [r3, #32]
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	43db      	mvns	r3, r3
 800a1e6:	401a      	ands	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a1a      	ldr	r2, [r3, #32]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f003 031f 	and.w	r3, r3, #31
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	621a      	str	r2, [r3, #32]
}
 800a202:	bf00      	nop
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
	...

0800a210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a224:	2302      	movs	r3, #2
 800a226:	e074      	b.n	800a312 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a34      	ldr	r2, [pc, #208]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d009      	beq.n	800a266 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a33      	ldr	r2, [pc, #204]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d004      	beq.n	800a266 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a31      	ldr	r2, [pc, #196]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d108      	bne.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a26c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a21      	ldr	r2, [pc, #132]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d022      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a8:	d01d      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1f      	ldr	r2, [pc, #124]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d018      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1d      	ldr	r2, [pc, #116]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d013      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a1c      	ldr	r2, [pc, #112]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00e      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a15      	ldr	r2, [pc, #84]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d009      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a18      	ldr	r2, [pc, #96]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d004      	beq.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a11      	ldr	r2, [pc, #68]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d10c      	bne.n	800a300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	40012c00 	.word	0x40012c00
 800a324:	40013400 	.word	0x40013400
 800a328:	40015000 	.word	0x40015000
 800a32c:	40000400 	.word	0x40000400
 800a330:	40000800 	.word	0x40000800
 800a334:	40000c00 	.word	0x40000c00
 800a338:	40014000 	.word	0x40014000

0800a33c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a354:	2302      	movs	r3, #2
 800a356:	e096      	b.n	800a486 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	4313      	orrs	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4313      	orrs	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	041b      	lsls	r3, r3, #16
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a2f      	ldr	r2, [pc, #188]	; (800a494 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d009      	beq.n	800a3f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a2d      	ldr	r2, [pc, #180]	; (800a498 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d004      	beq.n	800a3f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a2c      	ldr	r2, [pc, #176]	; (800a49c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d106      	bne.n	800a3fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a24      	ldr	r2, [pc, #144]	; (800a494 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d009      	beq.n	800a41c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a22      	ldr	r2, [pc, #136]	; (800a498 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d004      	beq.n	800a41c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a21      	ldr	r2, [pc, #132]	; (800a49c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d12b      	bne.n	800a474 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a426:	051b      	lsls	r3, r3, #20
 800a428:	4313      	orrs	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	4313      	orrs	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a11      	ldr	r2, [pc, #68]	; (800a494 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d009      	beq.n	800a466 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a10      	ldr	r2, [pc, #64]	; (800a498 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d004      	beq.n	800a466 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a0e      	ldr	r2, [pc, #56]	; (800a49c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d106      	bne.n	800a474 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	4313      	orrs	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40012c00 	.word	0x40012c00
 800a498:	40013400 	.word	0x40013400
 800a49c:	40015000 	.word	0x40015000

0800a4a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a4b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a4b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a4d6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a4da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	43db      	mvns	r3, r3
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a504:	b084      	sub	sp, #16
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	f107 0014 	add.w	r0, r7, #20
 800a512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	b004      	add	sp, #16
 800a544:	4770      	bx	lr
	...

0800a548 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a548:	b480      	push	{r7}
 800a54a:	b09d      	sub	sp, #116	; 0x74
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	b29b      	uxth	r3, r3
 800a566:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a56e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	78db      	ldrb	r3, [r3, #3]
 800a576:	2b03      	cmp	r3, #3
 800a578:	d81f      	bhi.n	800a5ba <USB_ActivateEndpoint+0x72>
 800a57a:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <USB_ActivateEndpoint+0x38>)
 800a57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a580:	0800a591 	.word	0x0800a591
 800a584:	0800a5ad 	.word	0x0800a5ad
 800a588:	0800a5c3 	.word	0x0800a5c3
 800a58c:	0800a59f 	.word	0x0800a59f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a590:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a59c:	e012      	b.n	800a5c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a59e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a5a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5aa:	e00b      	b.n	800a5c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a5ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5b8:	e004      	b.n	800a5c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a5c0:	e000      	b.n	800a5c4 <USB_ActivateEndpoint+0x7c>
      break;
 800a5c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	441a      	add	r2, r3
 800a5ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	b21b      	sxth	r3, r3
 800a5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fe:	b21a      	sxth	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	b21b      	sxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b21b      	sxth	r3, r3
 800a60a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	441a      	add	r2, r3
 800a618:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a61c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	7b1b      	ldrb	r3, [r3, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 8149 	bne.w	800a8cc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	785b      	ldrb	r3, [r3, #1]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 8084 	beq.w	800a74c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a64e:	b29b      	uxth	r3, r3
 800a650:	461a      	mov	r2, r3
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	4413      	add	r3, r2
 800a656:	61bb      	str	r3, [r7, #24]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	00da      	lsls	r2, r3, #3
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	88db      	ldrh	r3, [r3, #6]
 800a66c:	085b      	lsrs	r3, r3, #1
 800a66e:	b29b      	uxth	r3, r3
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	827b      	strh	r3, [r7, #18]
 800a686:	8a7b      	ldrh	r3, [r7, #18]
 800a688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d01b      	beq.n	800a6c8 <USB_ActivateEndpoint+0x180>
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a6:	823b      	strh	r3, [r7, #16]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	441a      	add	r2, r3
 800a6b2:	8a3b      	ldrh	r3, [r7, #16]
 800a6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	78db      	ldrb	r3, [r3, #3]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d020      	beq.n	800a712 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e6:	81bb      	strh	r3, [r7, #12]
 800a6e8:	89bb      	ldrh	r3, [r7, #12]
 800a6ea:	f083 0320 	eor.w	r3, r3, #32
 800a6ee:	81bb      	strh	r3, [r7, #12]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	441a      	add	r2, r3
 800a6fa:	89bb      	ldrh	r3, [r7, #12]
 800a6fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	8013      	strh	r3, [r2, #0]
 800a710:	e2a6      	b.n	800ac60 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a728:	81fb      	strh	r3, [r7, #14]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	441a      	add	r2, r3
 800a734:	89fb      	ldrh	r3, [r7, #14]
 800a736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a73a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a73e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a746:	b29b      	uxth	r3, r3
 800a748:	8013      	strh	r3, [r2, #0]
 800a74a:	e289      	b.n	800ac60 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	633b      	str	r3, [r7, #48]	; 0x30
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a756:	b29b      	uxth	r3, r3
 800a758:	461a      	mov	r2, r3
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	4413      	add	r3, r2
 800a75e:	633b      	str	r3, [r7, #48]	; 0x30
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	00da      	lsls	r2, r3, #3
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	4413      	add	r3, r2
 800a76a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a76e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	88db      	ldrh	r3, [r3, #6]
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	b29b      	uxth	r3, r3
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	62bb      	str	r3, [r7, #40]	; 0x28
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a790:	4413      	add	r3, r2
 800a792:	62bb      	str	r3, [r7, #40]	; 0x28
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	00da      	lsls	r2, r3, #3
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	4413      	add	r3, r2
 800a79e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	2b3e      	cmp	r3, #62	; 0x3e
 800a7aa:	d918      	bls.n	800a7de <USB_ActivateEndpoint+0x296>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	f003 031f 	and.w	r3, r3, #31
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <USB_ActivateEndpoint+0x27e>
 800a7c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	029b      	lsls	r3, r3, #10
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7da:	801a      	strh	r2, [r3, #0]
 800a7dc:	e029      	b.n	800a832 <USB_ActivateEndpoint+0x2ea>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d112      	bne.n	800a80c <USB_ActivateEndpoint+0x2c4>
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	881b      	ldrh	r3, [r3, #0]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	801a      	strh	r2, [r3, #0]
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a804:	b29a      	uxth	r2, r3
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	e012      	b.n	800a832 <USB_ActivateEndpoint+0x2ea>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	085b      	lsrs	r3, r3, #1
 800a812:	66bb      	str	r3, [r7, #104]	; 0x68
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <USB_ActivateEndpoint+0x2de>
 800a820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a822:	3301      	adds	r3, #1
 800a824:	66bb      	str	r3, [r7, #104]	; 0x68
 800a826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a828:	b29b      	uxth	r3, r3
 800a82a:	029b      	lsls	r3, r3, #10
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01b      	beq.n	800a882 <USB_ActivateEndpoint+0x33a>
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a860:	843b      	strh	r3, [r7, #32]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	441a      	add	r2, r3
 800a86c:	8c3b      	ldrh	r3, [r7, #32]
 800a86e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87e:	b29b      	uxth	r3, r3
 800a880:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a898:	83fb      	strh	r3, [r7, #30]
 800a89a:	8bfb      	ldrh	r3, [r7, #30]
 800a89c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8a0:	83fb      	strh	r3, [r7, #30]
 800a8a2:	8bfb      	ldrh	r3, [r7, #30]
 800a8a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8a8:	83fb      	strh	r3, [r7, #30]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	441a      	add	r2, r3
 800a8b4:	8bfb      	ldrh	r3, [r7, #30]
 800a8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8013      	strh	r3, [r2, #0]
 800a8ca:	e1c9      	b.n	800ac60 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	78db      	ldrb	r3, [r3, #3]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d11e      	bne.n	800a912 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	441a      	add	r2, r3
 800a8f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a8fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a904:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	8013      	strh	r3, [r2, #0]
 800a910:	e01d      	b.n	800a94e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a928:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	441a      	add	r2, r3
 800a936:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a93a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a93e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a958:	b29b      	uxth	r3, r3
 800a95a:	461a      	mov	r2, r3
 800a95c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a95e:	4413      	add	r3, r2
 800a960:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	00da      	lsls	r2, r3, #3
 800a968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a970:	65bb      	str	r3, [r7, #88]	; 0x58
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	891b      	ldrh	r3, [r3, #8]
 800a976:	085b      	lsrs	r3, r3, #1
 800a978:	b29b      	uxth	r3, r3
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a980:	801a      	strh	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	657b      	str	r3, [r7, #84]	; 0x54
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	461a      	mov	r2, r3
 800a990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a992:	4413      	add	r3, r2
 800a994:	657b      	str	r3, [r7, #84]	; 0x54
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	00da      	lsls	r2, r3, #3
 800a99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a99e:	4413      	add	r3, r2
 800a9a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9a4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	895b      	ldrh	r3, [r3, #10]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	785b      	ldrb	r3, [r3, #1]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f040 8093 	bne.w	800aae6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a9d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a9d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d01b      	beq.n	800aa14 <USB_ActivateEndpoint+0x4cc>
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	441a      	add	r2, r3
 800a9fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aa22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01b      	beq.n	800aa64 <USB_ActivateEndpoint+0x51c>
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa42:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	441a      	add	r2, r3
 800aa4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7a:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa82:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa8a:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	441a      	add	r2, r3
 800aa96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aabe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aac2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	441a      	add	r2, r3
 800aace:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aadc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	8013      	strh	r3, [r2, #0]
 800aae4:	e0bc      	b.n	800ac60 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aaf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aafa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01d      	beq.n	800ab3e <USB_ActivateEndpoint+0x5f6>
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	441a      	add	r2, r3
 800ab26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ab2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ab4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d01d      	beq.n	800ab96 <USB_ActivateEndpoint+0x64e>
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab70:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	441a      	add	r2, r3
 800ab7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ab82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	78db      	ldrb	r3, [r3, #3]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d024      	beq.n	800abe8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800abb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800abbc:	f083 0320 	eor.w	r3, r3, #32
 800abc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	441a      	add	r2, r3
 800abce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800abd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	8013      	strh	r3, [r2, #0]
 800abe6:	e01d      	b.n	800ac24 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	441a      	add	r2, r3
 800ac0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ac10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	441a      	add	r2, r3
 800ac48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ac60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3774      	adds	r7, #116	; 0x74
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b08d      	sub	sp, #52	; 0x34
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	7b1b      	ldrb	r3, [r3, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f040 808e 	bne.w	800ada0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d044      	beq.n	800ad16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	81bb      	strh	r3, [r7, #12]
 800ac9a:	89bb      	ldrh	r3, [r7, #12]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01b      	beq.n	800acdc <USB_DeactivateEndpoint+0x6c>
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acba:	817b      	strh	r3, [r7, #10]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	441a      	add	r2, r3
 800acc6:	897b      	ldrh	r3, [r7, #10]
 800acc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800accc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acd8:	b29b      	uxth	r3, r3
 800acda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf2:	813b      	strh	r3, [r7, #8]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	441a      	add	r2, r3
 800acfe:	893b      	ldrh	r3, [r7, #8]
 800ad00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	8013      	strh	r3, [r2, #0]
 800ad14:	e192      	b.n	800b03c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	827b      	strh	r3, [r7, #18]
 800ad24:	8a7b      	ldrh	r3, [r7, #18]
 800ad26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d01b      	beq.n	800ad66 <USB_DeactivateEndpoint+0xf6>
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad44:	823b      	strh	r3, [r7, #16]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	441a      	add	r2, r3
 800ad50:	8a3b      	ldrh	r3, [r7, #16]
 800ad52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4413      	add	r3, r2
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7c:	81fb      	strh	r3, [r7, #14]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	441a      	add	r2, r3
 800ad88:	89fb      	ldrh	r3, [r7, #14]
 800ad8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	8013      	strh	r3, [r2, #0]
 800ad9e:	e14d      	b.n	800b03c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 80a5 	bne.w	800aef4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	843b      	strh	r3, [r7, #32]
 800adb8:	8c3b      	ldrh	r3, [r7, #32]
 800adba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d01b      	beq.n	800adfa <USB_DeactivateEndpoint+0x18a>
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add8:	83fb      	strh	r3, [r7, #30]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	441a      	add	r2, r3
 800ade4:	8bfb      	ldrh	r3, [r7, #30]
 800ade6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	83bb      	strh	r3, [r7, #28]
 800ae08:	8bbb      	ldrh	r3, [r7, #28]
 800ae0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01b      	beq.n	800ae4a <USB_DeactivateEndpoint+0x1da>
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae28:	837b      	strh	r3, [r7, #26]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	441a      	add	r2, r3
 800ae34:	8b7b      	ldrh	r3, [r7, #26]
 800ae36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae60:	833b      	strh	r3, [r7, #24]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	441a      	add	r2, r3
 800ae6c:	8b3b      	ldrh	r3, [r7, #24]
 800ae6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae98:	82fb      	strh	r3, [r7, #22]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	441a      	add	r2, r3
 800aea4:	8afb      	ldrh	r3, [r7, #22]
 800aea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed0:	82bb      	strh	r3, [r7, #20]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	441a      	add	r2, r3
 800aedc:	8abb      	ldrh	r3, [r7, #20]
 800aede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	8013      	strh	r3, [r2, #0]
 800aef2:	e0a3      	b.n	800b03c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01b      	beq.n	800af44 <USB_DeactivateEndpoint+0x2d4>
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	441a      	add	r2, r3
 800af2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af40:	b29b      	uxth	r3, r3
 800af42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	857b      	strh	r3, [r7, #42]	; 0x2a
 800af52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d01b      	beq.n	800af94 <USB_DeactivateEndpoint+0x324>
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af72:	853b      	strh	r3, [r7, #40]	; 0x28
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	441a      	add	r2, r3
 800af7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af90:	b29b      	uxth	r3, r3
 800af92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afaa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	441a      	add	r2, r3
 800afb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc8:	b29b      	uxth	r3, r3
 800afca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	441a      	add	r2, r3
 800afee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800affc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b000:	b29b      	uxth	r3, r3
 800b002:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	441a      	add	r2, r3
 800b026:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b038:	b29b      	uxth	r3, r3
 800b03a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3734      	adds	r7, #52	; 0x34
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b0c2      	sub	sp, #264	; 0x108
 800b04e:	af00      	add	r7, sp, #0
 800b050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b058:	6018      	str	r0, [r3, #0]
 800b05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b062:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	785b      	ldrb	r3, [r3, #1]
 800b070:	2b01      	cmp	r3, #1
 800b072:	f040 867b 	bne.w	800bd6c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	699a      	ldr	r2, [r3, #24]
 800b082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d908      	bls.n	800b0a4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b0a2:	e007      	b.n	800b0b4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	7b1b      	ldrb	r3, [r3, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d13a      	bne.n	800b13a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6959      	ldr	r1, [r3, #20]
 800b0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	88da      	ldrh	r2, [r3, #6]
 800b0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	f001 fc1d 	bl	800c92a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	461a      	mov	r2, r3
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	4413      	add	r3, r2
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	00da      	lsls	r2, r3, #3
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	4413      	add	r3, r2
 800b126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b130:	b29a      	uxth	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	801a      	strh	r2, [r3, #0]
 800b136:	f000 bde3 	b.w	800bd00 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	78db      	ldrb	r3, [r3, #3]
 800b146:	2b02      	cmp	r3, #2
 800b148:	f040 843a 	bne.w	800b9c0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6a1a      	ldr	r2, [r3, #32]
 800b158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	429a      	cmp	r2, r3
 800b166:	f240 83b7 	bls.w	800b8d8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b190:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	441a      	add	r2, r3
 800b1ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6a1a      	ldr	r2, [r3, #32]
 800b1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d6:	1ad2      	subs	r2, r2, r3
 800b1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 81b3 	beq.w	800b572 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	633b      	str	r3, [r7, #48]	; 0x30
 800b218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	785b      	ldrb	r3, [r3, #1]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d16d      	bne.n	800b304 <USB_EPStartXfer+0x2ba>
 800b228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	62bb      	str	r3, [r7, #40]	; 0x28
 800b234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b242:	b29b      	uxth	r3, r3
 800b244:	461a      	mov	r2, r3
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	4413      	add	r3, r2
 800b24a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	00da      	lsls	r2, r3, #3
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	4413      	add	r3, r2
 800b25e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
 800b264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b268:	2b3e      	cmp	r3, #62	; 0x3e
 800b26a:	d91c      	bls.n	800b2a6 <USB_EPStartXfer+0x25c>
 800b26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27a:	f003 031f 	and.w	r3, r3, #31
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d104      	bne.n	800b28c <USB_EPStartXfer+0x242>
 800b282:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b286:	3b01      	subs	r3, #1
 800b288:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b28c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b290:	b29b      	uxth	r3, r3
 800b292:	029b      	lsls	r3, r3, #10
 800b294:	b29b      	uxth	r3, r3
 800b296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b29a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	801a      	strh	r2, [r3, #0]
 800b2a4:	e053      	b.n	800b34e <USB_EPStartXfer+0x304>
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d112      	bne.n	800b2d4 <USB_EPStartXfer+0x28a>
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	801a      	strh	r2, [r3, #0]
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	801a      	strh	r2, [r3, #0]
 800b2d2:	e03c      	b.n	800b34e <USB_EPStartXfer+0x304>
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d8:	085b      	lsrs	r3, r3, #1
 800b2da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d004      	beq.n	800b2f4 <USB_EPStartXfer+0x2aa>
 800b2ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	029b      	lsls	r3, r3, #10
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	801a      	strh	r2, [r3, #0]
 800b302:	e024      	b.n	800b34e <USB_EPStartXfer+0x304>
 800b304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d11c      	bne.n	800b34e <USB_EPStartXfer+0x304>
 800b314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b322:	b29b      	uxth	r3, r3
 800b324:	461a      	mov	r2, r3
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	4413      	add	r3, r2
 800b32a:	633b      	str	r3, [r7, #48]	; 0x30
 800b32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	00da      	lsls	r2, r3, #3
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	4413      	add	r3, r2
 800b33e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	895b      	ldrh	r3, [r3, #10]
 800b35a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6959      	ldr	r1, [r3, #20]
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36e:	b29b      	uxth	r3, r3
 800b370:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b374:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b378:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b37c:	6800      	ldr	r0, [r0, #0]
 800b37e:	f001 fad4 	bl	800c92a <USB_WritePMA>
            ep->xfer_buff += len;
 800b382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	695a      	ldr	r2, [r3, #20]
 800b38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b392:	441a      	add	r2, r3
 800b394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6a1a      	ldr	r2, [r3, #32]
 800b3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d90f      	bls.n	800b3dc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6a1a      	ldr	r2, [r3, #32]
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	1ad2      	subs	r2, r2, r3
 800b3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	621a      	str	r2, [r3, #32]
 800b3da:	e00e      	b.n	800b3fa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	785b      	ldrb	r3, [r3, #1]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d16d      	bne.n	800b4e6 <USB_EPStartXfer+0x49c>
 800b40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b40e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	61bb      	str	r3, [r7, #24]
 800b416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b424:	b29b      	uxth	r3, r3
 800b426:	461a      	mov	r2, r3
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	4413      	add	r3, r2
 800b42c:	61bb      	str	r3, [r7, #24]
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	00da      	lsls	r2, r3, #3
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	4413      	add	r3, r2
 800b440:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b444:	617b      	str	r3, [r7, #20]
 800b446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44a:	2b3e      	cmp	r3, #62	; 0x3e
 800b44c:	d91c      	bls.n	800b488 <USB_EPStartXfer+0x43e>
 800b44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b452:	095b      	lsrs	r3, r3, #5
 800b454:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45c:	f003 031f 	and.w	r3, r3, #31
 800b460:	2b00      	cmp	r3, #0
 800b462:	d104      	bne.n	800b46e <USB_EPStartXfer+0x424>
 800b464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b468:	3b01      	subs	r3, #1
 800b46a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b46e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b472:	b29b      	uxth	r3, r3
 800b474:	029b      	lsls	r3, r3, #10
 800b476:	b29b      	uxth	r3, r3
 800b478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b47c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b480:	b29a      	uxth	r2, r3
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	801a      	strh	r2, [r3, #0]
 800b486:	e059      	b.n	800b53c <USB_EPStartXfer+0x4f2>
 800b488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d112      	bne.n	800b4b6 <USB_EPStartXfer+0x46c>
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	b29b      	uxth	r3, r3
 800b496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	801a      	strh	r2, [r3, #0]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	801a      	strh	r2, [r3, #0]
 800b4b4:	e042      	b.n	800b53c <USB_EPStartXfer+0x4f2>
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	085b      	lsrs	r3, r3, #1
 800b4bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d004      	beq.n	800b4d6 <USB_EPStartXfer+0x48c>
 800b4cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	029b      	lsls	r3, r3, #10
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	801a      	strh	r2, [r3, #0]
 800b4e4:	e02a      	b.n	800b53c <USB_EPStartXfer+0x4f2>
 800b4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	785b      	ldrb	r3, [r3, #1]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d122      	bne.n	800b53c <USB_EPStartXfer+0x4f2>
 800b4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	623b      	str	r3, [r7, #32]
 800b502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b510:	b29b      	uxth	r3, r3
 800b512:	461a      	mov	r2, r3
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	4413      	add	r3, r2
 800b518:	623b      	str	r3, [r7, #32]
 800b51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	00da      	lsls	r2, r3, #3
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	4413      	add	r3, r2
 800b52c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b536:	b29a      	uxth	r2, r3
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	891b      	ldrh	r3, [r3, #8]
 800b548:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6959      	ldr	r1, [r3, #20]
 800b558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b562:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b566:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b56a:	6800      	ldr	r0, [r0, #0]
 800b56c:	f001 f9dd 	bl	800c92a <USB_WritePMA>
 800b570:	e3c6      	b.n	800bd00 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d16d      	bne.n	800b65e <USB_EPStartXfer+0x614>
 800b582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	461a      	mov	r2, r3
 800b5a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a2:	4413      	add	r3, r2
 800b5a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	00da      	lsls	r2, r3, #3
 800b5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c2:	2b3e      	cmp	r3, #62	; 0x3e
 800b5c4:	d91c      	bls.n	800b600 <USB_EPStartXfer+0x5b6>
 800b5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ca:	095b      	lsrs	r3, r3, #5
 800b5cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d4:	f003 031f 	and.w	r3, r3, #31
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d104      	bne.n	800b5e6 <USB_EPStartXfer+0x59c>
 800b5dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	029b      	lsls	r3, r3, #10
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5fc:	801a      	strh	r2, [r3, #0]
 800b5fe:	e059      	b.n	800b6b4 <USB_EPStartXfer+0x66a>
 800b600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b604:	2b00      	cmp	r3, #0
 800b606:	d112      	bne.n	800b62e <USB_EPStartXfer+0x5e4>
 800b608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b612:	b29a      	uxth	r2, r3
 800b614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b616:	801a      	strh	r2, [r3, #0]
 800b618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b626:	b29a      	uxth	r2, r3
 800b628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b62a:	801a      	strh	r2, [r3, #0]
 800b62c:	e042      	b.n	800b6b4 <USB_EPStartXfer+0x66a>
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b632:	085b      	lsrs	r3, r3, #1
 800b634:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <USB_EPStartXfer+0x604>
 800b644:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b648:	3301      	adds	r3, #1
 800b64a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b64e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b652:	b29b      	uxth	r3, r3
 800b654:	029b      	lsls	r3, r3, #10
 800b656:	b29a      	uxth	r2, r3
 800b658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b65a:	801a      	strh	r2, [r3, #0]
 800b65c:	e02a      	b.n	800b6b4 <USB_EPStartXfer+0x66a>
 800b65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	785b      	ldrb	r3, [r3, #1]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d122      	bne.n	800b6b4 <USB_EPStartXfer+0x66a>
 800b66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	653b      	str	r3, [r7, #80]	; 0x50
 800b67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b688:	b29b      	uxth	r3, r3
 800b68a:	461a      	mov	r2, r3
 800b68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b68e:	4413      	add	r3, r2
 800b690:	653b      	str	r3, [r7, #80]	; 0x50
 800b692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	00da      	lsls	r2, r3, #3
 800b6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	891b      	ldrh	r3, [r3, #8]
 800b6c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6959      	ldr	r1, [r3, #20]
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b6da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b6de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b6e2:	6800      	ldr	r0, [r0, #0]
 800b6e4:	f001 f921 	bl	800c92a <USB_WritePMA>
            ep->xfer_buff += len;
 800b6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695a      	ldr	r2, [r3, #20]
 800b6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f8:	441a      	add	r2, r3
 800b6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6a1a      	ldr	r2, [r3, #32]
 800b712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d90f      	bls.n	800b742 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6a1a      	ldr	r2, [r3, #32]
 800b72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b732:	1ad2      	subs	r2, r2, r3
 800b734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	621a      	str	r2, [r3, #32]
 800b740:	e00e      	b.n	800b760 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2200      	movs	r2, #0
 800b75e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	643b      	str	r3, [r7, #64]	; 0x40
 800b76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	785b      	ldrb	r3, [r3, #1]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d16d      	bne.n	800b858 <USB_EPStartXfer+0x80e>
 800b77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	63bb      	str	r3, [r7, #56]	; 0x38
 800b788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b796:	b29b      	uxth	r3, r3
 800b798:	461a      	mov	r2, r3
 800b79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79c:	4413      	add	r3, r2
 800b79e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	00da      	lsls	r2, r3, #3
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7bc:	2b3e      	cmp	r3, #62	; 0x3e
 800b7be:	d91c      	bls.n	800b7fa <USB_EPStartXfer+0x7b0>
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c4:	095b      	lsrs	r3, r3, #5
 800b7c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	f003 031f 	and.w	r3, r3, #31
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d104      	bne.n	800b7e0 <USB_EPStartXfer+0x796>
 800b7d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	029b      	lsls	r3, r3, #10
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f6:	801a      	strh	r2, [r3, #0]
 800b7f8:	e053      	b.n	800b8a2 <USB_EPStartXfer+0x858>
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d112      	bne.n	800b828 <USB_EPStartXfer+0x7de>
 800b802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	b29b      	uxth	r3, r3
 800b808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b810:	801a      	strh	r2, [r3, #0]
 800b812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b814:	881b      	ldrh	r3, [r3, #0]
 800b816:	b29b      	uxth	r3, r3
 800b818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b81c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b820:	b29a      	uxth	r2, r3
 800b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b824:	801a      	strh	r2, [r3, #0]
 800b826:	e03c      	b.n	800b8a2 <USB_EPStartXfer+0x858>
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d004      	beq.n	800b848 <USB_EPStartXfer+0x7fe>
 800b83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b842:	3301      	adds	r3, #1
 800b844:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	029b      	lsls	r3, r3, #10
 800b850:	b29a      	uxth	r2, r3
 800b852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b854:	801a      	strh	r2, [r3, #0]
 800b856:	e024      	b.n	800b8a2 <USB_EPStartXfer+0x858>
 800b858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b85c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	785b      	ldrb	r3, [r3, #1]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d11c      	bne.n	800b8a2 <USB_EPStartXfer+0x858>
 800b868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b876:	b29b      	uxth	r3, r3
 800b878:	461a      	mov	r2, r3
 800b87a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b87c:	4413      	add	r3, r2
 800b87e:	643b      	str	r3, [r7, #64]	; 0x40
 800b880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	00da      	lsls	r2, r3, #3
 800b88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b890:	4413      	add	r3, r2
 800b892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	895b      	ldrh	r3, [r3, #10]
 800b8ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6959      	ldr	r1, [r3, #20]
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8d0:	6800      	ldr	r0, [r0, #0]
 800b8d2:	f001 f82a 	bl	800c92a <USB_WritePMA>
 800b8d6:	e213      	b.n	800bd00 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	b29b      	uxth	r3, r3
 800b906:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b90e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	441a      	add	r2, r3
 800b92c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b940:	b29b      	uxth	r3, r3
 800b942:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b95e:	b29b      	uxth	r3, r3
 800b960:	461a      	mov	r2, r3
 800b962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b964:	4413      	add	r3, r2
 800b966:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	00da      	lsls	r2, r3, #3
 800b976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b978:	4413      	add	r3, r2
 800b97a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b97e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	b29a      	uxth	r2, r3
 800b986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b988:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	891b      	ldrh	r3, [r3, #8]
 800b996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6959      	ldr	r1, [r3, #20]
 800b9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9b8:	6800      	ldr	r0, [r0, #0]
 800b9ba:	f000 ffb6 	bl	800c92a <USB_WritePMA>
 800b9be:	e19f      	b.n	800bd00 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6a1a      	ldr	r2, [r3, #32]
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d0:	1ad2      	subs	r2, r2, r3
 800b9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80bc 	beq.w	800bb7e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	673b      	str	r3, [r7, #112]	; 0x70
 800ba12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	785b      	ldrb	r3, [r3, #1]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d16d      	bne.n	800bafe <USB_EPStartXfer+0xab4>
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba42:	4413      	add	r3, r2
 800ba44:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	00da      	lsls	r2, r3, #3
 800ba54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba56:	4413      	add	r3, r2
 800ba58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ba5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba62:	2b3e      	cmp	r3, #62	; 0x3e
 800ba64:	d91c      	bls.n	800baa0 <USB_EPStartXfer+0xa56>
 800ba66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6a:	095b      	lsrs	r3, r3, #5
 800ba6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba74:	f003 031f 	and.w	r3, r3, #31
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d104      	bne.n	800ba86 <USB_EPStartXfer+0xa3c>
 800ba7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba80:	3b01      	subs	r3, #1
 800ba82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	029b      	lsls	r3, r3, #10
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba9c:	801a      	strh	r2, [r3, #0]
 800ba9e:	e053      	b.n	800bb48 <USB_EPStartXfer+0xafe>
 800baa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d112      	bne.n	800bace <USB_EPStartXfer+0xa84>
 800baa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	b29b      	uxth	r3, r3
 800baae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab6:	801a      	strh	r2, [r3, #0]
 800bab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	b29b      	uxth	r3, r3
 800babe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	e03c      	b.n	800bb48 <USB_EPStartXfer+0xafe>
 800bace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad2:	085b      	lsrs	r3, r3, #1
 800bad4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <USB_EPStartXfer+0xaa4>
 800bae4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bae8:	3301      	adds	r3, #1
 800baea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800baee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	029b      	lsls	r3, r3, #10
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bafa:	801a      	strh	r2, [r3, #0]
 800bafc:	e024      	b.n	800bb48 <USB_EPStartXfer+0xafe>
 800bafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d11c      	bne.n	800bb48 <USB_EPStartXfer+0xafe>
 800bb0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	461a      	mov	r2, r3
 800bb20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb22:	4413      	add	r3, r2
 800bb24:	673b      	str	r3, [r7, #112]	; 0x70
 800bb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	00da      	lsls	r2, r3, #3
 800bb34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb36:	4413      	add	r3, r2
 800bb38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	895b      	ldrh	r3, [r3, #10]
 800bb54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6959      	ldr	r1, [r3, #20]
 800bb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb76:	6800      	ldr	r0, [r0, #0]
 800bb78:	f000 fed7 	bl	800c92a <USB_WritePMA>
 800bb7c:	e0c0      	b.n	800bd00 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	785b      	ldrb	r3, [r3, #1]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d16d      	bne.n	800bc6a <USB_EPStartXfer+0xc20>
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	461a      	mov	r2, r3
 800bbac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbae:	4413      	add	r3, r2
 800bbb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	00da      	lsls	r2, r3, #3
 800bbc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbc8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbce:	2b3e      	cmp	r3, #62	; 0x3e
 800bbd0:	d91c      	bls.n	800bc0c <USB_EPStartXfer+0xbc2>
 800bbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd6:	095b      	lsrs	r3, r3, #5
 800bbd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe0:	f003 031f 	and.w	r3, r3, #31
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d104      	bne.n	800bbf2 <USB_EPStartXfer+0xba8>
 800bbe8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bbec:	3b01      	subs	r3, #1
 800bbee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbf2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	029b      	lsls	r3, r3, #10
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc08:	801a      	strh	r2, [r3, #0]
 800bc0a:	e05f      	b.n	800bccc <USB_EPStartXfer+0xc82>
 800bc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d112      	bne.n	800bc3a <USB_EPStartXfer+0xbf0>
 800bc14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc22:	801a      	strh	r2, [r3, #0]
 800bc24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc36:	801a      	strh	r2, [r3, #0]
 800bc38:	e048      	b.n	800bccc <USB_EPStartXfer+0xc82>
 800bc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d004      	beq.n	800bc5a <USB_EPStartXfer+0xc10>
 800bc50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc54:	3301      	adds	r3, #1
 800bc56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	029b      	lsls	r3, r3, #10
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc66:	801a      	strh	r2, [r3, #0]
 800bc68:	e030      	b.n	800bccc <USB_EPStartXfer+0xc82>
 800bc6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d128      	bne.n	800bccc <USB_EPStartXfer+0xc82>
 800bc7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc9e:	4413      	add	r3, r2
 800bca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	00da      	lsls	r2, r3, #3
 800bcb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	891b      	ldrh	r3, [r3, #8]
 800bcd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6959      	ldr	r1, [r3, #20]
 800bce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bcf2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bcf6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	f000 fe15 	bl	800c92a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd26:	817b      	strh	r3, [r7, #10]
 800bd28:	897b      	ldrh	r3, [r7, #10]
 800bd2a:	f083 0310 	eor.w	r3, r3, #16
 800bd2e:	817b      	strh	r3, [r7, #10]
 800bd30:	897b      	ldrh	r3, [r7, #10]
 800bd32:	f083 0320 	eor.w	r3, r3, #32
 800bd36:	817b      	strh	r3, [r7, #10]
 800bd38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	441a      	add	r2, r3
 800bd52:	897b      	ldrh	r3, [r7, #10]
 800bd54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	8013      	strh	r3, [r2, #0]
 800bd68:	f000 bc9f 	b.w	800c6aa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bd6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	7b1b      	ldrb	r3, [r3, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f040 80ae 	bne.w	800beda <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699a      	ldr	r2, [r3, #24]
 800bd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d917      	bls.n	800bdca <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800bd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bdaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	699a      	ldr	r2, [r3, #24]
 800bdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	619a      	str	r2, [r3, #24]
 800bdc8:	e00e      	b.n	800bde8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800bdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2200      	movs	r2, #0
 800bde6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be04:	b29b      	uxth	r3, r3
 800be06:	461a      	mov	r2, r3
 800be08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be0c:	4413      	add	r3, r2
 800be0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	00da      	lsls	r2, r3, #3
 800be20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be24:	4413      	add	r3, r2
 800be26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be32:	2b3e      	cmp	r3, #62	; 0x3e
 800be34:	d91d      	bls.n	800be72 <USB_EPStartXfer+0xe28>
 800be36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3a:	095b      	lsrs	r3, r3, #5
 800be3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be44:	f003 031f 	and.w	r3, r3, #31
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <USB_EPStartXfer+0xe0c>
 800be4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be50:	3b01      	subs	r3, #1
 800be52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	029b      	lsls	r3, r3, #10
 800be5e:	b29b      	uxth	r3, r3
 800be60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be68:	b29a      	uxth	r2, r3
 800be6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be6e:	801a      	strh	r2, [r3, #0]
 800be70:	e3e1      	b.n	800c636 <USB_EPStartXfer+0x15ec>
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be76:	2b00      	cmp	r3, #0
 800be78:	d116      	bne.n	800bea8 <USB_EPStartXfer+0xe5e>
 800be7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	b29b      	uxth	r3, r3
 800be82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be86:	b29a      	uxth	r2, r3
 800be88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be8c:	801a      	strh	r2, [r3, #0]
 800be8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bea4:	801a      	strh	r2, [r3, #0]
 800bea6:	e3c6      	b.n	800c636 <USB_EPStartXfer+0x15ec>
 800bea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beac:	085b      	lsrs	r3, r3, #1
 800beae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800beb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d004      	beq.n	800bec8 <USB_EPStartXfer+0xe7e>
 800bebe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bec2:	3301      	adds	r3, #1
 800bec4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bec8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800becc:	b29b      	uxth	r3, r3
 800bece:	029b      	lsls	r3, r3, #10
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bed6:	801a      	strh	r2, [r3, #0]
 800bed8:	e3ad      	b.n	800c636 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800beda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	78db      	ldrb	r3, [r3, #3]
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	f040 8200 	bne.w	800c2ec <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800beec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f040 8091 	bne.w	800c020 <USB_EPStartXfer+0xfd6>
 800befe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf22:	4413      	add	r3, r2
 800bf24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	00da      	lsls	r2, r3, #3
 800bf36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b3e      	cmp	r3, #62	; 0x3e
 800bf52:	d925      	bls.n	800bfa0 <USB_EPStartXfer+0xf56>
 800bf54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	095b      	lsrs	r3, r3, #5
 800bf62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	f003 031f 	and.w	r3, r3, #31
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d104      	bne.n	800bf84 <USB_EPStartXfer+0xf3a>
 800bf7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	029b      	lsls	r3, r3, #10
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf9c:	801a      	strh	r2, [r3, #0]
 800bf9e:	e074      	b.n	800c08a <USB_EPStartXfer+0x1040>
 800bfa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d116      	bne.n	800bfde <USB_EPStartXfer+0xf94>
 800bfb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfc2:	801a      	strh	r2, [r3, #0]
 800bfc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfda:	801a      	strh	r2, [r3, #0]
 800bfdc:	e055      	b.n	800c08a <USB_EPStartXfer+0x1040>
 800bfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	085b      	lsrs	r3, r3, #1
 800bfec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d004      	beq.n	800c00e <USB_EPStartXfer+0xfc4>
 800c004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c008:	3301      	adds	r3, #1
 800c00a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c012:	b29b      	uxth	r3, r3
 800c014:	029b      	lsls	r3, r3, #10
 800c016:	b29a      	uxth	r2, r3
 800c018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c01c:	801a      	strh	r2, [r3, #0]
 800c01e:	e034      	b.n	800c08a <USB_EPStartXfer+0x1040>
 800c020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d12c      	bne.n	800c08a <USB_EPStartXfer+0x1040>
 800c030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	461a      	mov	r2, r3
 800c050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c054:	4413      	add	r3, r2
 800c056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	00da      	lsls	r2, r3, #3
 800c068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c06c:	4413      	add	r3, r2
 800c06e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	b29a      	uxth	r2, r3
 800c084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c088:	801a      	strh	r2, [r3, #0]
 800c08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	785b      	ldrb	r3, [r3, #1]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f040 8091 	bne.w	800c1cc <USB_EPStartXfer+0x1182>
 800c0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	00da      	lsls	r2, r3, #3
 800c0e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	2b3e      	cmp	r3, #62	; 0x3e
 800c0fe:	d925      	bls.n	800c14c <USB_EPStartXfer+0x1102>
 800c100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	095b      	lsrs	r3, r3, #5
 800c10e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	f003 031f 	and.w	r3, r3, #31
 800c122:	2b00      	cmp	r3, #0
 800c124:	d104      	bne.n	800c130 <USB_EPStartXfer+0x10e6>
 800c126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c12a:	3b01      	subs	r3, #1
 800c12c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c134:	b29b      	uxth	r3, r3
 800c136:	029b      	lsls	r3, r3, #10
 800c138:	b29b      	uxth	r3, r3
 800c13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c142:	b29a      	uxth	r2, r3
 800c144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c148:	801a      	strh	r2, [r3, #0]
 800c14a:	e06d      	b.n	800c228 <USB_EPStartXfer+0x11de>
 800c14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d116      	bne.n	800c18a <USB_EPStartXfer+0x1140>
 800c15c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c168:	b29a      	uxth	r2, r3
 800c16a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c16e:	801a      	strh	r2, [r3, #0]
 800c170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	b29b      	uxth	r3, r3
 800c178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c17c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c180:	b29a      	uxth	r2, r3
 800c182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c186:	801a      	strh	r2, [r3, #0]
 800c188:	e04e      	b.n	800c228 <USB_EPStartXfer+0x11de>
 800c18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	085b      	lsrs	r3, r3, #1
 800c198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d004      	beq.n	800c1ba <USB_EPStartXfer+0x1170>
 800c1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	029b      	lsls	r3, r3, #10
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	e02d      	b.n	800c228 <USB_EPStartXfer+0x11de>
 800c1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	785b      	ldrb	r3, [r3, #1]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d125      	bne.n	800c228 <USB_EPStartXfer+0x11de>
 800c1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	00da      	lsls	r2, r3, #3
 800c206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c20a:	4413      	add	r3, r2
 800c20c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	b29a      	uxth	r2, r3
 800c222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c226:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	2b00      	cmp	r3, #0
 800c236:	f000 81fe 	beq.w	800c636 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c25a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c25e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d005      	beq.n	800c272 <USB_EPStartXfer+0x1228>
 800c266:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d10d      	bne.n	800c28e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c272:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f040 81db 	bne.w	800c636 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c280:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f040 81d4 	bne.w	800c636 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2b4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	441a      	add	r2, r3
 800c2d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	8013      	strh	r3, [r2, #0]
 800c2ea:	e1a4      	b.n	800c636 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	78db      	ldrb	r3, [r3, #3]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	f040 819a 	bne.w	800c632 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	699a      	ldr	r2, [r3, #24]
 800c30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	429a      	cmp	r2, r3
 800c318:	d917      	bls.n	800c34a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c31e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	699a      	ldr	r2, [r3, #24]
 800c336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33a:	1ad2      	subs	r2, r2, r3
 800c33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	619a      	str	r2, [r3, #24]
 800c348:	e00e      	b.n	800c368 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c35e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2200      	movs	r2, #0
 800c366:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	785b      	ldrb	r3, [r3, #1]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d178      	bne.n	800c46a <USB_EPStartXfer+0x1420>
 800c378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c37c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c394:	b29b      	uxth	r3, r3
 800c396:	461a      	mov	r2, r3
 800c398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c39c:	4413      	add	r3, r2
 800c39e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	00da      	lsls	r2, r3, #3
 800c3b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c2:	2b3e      	cmp	r3, #62	; 0x3e
 800c3c4:	d91d      	bls.n	800c402 <USB_EPStartXfer+0x13b8>
 800c3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ca:	095b      	lsrs	r3, r3, #5
 800c3cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d4:	f003 031f 	and.w	r3, r3, #31
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d104      	bne.n	800c3e6 <USB_EPStartXfer+0x139c>
 800c3dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	029b      	lsls	r3, r3, #10
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3fe:	801a      	strh	r2, [r3, #0]
 800c400:	e064      	b.n	800c4cc <USB_EPStartXfer+0x1482>
 800c402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c406:	2b00      	cmp	r3, #0
 800c408:	d116      	bne.n	800c438 <USB_EPStartXfer+0x13ee>
 800c40a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	b29b      	uxth	r3, r3
 800c412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c416:	b29a      	uxth	r2, r3
 800c418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c42e:	b29a      	uxth	r2, r3
 800c430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c434:	801a      	strh	r2, [r3, #0]
 800c436:	e049      	b.n	800c4cc <USB_EPStartXfer+0x1482>
 800c438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c43c:	085b      	lsrs	r3, r3, #1
 800c43e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <USB_EPStartXfer+0x140e>
 800c44e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c452:	3301      	adds	r3, #1
 800c454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	029b      	lsls	r3, r3, #10
 800c460:	b29a      	uxth	r2, r3
 800c462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c466:	801a      	strh	r2, [r3, #0]
 800c468:	e030      	b.n	800c4cc <USB_EPStartXfer+0x1482>
 800c46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d128      	bne.n	800c4cc <USB_EPStartXfer+0x1482>
 800c47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c47e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c48c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c496:	b29b      	uxth	r3, r3
 800c498:	461a      	mov	r2, r3
 800c49a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c49e:	4413      	add	r3, r2
 800c4a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	00da      	lsls	r2, r3, #3
 800c4b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c4bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c4ca:	801a      	strh	r2, [r3, #0]
 800c4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	785b      	ldrb	r3, [r3, #1]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d178      	bne.n	800c5dc <USB_EPStartXfer+0x1592>
 800c4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c506:	b29b      	uxth	r3, r3
 800c508:	461a      	mov	r2, r3
 800c50a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c50e:	4413      	add	r3, r2
 800c510:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	00da      	lsls	r2, r3, #3
 800c522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c526:	4413      	add	r3, r2
 800c528:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c52c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c534:	2b3e      	cmp	r3, #62	; 0x3e
 800c536:	d91d      	bls.n	800c574 <USB_EPStartXfer+0x152a>
 800c538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c53c:	095b      	lsrs	r3, r3, #5
 800c53e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c546:	f003 031f 	and.w	r3, r3, #31
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d104      	bne.n	800c558 <USB_EPStartXfer+0x150e>
 800c54e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c552:	3b01      	subs	r3, #1
 800c554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	029b      	lsls	r3, r3, #10
 800c560:	b29b      	uxth	r3, r3
 800c562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c570:	801a      	strh	r2, [r3, #0]
 800c572:	e060      	b.n	800c636 <USB_EPStartXfer+0x15ec>
 800c574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d116      	bne.n	800c5aa <USB_EPStartXfer+0x1560>
 800c57c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	b29b      	uxth	r3, r3
 800c584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c588:	b29a      	uxth	r2, r3
 800c58a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c58e:	801a      	strh	r2, [r3, #0]
 800c590:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	b29b      	uxth	r3, r3
 800c598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c59c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5a6:	801a      	strh	r2, [r3, #0]
 800c5a8:	e045      	b.n	800c636 <USB_EPStartXfer+0x15ec>
 800c5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ae:	085b      	lsrs	r3, r3, #1
 800c5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d004      	beq.n	800c5ca <USB_EPStartXfer+0x1580>
 800c5c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	029b      	lsls	r3, r3, #10
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5d8:	801a      	strh	r2, [r3, #0]
 800c5da:	e02c      	b.n	800c636 <USB_EPStartXfer+0x15ec>
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	785b      	ldrb	r3, [r3, #1]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d124      	bne.n	800c636 <USB_EPStartXfer+0x15ec>
 800c5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c602:	4413      	add	r3, r2
 800c604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	00da      	lsls	r2, r3, #3
 800c616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c61a:	4413      	add	r3, r2
 800c61c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c628:	b29a      	uxth	r2, r3
 800c62a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c62e:	801a      	strh	r2, [r3, #0]
 800c630:	e001      	b.n	800c636 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e03a      	b.n	800c6ac <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	b29b      	uxth	r3, r3
 800c654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c65c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c660:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c668:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c66c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c670:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c674:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c67c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	441a      	add	r2, r3
 800c692:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c69a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	785b      	ldrb	r3, [r3, #1]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d020      	beq.n	800c70a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6de:	81bb      	strh	r3, [r7, #12]
 800c6e0:	89bb      	ldrh	r3, [r7, #12]
 800c6e2:	f083 0310 	eor.w	r3, r3, #16
 800c6e6:	81bb      	strh	r3, [r7, #12]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	441a      	add	r2, r3
 800c6f2:	89bb      	ldrh	r3, [r7, #12]
 800c6f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c704:	b29b      	uxth	r3, r3
 800c706:	8013      	strh	r3, [r2, #0]
 800c708:	e01f      	b.n	800c74a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	b29b      	uxth	r3, r3
 800c718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c71c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c720:	81fb      	strh	r3, [r7, #14]
 800c722:	89fb      	ldrh	r3, [r7, #14]
 800c724:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c728:	81fb      	strh	r3, [r7, #14]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	441a      	add	r2, r3
 800c734:	89fb      	ldrh	r3, [r7, #14]
 800c736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c73a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c73e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c746:	b29b      	uxth	r3, r3
 800c748:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	7b1b      	ldrb	r3, [r3, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f040 809d 	bne.w	800c8a6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	785b      	ldrb	r3, [r3, #1]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d04c      	beq.n	800c80e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	823b      	strh	r3, [r7, #16]
 800c782:	8a3b      	ldrh	r3, [r7, #16]
 800c784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01b      	beq.n	800c7c4 <USB_EPClearStall+0x6c>
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7a2:	81fb      	strh	r3, [r7, #14]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	441a      	add	r2, r3
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
 800c7b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	78db      	ldrb	r3, [r3, #3]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d06c      	beq.n	800c8a6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e2:	81bb      	strh	r3, [r7, #12]
 800c7e4:	89bb      	ldrh	r3, [r7, #12]
 800c7e6:	f083 0320 	eor.w	r3, r3, #32
 800c7ea:	81bb      	strh	r3, [r7, #12]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	441a      	add	r2, r3
 800c7f6:	89bb      	ldrh	r3, [r7, #12]
 800c7f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c808:	b29b      	uxth	r3, r3
 800c80a:	8013      	strh	r3, [r2, #0]
 800c80c:	e04b      	b.n	800c8a6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	82fb      	strh	r3, [r7, #22]
 800c81c:	8afb      	ldrh	r3, [r7, #22]
 800c81e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01b      	beq.n	800c85e <USB_EPClearStall+0x106>
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	b29b      	uxth	r3, r3
 800c834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c83c:	82bb      	strh	r3, [r7, #20]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	441a      	add	r2, r3
 800c848:	8abb      	ldrh	r3, [r7, #20]
 800c84a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c84e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c874:	827b      	strh	r3, [r7, #18]
 800c876:	8a7b      	ldrh	r3, [r7, #18]
 800c878:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c87c:	827b      	strh	r3, [r7, #18]
 800c87e:	8a7b      	ldrh	r3, [r7, #18]
 800c880:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c884:	827b      	strh	r3, [r7, #18]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	441a      	add	r2, r3
 800c890:	8a7b      	ldrh	r3, [r7, #18]
 800c892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c89a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	371c      	adds	r7, #28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d103      	bne.n	800c8ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2280      	movs	r2, #128	; 0x80
 800c8ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c90a:	b480      	push	{r7}
 800c90c:	b085      	sub	sp, #20
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c918:	b29b      	uxth	r3, r3
 800c91a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c91c:	68fb      	ldr	r3, [r7, #12]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c92a:	b480      	push	{r7}
 800c92c:	b08d      	sub	sp, #52	; 0x34
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	4611      	mov	r1, r2
 800c936:	461a      	mov	r2, r3
 800c938:	460b      	mov	r3, r1
 800c93a:	80fb      	strh	r3, [r7, #6]
 800c93c:	4613      	mov	r3, r2
 800c93e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c940:	88bb      	ldrh	r3, [r7, #4]
 800c942:	3301      	adds	r3, #1
 800c944:	085b      	lsrs	r3, r3, #1
 800c946:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c950:	88fa      	ldrh	r2, [r7, #6]
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	4413      	add	r3, r2
 800c956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c95a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c960:	e01b      	b.n	800c99a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	3301      	adds	r3, #1
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	021b      	lsls	r3, r3, #8
 800c976:	b29b      	uxth	r3, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	4313      	orrs	r3, r2
 800c97e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	b29a      	uxth	r2, r3
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	3302      	adds	r3, #2
 800c98c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	3301      	adds	r3, #1
 800c992:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	3b01      	subs	r3, #1
 800c998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e0      	bne.n	800c962 <USB_WritePMA+0x38>
  }
}
 800c9a0:	bf00      	nop
 800c9a2:	bf00      	nop
 800c9a4:	3734      	adds	r7, #52	; 0x34
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b08b      	sub	sp, #44	; 0x2c
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	460b      	mov	r3, r1
 800c9be:	80fb      	strh	r3, [r7, #6]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c9c4:	88bb      	ldrh	r3, [r7, #4]
 800c9c6:	085b      	lsrs	r3, r3, #1
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c9d4:	88fa      	ldrh	r2, [r7, #6]
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	4413      	add	r3, r2
 800c9da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9de:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e4:	e018      	b.n	800ca18 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c9e6:	6a3b      	ldr	r3, [r7, #32]
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	69fb      	ldr	r3, [r7, #28]
 800c9fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	0a1b      	lsrs	r3, r3, #8
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	3b01      	subs	r3, #1
 800ca16:	627b      	str	r3, [r7, #36]	; 0x24
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e3      	bne.n	800c9e6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ca1e:	88bb      	ldrh	r3, [r7, #4]
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d007      	beq.n	800ca3a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	701a      	strb	r2, [r3, #0]
  }
}
 800ca3a:	bf00      	nop
 800ca3c:	372c      	adds	r7, #44	; 0x2c
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b084      	sub	sp, #16
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca52:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca56:	f002 f91d 	bl	800ec94 <USBD_static_malloc>
 800ca5a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d105      	bne.n	800ca6e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e066      	b.n	800cb3c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	7c1b      	ldrb	r3, [r3, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d119      	bne.n	800cab2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca82:	2202      	movs	r2, #2
 800ca84:	2181      	movs	r1, #129	; 0x81
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f001 ffa9 	bl	800e9de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ca92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca96:	2202      	movs	r2, #2
 800ca98:	2101      	movs	r1, #1
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 ff9f 	bl	800e9de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2210      	movs	r2, #16
 800caac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cab0:	e016      	b.n	800cae0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cab2:	2340      	movs	r3, #64	; 0x40
 800cab4:	2202      	movs	r2, #2
 800cab6:	2181      	movs	r1, #129	; 0x81
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 ff90 	bl	800e9de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cac4:	2340      	movs	r3, #64	; 0x40
 800cac6:	2202      	movs	r2, #2
 800cac8:	2101      	movs	r1, #1
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f001 ff87 	bl	800e9de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2210      	movs	r2, #16
 800cadc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cae0:	2308      	movs	r3, #8
 800cae2:	2203      	movs	r2, #3
 800cae4:	2182      	movs	r1, #130	; 0x82
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f001 ff79 	bl	800e9de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7c1b      	ldrb	r3, [r3, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d109      	bne.n	800cb2a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb20:	2101      	movs	r1, #1
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f002 f84b 	bl	800ebbe <USBD_LL_PrepareReceive>
 800cb28:	e007      	b.n	800cb3a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb30:	2340      	movs	r3, #64	; 0x40
 800cb32:	2101      	movs	r1, #1
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f002 f842 	bl	800ebbe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cb50:	2181      	movs	r1, #129	; 0x81
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f001 ff69 	bl	800ea2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cb5e:	2101      	movs	r1, #1
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 ff62 	bl	800ea2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cb6e:	2182      	movs	r1, #130	; 0x82
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f001 ff5a 	bl	800ea2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cba0:	4618      	mov	r0, r3
 800cba2:	f002 f885 	bl	800ecb0 <USBD_static_free>
    pdev->pClassData = NULL;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e0af      	b.n	800cd40 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d03f      	beq.n	800cc6c <USBD_CDC_Setup+0xb4>
 800cbec:	2b20      	cmp	r3, #32
 800cbee:	f040 809f 	bne.w	800cd30 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	88db      	ldrh	r3, [r3, #6]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d02e      	beq.n	800cc58 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	b25b      	sxtb	r3, r3
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	da16      	bge.n	800cc32 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cc10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	88d2      	ldrh	r2, [r2, #6]
 800cc16:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	88db      	ldrh	r3, [r3, #6]
 800cc1c:	2b07      	cmp	r3, #7
 800cc1e:	bf28      	it	cs
 800cc20:	2307      	movcs	r3, #7
 800cc22:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	89fa      	ldrh	r2, [r7, #14]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f001 faeb 	bl	800e206 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cc30:	e085      	b.n	800cd3e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	785a      	ldrb	r2, [r3, #1]
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	88db      	ldrh	r3, [r3, #6]
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cc48:	6939      	ldr	r1, [r7, #16]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	88db      	ldrh	r3, [r3, #6]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f001 fb04 	bl	800e25e <USBD_CtlPrepareRx>
      break;
 800cc56:	e072      	b.n	800cd3e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	7850      	ldrb	r0, [r2, #1]
 800cc64:	2200      	movs	r2, #0
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	4798      	blx	r3
      break;
 800cc6a:	e068      	b.n	800cd3e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	785b      	ldrb	r3, [r3, #1]
 800cc70:	2b0b      	cmp	r3, #11
 800cc72:	d852      	bhi.n	800cd1a <USBD_CDC_Setup+0x162>
 800cc74:	a201      	add	r2, pc, #4	; (adr r2, 800cc7c <USBD_CDC_Setup+0xc4>)
 800cc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7a:	bf00      	nop
 800cc7c:	0800ccad 	.word	0x0800ccad
 800cc80:	0800cd29 	.word	0x0800cd29
 800cc84:	0800cd1b 	.word	0x0800cd1b
 800cc88:	0800cd1b 	.word	0x0800cd1b
 800cc8c:	0800cd1b 	.word	0x0800cd1b
 800cc90:	0800cd1b 	.word	0x0800cd1b
 800cc94:	0800cd1b 	.word	0x0800cd1b
 800cc98:	0800cd1b 	.word	0x0800cd1b
 800cc9c:	0800cd1b 	.word	0x0800cd1b
 800cca0:	0800cd1b 	.word	0x0800cd1b
 800cca4:	0800ccd7 	.word	0x0800ccd7
 800cca8:	0800cd01 	.word	0x0800cd01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b03      	cmp	r3, #3
 800ccb6:	d107      	bne.n	800ccc8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ccb8:	f107 030a 	add.w	r3, r7, #10
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f001 faa0 	bl	800e206 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccc6:	e032      	b.n	800cd2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f001 fa2a 	bl	800e124 <USBD_CtlError>
            ret = USBD_FAIL;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	75fb      	strb	r3, [r7, #23]
          break;
 800ccd4:	e02b      	b.n	800cd2e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d107      	bne.n	800ccf2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cce2:	f107 030d 	add.w	r3, r7, #13
 800cce6:	2201      	movs	r2, #1
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f001 fa8b 	bl	800e206 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccf0:	e01d      	b.n	800cd2e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ccf2:	6839      	ldr	r1, [r7, #0]
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f001 fa15 	bl	800e124 <USBD_CtlError>
            ret = USBD_FAIL;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	75fb      	strb	r3, [r7, #23]
          break;
 800ccfe:	e016      	b.n	800cd2e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b03      	cmp	r3, #3
 800cd0a:	d00f      	beq.n	800cd2c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f001 fa08 	bl	800e124 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd14:	2303      	movs	r3, #3
 800cd16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd18:	e008      	b.n	800cd2c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f001 fa01 	bl	800e124 <USBD_CtlError>
          ret = USBD_FAIL;
 800cd22:	2303      	movs	r3, #3
 800cd24:	75fb      	strb	r3, [r7, #23]
          break;
 800cd26:	e002      	b.n	800cd2e <USBD_CDC_Setup+0x176>
          break;
 800cd28:	bf00      	nop
 800cd2a:	e008      	b.n	800cd3e <USBD_CDC_Setup+0x186>
          break;
 800cd2c:	bf00      	nop
      }
      break;
 800cd2e:	e006      	b.n	800cd3e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f001 f9f6 	bl	800e124 <USBD_CtlError>
      ret = USBD_FAIL;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	75fb      	strb	r3, [r7, #23]
      break;
 800cd3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e04f      	b.n	800ce0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cd72:	78fa      	ldrb	r2, [r7, #3]
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	4613      	mov	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	440b      	add	r3, r1
 800cd80:	3318      	adds	r3, #24
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d029      	beq.n	800cddc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	6879      	ldr	r1, [r7, #4]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	440b      	add	r3, r1
 800cd96:	3318      	adds	r3, #24
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	78f9      	ldrb	r1, [r7, #3]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	440b      	add	r3, r1
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	4403      	add	r3, r0
 800cda8:	3338      	adds	r3, #56	; 0x38
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	fbb2 f1f3 	udiv	r1, r2, r3
 800cdb0:	fb01 f303 	mul.w	r3, r1, r3
 800cdb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d110      	bne.n	800cddc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cdba:	78fa      	ldrb	r2, [r7, #3]
 800cdbc:	6879      	ldr	r1, [r7, #4]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3318      	adds	r3, #24
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cdce:	78f9      	ldrb	r1, [r7, #3]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f001 fed1 	bl	800eb7c <USBD_LL_Transmit>
 800cdda:	e015      	b.n	800ce08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00b      	beq.n	800ce08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ce04:	78fa      	ldrb	r2, [r7, #3]
 800ce06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d101      	bne.n	800ce34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce30:	2303      	movs	r3, #3
 800ce32:	e015      	b.n	800ce60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f001 fee1 	bl	800ec00 <USBD_LL_GetRxDataSize>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e01b      	b.n	800ceba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d015      	beq.n	800ceb8 <USBD_CDC_EP0_RxReady+0x50>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce92:	2bff      	cmp	r3, #255	; 0xff
 800ce94:	d010      	beq.n	800ceb8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cea4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ceac:	b292      	uxth	r2, r2
 800ceae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	22ff      	movs	r2, #255	; 0xff
 800ceb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
	...

0800cec4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2243      	movs	r2, #67	; 0x43
 800ced0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ced2:	4b03      	ldr	r3, [pc, #12]	; (800cee0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	2000276c 	.word	0x2000276c

0800cee4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2243      	movs	r2, #67	; 0x43
 800cef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cef2:	4b03      	ldr	r3, [pc, #12]	; (800cf00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	20002728 	.word	0x20002728

0800cf04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2243      	movs	r2, #67	; 0x43
 800cf10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cf12:	4b03      	ldr	r3, [pc, #12]	; (800cf20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	200027b0 	.word	0x200027b0

0800cf24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	220a      	movs	r2, #10
 800cf30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cf32:	4b03      	ldr	r3, [pc, #12]	; (800cf40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	200026e4 	.word	0x200026e4

0800cf44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d101      	bne.n	800cf58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf54:	2303      	movs	r3, #3
 800cf56:	e004      	b.n	800cf62 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	370c      	adds	r7, #12
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b087      	sub	sp, #28
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf80:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	e008      	b.n	800cf9e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	371c      	adds	r7, #28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b085      	sub	sp, #20
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e004      	b.n	800cfd0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cfec:	2301      	movs	r3, #1
 800cfee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cffa:	2303      	movs	r3, #3
 800cffc:	e01a      	b.n	800d034 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d004:	2b00      	cmp	r3, #0
 800d006:	d114      	bne.n	800d032 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d026:	2181      	movs	r1, #129	; 0x81
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f001 fda7 	bl	800eb7c <USBD_LL_Transmit>

    ret = USBD_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d032:	7bfb      	ldrb	r3, [r7, #15]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d04a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d056:	2303      	movs	r3, #3
 800d058:	e016      	b.n	800d088 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	7c1b      	ldrb	r3, [r3, #16]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d109      	bne.n	800d076 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d06c:	2101      	movs	r1, #1
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f001 fda5 	bl	800ebbe <USBD_LL_PrepareReceive>
 800d074:	e007      	b.n	800d086 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d07c:	2340      	movs	r3, #64	; 0x40
 800d07e:	2101      	movs	r1, #1
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f001 fd9c 	bl	800ebbe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	4613      	mov	r3, r2
 800d09c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10a      	bne.n	800d0ba <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800d0a4:	4817      	ldr	r0, [pc, #92]	; (800d104 <USBD_Init+0x74>)
 800d0a6:	f002 fadb 	bl	800f660 <iprintf>
 800d0aa:	4817      	ldr	r0, [pc, #92]	; (800d108 <USBD_Init+0x78>)
 800d0ac:	f002 fad8 	bl	800f660 <iprintf>
 800d0b0:	200a      	movs	r0, #10
 800d0b2:	f002 faed 	bl	800f690 <putchar>
#endif
    return USBD_FAIL;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	e01f      	b.n	800d0fa <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d003      	beq.n	800d0e0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	79fa      	ldrb	r2, [r7, #7]
 800d0ec:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f001 fbfa 	bl	800e8e8 <USBD_LL_Init>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	080118d0 	.word	0x080118d0
 800d108:	080118d8 	.word	0x080118d8

0800d10c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d116:	2300      	movs	r3, #0
 800d118:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10a      	bne.n	800d136 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800d120:	4812      	ldr	r0, [pc, #72]	; (800d16c <USBD_RegisterClass+0x60>)
 800d122:	f002 fa9d 	bl	800f660 <iprintf>
 800d126:	4812      	ldr	r0, [pc, #72]	; (800d170 <USBD_RegisterClass+0x64>)
 800d128:	f002 fa9a 	bl	800f660 <iprintf>
 800d12c:	200a      	movs	r0, #10
 800d12e:	f002 faaf 	bl	800f690 <putchar>
#endif
    return USBD_FAIL;
 800d132:	2303      	movs	r3, #3
 800d134:	e016      	b.n	800d164 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	683a      	ldr	r2, [r7, #0]
 800d13a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00b      	beq.n	800d162 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d152:	f107 020e 	add.w	r2, r7, #14
 800d156:	4610      	mov	r0, r2
 800d158:	4798      	blx	r3
 800d15a:	4602      	mov	r2, r0
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	080118d0 	.word	0x080118d0
 800d170:	080118f0 	.word	0x080118f0

0800d174 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f001 fc13 	bl	800e9a8 <USBD_LL_Start>
 800d182:	4603      	mov	r3, r0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b084      	sub	sp, #16
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d009      	beq.n	800d1d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	78fa      	ldrb	r2, [r7, #3]
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	4798      	blx	r3
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d007      	beq.n	800d200 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	78fa      	ldrb	r2, [r7, #3]
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	4798      	blx	r3
  }

  return USBD_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 ff47 	bl	800e0b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d230:	461a      	mov	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d23e:	f003 031f 	and.w	r3, r3, #31
 800d242:	2b02      	cmp	r3, #2
 800d244:	d01a      	beq.n	800d27c <USBD_LL_SetupStage+0x72>
 800d246:	2b02      	cmp	r3, #2
 800d248:	d822      	bhi.n	800d290 <USBD_LL_SetupStage+0x86>
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <USBD_LL_SetupStage+0x4a>
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d00a      	beq.n	800d268 <USBD_LL_SetupStage+0x5e>
 800d252:	e01d      	b.n	800d290 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 f9ef 	bl	800d640 <USBD_StdDevReq>
 800d262:	4603      	mov	r3, r0
 800d264:	73fb      	strb	r3, [r7, #15]
      break;
 800d266:	e020      	b.n	800d2aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d26e:	4619      	mov	r1, r3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fa53 	bl	800d71c <USBD_StdItfReq>
 800d276:	4603      	mov	r3, r0
 800d278:	73fb      	strb	r3, [r7, #15]
      break;
 800d27a:	e016      	b.n	800d2aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fa92 	bl	800d7ae <USBD_StdEPReq>
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]
      break;
 800d28e:	e00c      	b.n	800d2aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d296:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	4619      	mov	r1, r3
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f001 fbe2 	bl	800ea68 <USBD_LL_StallEP>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d2a8:	bf00      	nop
  }

  return ret;
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	607a      	str	r2, [r7, #4]
 800d2c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d2c2:	7afb      	ldrb	r3, [r7, #11]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d138      	bne.n	800d33a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d2ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2d6:	2b03      	cmp	r3, #3
 800d2d8:	d14a      	bne.n	800d370 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	689a      	ldr	r2, [r3, #8]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d913      	bls.n	800d30e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	689a      	ldr	r2, [r3, #8]
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	68da      	ldr	r2, [r3, #12]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	bf28      	it	cs
 800d300:	4613      	movcs	r3, r2
 800d302:	461a      	mov	r2, r3
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 ffc6 	bl	800e298 <USBD_CtlContinueRx>
 800d30c:	e030      	b.n	800d370 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b03      	cmp	r3, #3
 800d318:	d10b      	bne.n	800d332 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d005      	beq.n	800d332 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f000 ffc1 	bl	800e2ba <USBD_CtlSendStatus>
 800d338:	e01a      	b.n	800d370 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b03      	cmp	r3, #3
 800d344:	d114      	bne.n	800d370 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	7afa      	ldrb	r2, [r7, #11]
 800d35c:	4611      	mov	r1, r2
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	4798      	blx	r3
 800d362:	4603      	mov	r3, r0
 800d364:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
 800d36e:	e000      	b.n	800d372 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b086      	sub	sp, #24
 800d37e:	af00      	add	r7, sp, #0
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	460b      	mov	r3, r1
 800d384:	607a      	str	r2, [r7, #4]
 800d386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d388:	7afb      	ldrb	r3, [r7, #11]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d16b      	bne.n	800d466 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3314      	adds	r3, #20
 800d392:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d156      	bne.n	800d44c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	689a      	ldr	r2, [r3, #8]
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d914      	bls.n	800d3d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	1ad2      	subs	r2, r2, r3
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	6879      	ldr	r1, [r7, #4]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 ff3b 	bl	800e23c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f001 fbf6 	bl	800ebbe <USBD_LL_PrepareReceive>
 800d3d2:	e03b      	b.n	800d44c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	68da      	ldr	r2, [r3, #12]
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d11c      	bne.n	800d41a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d316      	bcc.n	800d41a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	685a      	ldr	r2, [r3, #4]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d20f      	bcs.n	800d41a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f000 ff1c 	bl	800e23c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d40c:	2300      	movs	r3, #0
 800d40e:	2200      	movs	r2, #0
 800d410:	2100      	movs	r1, #0
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f001 fbd3 	bl	800ebbe <USBD_LL_PrepareReceive>
 800d418:	e018      	b.n	800d44c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b03      	cmp	r3, #3
 800d424:	d10b      	bne.n	800d43e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d005      	beq.n	800d43e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d43e:	2180      	movs	r1, #128	; 0x80
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f001 fb11 	bl	800ea68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f000 ff4a 	bl	800e2e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d452:	2b01      	cmp	r3, #1
 800d454:	d122      	bne.n	800d49c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f7ff fe98 	bl	800d18c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d464:	e01a      	b.n	800d49c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b03      	cmp	r3, #3
 800d470:	d114      	bne.n	800d49c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d00e      	beq.n	800d49c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	7afa      	ldrb	r2, [r7, #11]
 800d488:	4611      	mov	r1, r2
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	4798      	blx	r3
 800d48e:	4603      	mov	r3, r0
 800d490:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d492:	7dfb      	ldrb	r3, [r7, #23]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d498:	7dfb      	ldrb	r3, [r7, #23]
 800d49a:	e000      	b.n	800d49e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b082      	sub	sp, #8
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d101      	bne.n	800d4da <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	e02f      	b.n	800d53a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00f      	beq.n	800d504 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d009      	beq.n	800d504 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	6852      	ldr	r2, [r2, #4]
 800d4fc:	b2d2      	uxtb	r2, r2
 800d4fe:	4611      	mov	r1, r2
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d504:	2340      	movs	r3, #64	; 0x40
 800d506:	2200      	movs	r2, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f001 fa67 	bl	800e9de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2201      	movs	r2, #1
 800d514:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2240      	movs	r2, #64	; 0x40
 800d51c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d520:	2340      	movs	r3, #64	; 0x40
 800d522:	2200      	movs	r2, #0
 800d524:	2180      	movs	r1, #128	; 0x80
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 fa59 	bl	800e9de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2240      	movs	r2, #64	; 0x40
 800d536:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	460b      	mov	r3, r1
 800d54c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	78fa      	ldrb	r2, [r7, #3]
 800d552:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d570:	b2da      	uxtb	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2204      	movs	r2, #4
 800d57c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	370c      	adds	r7, #12
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d106      	bne.n	800d5b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e012      	b.n	800d5fa <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	d10b      	bne.n	800d5f8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e6:	69db      	ldr	r3, [r3, #28]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d005      	beq.n	800d5f8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d602:	b480      	push	{r7}
 800d604:	b087      	sub	sp, #28
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	3301      	adds	r3, #1
 800d618:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d620:	8a3b      	ldrh	r3, [r7, #16]
 800d622:	021b      	lsls	r3, r3, #8
 800d624:	b21a      	sxth	r2, r3
 800d626:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	b21b      	sxth	r3, r3
 800d62e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d630:	89fb      	ldrh	r3, [r7, #14]
}
 800d632:	4618      	mov	r0, r3
 800d634:	371c      	adds	r7, #28
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
	...

0800d640 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d656:	2b40      	cmp	r3, #64	; 0x40
 800d658:	d005      	beq.n	800d666 <USBD_StdDevReq+0x26>
 800d65a:	2b40      	cmp	r3, #64	; 0x40
 800d65c:	d853      	bhi.n	800d706 <USBD_StdDevReq+0xc6>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00b      	beq.n	800d67a <USBD_StdDevReq+0x3a>
 800d662:	2b20      	cmp	r3, #32
 800d664:	d14f      	bne.n	800d706 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	4798      	blx	r3
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
      break;
 800d678:	e04a      	b.n	800d710 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	785b      	ldrb	r3, [r3, #1]
 800d67e:	2b09      	cmp	r3, #9
 800d680:	d83b      	bhi.n	800d6fa <USBD_StdDevReq+0xba>
 800d682:	a201      	add	r2, pc, #4	; (adr r2, 800d688 <USBD_StdDevReq+0x48>)
 800d684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d688:	0800d6dd 	.word	0x0800d6dd
 800d68c:	0800d6f1 	.word	0x0800d6f1
 800d690:	0800d6fb 	.word	0x0800d6fb
 800d694:	0800d6e7 	.word	0x0800d6e7
 800d698:	0800d6fb 	.word	0x0800d6fb
 800d69c:	0800d6bb 	.word	0x0800d6bb
 800d6a0:	0800d6b1 	.word	0x0800d6b1
 800d6a4:	0800d6fb 	.word	0x0800d6fb
 800d6a8:	0800d6d3 	.word	0x0800d6d3
 800d6ac:	0800d6c5 	.word	0x0800d6c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f9de 	bl	800da74 <USBD_GetDescriptor>
          break;
 800d6b8:	e024      	b.n	800d704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fb6d 	bl	800dd9c <USBD_SetAddress>
          break;
 800d6c2:	e01f      	b.n	800d704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fbac 	bl	800de24 <USBD_SetConfig>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
          break;
 800d6d0:	e018      	b.n	800d704 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fc4b 	bl	800df70 <USBD_GetConfig>
          break;
 800d6da:	e013      	b.n	800d704 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fc7c 	bl	800dfdc <USBD_GetStatus>
          break;
 800d6e4:	e00e      	b.n	800d704 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fcab 	bl	800e044 <USBD_SetFeature>
          break;
 800d6ee:	e009      	b.n	800d704 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fcba 	bl	800e06c <USBD_ClrFeature>
          break;
 800d6f8:	e004      	b.n	800d704 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fd11 	bl	800e124 <USBD_CtlError>
          break;
 800d702:	bf00      	nop
      }
      break;
 800d704:	e004      	b.n	800d710 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d706:	6839      	ldr	r1, [r7, #0]
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fd0b 	bl	800e124 <USBD_CtlError>
      break;
 800d70e:	bf00      	nop
  }

  return ret;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop

0800d71c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d726:	2300      	movs	r3, #0
 800d728:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d732:	2b40      	cmp	r3, #64	; 0x40
 800d734:	d005      	beq.n	800d742 <USBD_StdItfReq+0x26>
 800d736:	2b40      	cmp	r3, #64	; 0x40
 800d738:	d82f      	bhi.n	800d79a <USBD_StdItfReq+0x7e>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <USBD_StdItfReq+0x26>
 800d73e:	2b20      	cmp	r3, #32
 800d740:	d12b      	bne.n	800d79a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	3b01      	subs	r3, #1
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d81d      	bhi.n	800d78c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	889b      	ldrh	r3, [r3, #4]
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b01      	cmp	r3, #1
 800d758:	d813      	bhi.n	800d782 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	4798      	blx	r3
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	88db      	ldrh	r3, [r3, #6]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d110      	bne.n	800d796 <USBD_StdItfReq+0x7a>
 800d774:	7bfb      	ldrb	r3, [r7, #15]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10d      	bne.n	800d796 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fd9d 	bl	800e2ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d780:	e009      	b.n	800d796 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fccd 	bl	800e124 <USBD_CtlError>
          break;
 800d78a:	e004      	b.n	800d796 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fcc8 	bl	800e124 <USBD_CtlError>
          break;
 800d794:	e000      	b.n	800d798 <USBD_StdItfReq+0x7c>
          break;
 800d796:	bf00      	nop
      }
      break;
 800d798:	e004      	b.n	800d7a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d79a:	6839      	ldr	r1, [r7, #0]
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 fcc1 	bl	800e124 <USBD_CtlError>
      break;
 800d7a2:	bf00      	nop
  }

  return ret;
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b084      	sub	sp, #16
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	889b      	ldrh	r3, [r3, #4]
 800d7c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7ca:	2b40      	cmp	r3, #64	; 0x40
 800d7cc:	d007      	beq.n	800d7de <USBD_StdEPReq+0x30>
 800d7ce:	2b40      	cmp	r3, #64	; 0x40
 800d7d0:	f200 8145 	bhi.w	800da5e <USBD_StdEPReq+0x2b0>
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00c      	beq.n	800d7f2 <USBD_StdEPReq+0x44>
 800d7d8:	2b20      	cmp	r3, #32
 800d7da:	f040 8140 	bne.w	800da5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	4798      	blx	r3
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d7f0:	e13a      	b.n	800da68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	785b      	ldrb	r3, [r3, #1]
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d007      	beq.n	800d80a <USBD_StdEPReq+0x5c>
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	f300 8129 	bgt.w	800da52 <USBD_StdEPReq+0x2a4>
 800d800:	2b00      	cmp	r3, #0
 800d802:	d07f      	beq.n	800d904 <USBD_StdEPReq+0x156>
 800d804:	2b01      	cmp	r3, #1
 800d806:	d03c      	beq.n	800d882 <USBD_StdEPReq+0xd4>
 800d808:	e123      	b.n	800da52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b02      	cmp	r3, #2
 800d814:	d002      	beq.n	800d81c <USBD_StdEPReq+0x6e>
 800d816:	2b03      	cmp	r3, #3
 800d818:	d016      	beq.n	800d848 <USBD_StdEPReq+0x9a>
 800d81a:	e02c      	b.n	800d876 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00d      	beq.n	800d83e <USBD_StdEPReq+0x90>
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	2b80      	cmp	r3, #128	; 0x80
 800d826:	d00a      	beq.n	800d83e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 f91b 	bl	800ea68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d832:	2180      	movs	r1, #128	; 0x80
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f001 f917 	bl	800ea68 <USBD_LL_StallEP>
 800d83a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d83c:	e020      	b.n	800d880 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d83e:	6839      	ldr	r1, [r7, #0]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 fc6f 	bl	800e124 <USBD_CtlError>
              break;
 800d846:	e01b      	b.n	800d880 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	885b      	ldrh	r3, [r3, #2]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10e      	bne.n	800d86e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <USBD_StdEPReq+0xc0>
 800d856:	7bbb      	ldrb	r3, [r7, #14]
 800d858:	2b80      	cmp	r3, #128	; 0x80
 800d85a:	d008      	beq.n	800d86e <USBD_StdEPReq+0xc0>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	88db      	ldrh	r3, [r3, #6]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d104      	bne.n	800d86e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d864:	7bbb      	ldrb	r3, [r7, #14]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f001 f8fd 	bl	800ea68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fd23 	bl	800e2ba <USBD_CtlSendStatus>

              break;
 800d874:	e004      	b.n	800d880 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 fc53 	bl	800e124 <USBD_CtlError>
              break;
 800d87e:	bf00      	nop
          }
          break;
 800d880:	e0ec      	b.n	800da5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d002      	beq.n	800d894 <USBD_StdEPReq+0xe6>
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d016      	beq.n	800d8c0 <USBD_StdEPReq+0x112>
 800d892:	e030      	b.n	800d8f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d894:	7bbb      	ldrb	r3, [r7, #14]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00d      	beq.n	800d8b6 <USBD_StdEPReq+0x108>
 800d89a:	7bbb      	ldrb	r3, [r7, #14]
 800d89c:	2b80      	cmp	r3, #128	; 0x80
 800d89e:	d00a      	beq.n	800d8b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f001 f8df 	bl	800ea68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8aa:	2180      	movs	r1, #128	; 0x80
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f001 f8db 	bl	800ea68 <USBD_LL_StallEP>
 800d8b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8b4:	e025      	b.n	800d902 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 fc33 	bl	800e124 <USBD_CtlError>
              break;
 800d8be:	e020      	b.n	800d902 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	885b      	ldrh	r3, [r3, #2]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d11b      	bne.n	800d900 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d8c8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d004      	beq.n	800d8dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f001 f8e5 	bl	800eaa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fcec 	bl	800e2ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	6839      	ldr	r1, [r7, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	4798      	blx	r3
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d8f4:	e004      	b.n	800d900 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fc13 	bl	800e124 <USBD_CtlError>
              break;
 800d8fe:	e000      	b.n	800d902 <USBD_StdEPReq+0x154>
              break;
 800d900:	bf00      	nop
          }
          break;
 800d902:	e0ab      	b.n	800da5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d002      	beq.n	800d916 <USBD_StdEPReq+0x168>
 800d910:	2b03      	cmp	r3, #3
 800d912:	d032      	beq.n	800d97a <USBD_StdEPReq+0x1cc>
 800d914:	e097      	b.n	800da46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d916:	7bbb      	ldrb	r3, [r7, #14]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d007      	beq.n	800d92c <USBD_StdEPReq+0x17e>
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
 800d91e:	2b80      	cmp	r3, #128	; 0x80
 800d920:	d004      	beq.n	800d92c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fbfd 	bl	800e124 <USBD_CtlError>
                break;
 800d92a:	e091      	b.n	800da50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d92c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d930:	2b00      	cmp	r3, #0
 800d932:	da0b      	bge.n	800d94c <USBD_StdEPReq+0x19e>
 800d934:	7bbb      	ldrb	r3, [r7, #14]
 800d936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d93a:	4613      	mov	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	3310      	adds	r3, #16
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	4413      	add	r3, r2
 800d948:	3304      	adds	r3, #4
 800d94a:	e00b      	b.n	800d964 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d94c:	7bbb      	ldrb	r3, [r7, #14]
 800d94e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d952:	4613      	mov	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	4413      	add	r3, r2
 800d962:	3304      	adds	r3, #4
 800d964:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2200      	movs	r2, #0
 800d96a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2202      	movs	r2, #2
 800d970:	4619      	mov	r1, r3
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fc47 	bl	800e206 <USBD_CtlSendData>
              break;
 800d978:	e06a      	b.n	800da50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d97a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da11      	bge.n	800d9a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	f003 020f 	and.w	r2, r3, #15
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	4613      	mov	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	440b      	add	r3, r1
 800d994:	3324      	adds	r3, #36	; 0x24
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d117      	bne.n	800d9cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fbc0 	bl	800e124 <USBD_CtlError>
                  break;
 800d9a4:	e054      	b.n	800da50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	f003 020f 	and.w	r2, r3, #15
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4413      	add	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	440b      	add	r3, r1
 800d9b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d104      	bne.n	800d9cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fbad 	bl	800e124 <USBD_CtlError>
                  break;
 800d9ca:	e041      	b.n	800da50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da0b      	bge.n	800d9ec <USBD_StdEPReq+0x23e>
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
 800d9d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9da:	4613      	mov	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	3310      	adds	r3, #16
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	e00b      	b.n	800da04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4413      	add	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	4413      	add	r3, r2
 800da02:	3304      	adds	r3, #4
 800da04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da06:	7bbb      	ldrb	r3, [r7, #14]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <USBD_StdEPReq+0x264>
 800da0c:	7bbb      	ldrb	r3, [r7, #14]
 800da0e:	2b80      	cmp	r3, #128	; 0x80
 800da10:	d103      	bne.n	800da1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
 800da18:	e00e      	b.n	800da38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da1a:	7bbb      	ldrb	r3, [r7, #14]
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f001 f860 	bl	800eae4 <USBD_LL_IsStallEP>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d003      	beq.n	800da32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2201      	movs	r2, #1
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	e002      	b.n	800da38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	2200      	movs	r2, #0
 800da36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	2202      	movs	r2, #2
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fbe1 	bl	800e206 <USBD_CtlSendData>
              break;
 800da44:	e004      	b.n	800da50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fb6b 	bl	800e124 <USBD_CtlError>
              break;
 800da4e:	bf00      	nop
          }
          break;
 800da50:	e004      	b.n	800da5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fb65 	bl	800e124 <USBD_CtlError>
          break;
 800da5a:	bf00      	nop
      }
      break;
 800da5c:	e004      	b.n	800da68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fb5f 	bl	800e124 <USBD_CtlError>
      break;
 800da66:	bf00      	nop
  }

  return ret;
 800da68:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
	...

0800da74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da7e:	2300      	movs	r3, #0
 800da80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	885b      	ldrh	r3, [r3, #2]
 800da8e:	0a1b      	lsrs	r3, r3, #8
 800da90:	b29b      	uxth	r3, r3
 800da92:	3b01      	subs	r3, #1
 800da94:	2b0e      	cmp	r3, #14
 800da96:	f200 8152 	bhi.w	800dd3e <USBD_GetDescriptor+0x2ca>
 800da9a:	a201      	add	r2, pc, #4	; (adr r2, 800daa0 <USBD_GetDescriptor+0x2c>)
 800da9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa0:	0800db11 	.word	0x0800db11
 800daa4:	0800db29 	.word	0x0800db29
 800daa8:	0800db69 	.word	0x0800db69
 800daac:	0800dd3f 	.word	0x0800dd3f
 800dab0:	0800dd3f 	.word	0x0800dd3f
 800dab4:	0800dcdf 	.word	0x0800dcdf
 800dab8:	0800dd0b 	.word	0x0800dd0b
 800dabc:	0800dd3f 	.word	0x0800dd3f
 800dac0:	0800dd3f 	.word	0x0800dd3f
 800dac4:	0800dd3f 	.word	0x0800dd3f
 800dac8:	0800dd3f 	.word	0x0800dd3f
 800dacc:	0800dd3f 	.word	0x0800dd3f
 800dad0:	0800dd3f 	.word	0x0800dd3f
 800dad4:	0800dd3f 	.word	0x0800dd3f
 800dad8:	0800dadd 	.word	0x0800dadd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dae2:	69db      	ldr	r3, [r3, #28]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00b      	beq.n	800db00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daee:	69db      	ldr	r3, [r3, #28]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	7c12      	ldrb	r2, [r2, #16]
 800daf4:	f107 0108 	add.w	r1, r7, #8
 800daf8:	4610      	mov	r0, r2
 800dafa:	4798      	blx	r3
 800dafc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dafe:	e126      	b.n	800dd4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fb0e 	bl	800e124 <USBD_CtlError>
        err++;
 800db08:	7afb      	ldrb	r3, [r7, #11]
 800db0a:	3301      	adds	r3, #1
 800db0c:	72fb      	strb	r3, [r7, #11]
      break;
 800db0e:	e11e      	b.n	800dd4e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	7c12      	ldrb	r2, [r2, #16]
 800db1c:	f107 0108 	add.w	r1, r7, #8
 800db20:	4610      	mov	r0, r2
 800db22:	4798      	blx	r3
 800db24:	60f8      	str	r0, [r7, #12]
      break;
 800db26:	e112      	b.n	800dd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7c1b      	ldrb	r3, [r3, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10d      	bne.n	800db4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db38:	f107 0208 	add.w	r2, r7, #8
 800db3c:	4610      	mov	r0, r2
 800db3e:	4798      	blx	r3
 800db40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3301      	adds	r3, #1
 800db46:	2202      	movs	r2, #2
 800db48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db4a:	e100      	b.n	800dd4e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db54:	f107 0208 	add.w	r2, r7, #8
 800db58:	4610      	mov	r0, r2
 800db5a:	4798      	blx	r3
 800db5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3301      	adds	r3, #1
 800db62:	2202      	movs	r2, #2
 800db64:	701a      	strb	r2, [r3, #0]
      break;
 800db66:	e0f2      	b.n	800dd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	885b      	ldrh	r3, [r3, #2]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b05      	cmp	r3, #5
 800db70:	f200 80ac 	bhi.w	800dccc <USBD_GetDescriptor+0x258>
 800db74:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <USBD_GetDescriptor+0x108>)
 800db76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7a:	bf00      	nop
 800db7c:	0800db95 	.word	0x0800db95
 800db80:	0800dbc9 	.word	0x0800dbc9
 800db84:	0800dbfd 	.word	0x0800dbfd
 800db88:	0800dc31 	.word	0x0800dc31
 800db8c:	0800dc65 	.word	0x0800dc65
 800db90:	0800dc99 	.word	0x0800dc99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00b      	beq.n	800dbb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	7c12      	ldrb	r2, [r2, #16]
 800dbac:	f107 0108 	add.w	r1, r7, #8
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	4798      	blx	r3
 800dbb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbb6:	e091      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fab2 	bl	800e124 <USBD_CtlError>
            err++;
 800dbc0:	7afb      	ldrb	r3, [r7, #11]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	72fb      	strb	r3, [r7, #11]
          break;
 800dbc6:	e089      	b.n	800dcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00b      	beq.n	800dbec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	7c12      	ldrb	r2, [r2, #16]
 800dbe0:	f107 0108 	add.w	r1, r7, #8
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4798      	blx	r3
 800dbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbea:	e077      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fa98 	bl	800e124 <USBD_CtlError>
            err++;
 800dbf4:	7afb      	ldrb	r3, [r7, #11]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbfa:	e06f      	b.n	800dcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00b      	beq.n	800dc20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	7c12      	ldrb	r2, [r2, #16]
 800dc14:	f107 0108 	add.w	r1, r7, #8
 800dc18:	4610      	mov	r0, r2
 800dc1a:	4798      	blx	r3
 800dc1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc1e:	e05d      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fa7e 	bl	800e124 <USBD_CtlError>
            err++;
 800dc28:	7afb      	ldrb	r3, [r7, #11]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc2e:	e055      	b.n	800dcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00b      	beq.n	800dc54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	7c12      	ldrb	r2, [r2, #16]
 800dc48:	f107 0108 	add.w	r1, r7, #8
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	4798      	blx	r3
 800dc50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc52:	e043      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fa64 	bl	800e124 <USBD_CtlError>
            err++;
 800dc5c:	7afb      	ldrb	r3, [r7, #11]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	72fb      	strb	r3, [r7, #11]
          break;
 800dc62:	e03b      	b.n	800dcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc6a:	695b      	ldr	r3, [r3, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00b      	beq.n	800dc88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	7c12      	ldrb	r2, [r2, #16]
 800dc7c:	f107 0108 	add.w	r1, r7, #8
 800dc80:	4610      	mov	r0, r2
 800dc82:	4798      	blx	r3
 800dc84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc86:	e029      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fa4a 	bl	800e124 <USBD_CtlError>
            err++;
 800dc90:	7afb      	ldrb	r3, [r7, #11]
 800dc92:	3301      	adds	r3, #1
 800dc94:	72fb      	strb	r3, [r7, #11]
          break;
 800dc96:	e021      	b.n	800dcdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00b      	beq.n	800dcbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	7c12      	ldrb	r2, [r2, #16]
 800dcb0:	f107 0108 	add.w	r1, r7, #8
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	4798      	blx	r3
 800dcb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcba:	e00f      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fa30 	bl	800e124 <USBD_CtlError>
            err++;
 800dcc4:	7afb      	ldrb	r3, [r7, #11]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	72fb      	strb	r3, [r7, #11]
          break;
 800dcca:	e007      	b.n	800dcdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dccc:	6839      	ldr	r1, [r7, #0]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fa28 	bl	800e124 <USBD_CtlError>
          err++;
 800dcd4:	7afb      	ldrb	r3, [r7, #11]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800dcda:	bf00      	nop
      }
      break;
 800dcdc:	e037      	b.n	800dd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	7c1b      	ldrb	r3, [r3, #16]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d109      	bne.n	800dcfa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcee:	f107 0208 	add.w	r2, r7, #8
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	4798      	blx	r3
 800dcf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcf8:	e029      	b.n	800dd4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fa11 	bl	800e124 <USBD_CtlError>
        err++;
 800dd02:	7afb      	ldrb	r3, [r7, #11]
 800dd04:	3301      	adds	r3, #1
 800dd06:	72fb      	strb	r3, [r7, #11]
      break;
 800dd08:	e021      	b.n	800dd4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7c1b      	ldrb	r3, [r3, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10d      	bne.n	800dd2e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1a:	f107 0208 	add.w	r2, r7, #8
 800dd1e:	4610      	mov	r0, r2
 800dd20:	4798      	blx	r3
 800dd22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3301      	adds	r3, #1
 800dd28:	2207      	movs	r2, #7
 800dd2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd2c:	e00f      	b.n	800dd4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd2e:	6839      	ldr	r1, [r7, #0]
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f9f7 	bl	800e124 <USBD_CtlError>
        err++;
 800dd36:	7afb      	ldrb	r3, [r7, #11]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	72fb      	strb	r3, [r7, #11]
      break;
 800dd3c:	e007      	b.n	800dd4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f9ef 	bl	800e124 <USBD_CtlError>
      err++;
 800dd46:	7afb      	ldrb	r3, [r7, #11]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	72fb      	strb	r3, [r7, #11]
      break;
 800dd4c:	bf00      	nop
  }

  if (err != 0U)
 800dd4e:	7afb      	ldrb	r3, [r7, #11]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d11e      	bne.n	800dd92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	88db      	ldrh	r3, [r3, #6]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d016      	beq.n	800dd8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dd5c:	893b      	ldrh	r3, [r7, #8]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00e      	beq.n	800dd80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	88da      	ldrh	r2, [r3, #6]
 800dd66:	893b      	ldrh	r3, [r7, #8]
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	bf28      	it	cs
 800dd6c:	4613      	movcs	r3, r2
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd72:	893b      	ldrh	r3, [r7, #8]
 800dd74:	461a      	mov	r2, r3
 800dd76:	68f9      	ldr	r1, [r7, #12]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fa44 	bl	800e206 <USBD_CtlSendData>
 800dd7e:	e009      	b.n	800dd94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd80:	6839      	ldr	r1, [r7, #0]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 f9ce 	bl	800e124 <USBD_CtlError>
 800dd88:	e004      	b.n	800dd94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fa95 	bl	800e2ba <USBD_CtlSendStatus>
 800dd90:	e000      	b.n	800dd94 <USBD_GetDescriptor+0x320>
    return;
 800dd92:	bf00      	nop
  }
}
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop

0800dd9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	889b      	ldrh	r3, [r3, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d131      	bne.n	800de12 <USBD_SetAddress+0x76>
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	88db      	ldrh	r3, [r3, #6]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d12d      	bne.n	800de12 <USBD_SetAddress+0x76>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	885b      	ldrh	r3, [r3, #2]
 800ddba:	2b7f      	cmp	r3, #127	; 0x7f
 800ddbc:	d829      	bhi.n	800de12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	885b      	ldrh	r3, [r3, #2]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b03      	cmp	r3, #3
 800ddd4:	d104      	bne.n	800dde0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f9a3 	bl	800e124 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddde:	e01d      	b.n	800de1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	7bfa      	ldrb	r2, [r7, #15]
 800dde4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fea6 	bl	800eb3e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 fa61 	bl	800e2ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ddf8:	7bfb      	ldrb	r3, [r7, #15]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d004      	beq.n	800de08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2202      	movs	r2, #2
 800de02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de06:	e009      	b.n	800de1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de10:	e004      	b.n	800de1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f985 	bl	800e124 <USBD_CtlError>
  }
}
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	885b      	ldrh	r3, [r3, #2]
 800de36:	b2da      	uxtb	r2, r3
 800de38:	4b4c      	ldr	r3, [pc, #304]	; (800df6c <USBD_SetConfig+0x148>)
 800de3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de3c:	4b4b      	ldr	r3, [pc, #300]	; (800df6c <USBD_SetConfig+0x148>)
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d905      	bls.n	800de50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f96c 	bl	800e124 <USBD_CtlError>
    return USBD_FAIL;
 800de4c:	2303      	movs	r3, #3
 800de4e:	e088      	b.n	800df62 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b02      	cmp	r3, #2
 800de5a:	d002      	beq.n	800de62 <USBD_SetConfig+0x3e>
 800de5c:	2b03      	cmp	r3, #3
 800de5e:	d025      	beq.n	800deac <USBD_SetConfig+0x88>
 800de60:	e071      	b.n	800df46 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de62:	4b42      	ldr	r3, [pc, #264]	; (800df6c <USBD_SetConfig+0x148>)
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d01c      	beq.n	800dea4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800de6a:	4b40      	ldr	r3, [pc, #256]	; (800df6c <USBD_SetConfig+0x148>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de74:	4b3d      	ldr	r3, [pc, #244]	; (800df6c <USBD_SetConfig+0x148>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	4619      	mov	r1, r3
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7ff f991 	bl	800d1a2 <USBD_SetClassConfig>
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d004      	beq.n	800de94 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f949 	bl	800e124 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de92:	e065      	b.n	800df60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 fa10 	bl	800e2ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2203      	movs	r2, #3
 800de9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dea2:	e05d      	b.n	800df60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fa08 	bl	800e2ba <USBD_CtlSendStatus>
      break;
 800deaa:	e059      	b.n	800df60 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800deac:	4b2f      	ldr	r3, [pc, #188]	; (800df6c <USBD_SetConfig+0x148>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d112      	bne.n	800deda <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2202      	movs	r2, #2
 800deb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800debc:	4b2b      	ldr	r3, [pc, #172]	; (800df6c <USBD_SetConfig+0x148>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	461a      	mov	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dec6:	4b29      	ldr	r3, [pc, #164]	; (800df6c <USBD_SetConfig+0x148>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff f984 	bl	800d1da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f9f1 	bl	800e2ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ded8:	e042      	b.n	800df60 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800deda:	4b24      	ldr	r3, [pc, #144]	; (800df6c <USBD_SetConfig+0x148>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	461a      	mov	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d02a      	beq.n	800df3e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	b2db      	uxtb	r3, r3
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff f972 	bl	800d1da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <USBD_SetConfig+0x148>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	461a      	mov	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df00:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <USBD_SetConfig+0x148>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	4619      	mov	r1, r3
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7ff f94b 	bl	800d1a2 <USBD_SetClassConfig>
 800df0c:	4603      	mov	r3, r0
 800df0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df10:	7bfb      	ldrb	r3, [r7, #15]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00f      	beq.n	800df36 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 f903 	bl	800e124 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	b2db      	uxtb	r3, r3
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff f957 	bl	800d1da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2202      	movs	r2, #2
 800df30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df34:	e014      	b.n	800df60 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 f9bf 	bl	800e2ba <USBD_CtlSendStatus>
      break;
 800df3c:	e010      	b.n	800df60 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f9bb 	bl	800e2ba <USBD_CtlSendStatus>
      break;
 800df44:	e00c      	b.n	800df60 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f8eb 	bl	800e124 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df4e:	4b07      	ldr	r3, [pc, #28]	; (800df6c <USBD_SetConfig+0x148>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff f940 	bl	800d1da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df5a:	2303      	movs	r3, #3
 800df5c:	73fb      	strb	r3, [r7, #15]
      break;
 800df5e:	bf00      	nop
  }

  return ret;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20002d5c 	.word	0x20002d5c

0800df70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	88db      	ldrh	r3, [r3, #6]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d004      	beq.n	800df8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f8cd 	bl	800e124 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df8a:	e023      	b.n	800dfd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b02      	cmp	r3, #2
 800df96:	dc02      	bgt.n	800df9e <USBD_GetConfig+0x2e>
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dc03      	bgt.n	800dfa4 <USBD_GetConfig+0x34>
 800df9c:	e015      	b.n	800dfca <USBD_GetConfig+0x5a>
 800df9e:	2b03      	cmp	r3, #3
 800dfa0:	d00b      	beq.n	800dfba <USBD_GetConfig+0x4a>
 800dfa2:	e012      	b.n	800dfca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3308      	adds	r3, #8
 800dfae:	2201      	movs	r2, #1
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 f927 	bl	800e206 <USBD_CtlSendData>
        break;
 800dfb8:	e00c      	b.n	800dfd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f91f 	bl	800e206 <USBD_CtlSendData>
        break;
 800dfc8:	e004      	b.n	800dfd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dfca:	6839      	ldr	r1, [r7, #0]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f8a9 	bl	800e124 <USBD_CtlError>
        break;
 800dfd2:	bf00      	nop
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	3b01      	subs	r3, #1
 800dff0:	2b02      	cmp	r3, #2
 800dff2:	d81e      	bhi.n	800e032 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	88db      	ldrh	r3, [r3, #6]
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d004      	beq.n	800e006 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dffc:	6839      	ldr	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f890 	bl	800e124 <USBD_CtlError>
        break;
 800e004:	e01a      	b.n	800e03c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2201      	movs	r2, #1
 800e00a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e012:	2b00      	cmp	r3, #0
 800e014:	d005      	beq.n	800e022 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	f043 0202 	orr.w	r2, r3, #2
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	330c      	adds	r3, #12
 800e026:	2202      	movs	r2, #2
 800e028:	4619      	mov	r1, r3
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f8eb 	bl	800e206 <USBD_CtlSendData>
      break;
 800e030:	e004      	b.n	800e03c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f875 	bl	800e124 <USBD_CtlError>
      break;
 800e03a:	bf00      	nop
  }
}
 800e03c:	bf00      	nop
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	885b      	ldrh	r3, [r3, #2]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d106      	bne.n	800e064 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2201      	movs	r2, #1
 800e05a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f92b 	bl	800e2ba <USBD_CtlSendStatus>
  }
}
 800e064:	bf00      	nop
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	3b01      	subs	r3, #1
 800e080:	2b02      	cmp	r3, #2
 800e082:	d80b      	bhi.n	800e09c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	885b      	ldrh	r3, [r3, #2]
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d10c      	bne.n	800e0a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f910 	bl	800e2ba <USBD_CtlSendStatus>
      }
      break;
 800e09a:	e004      	b.n	800e0a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f840 	bl	800e124 <USBD_CtlError>
      break;
 800e0a4:	e000      	b.n	800e0a8 <USBD_ClrFeature+0x3c>
      break;
 800e0a6:	bf00      	nop
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	781a      	ldrb	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	781a      	ldrb	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f7ff fa91 	bl	800d602 <SWAPBYTE>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f7ff fa84 	bl	800d602 <SWAPBYTE>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3301      	adds	r3, #1
 800e10c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	f7ff fa77 	bl	800d602 <SWAPBYTE>
 800e114:	4603      	mov	r3, r0
 800e116:	461a      	mov	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	80da      	strh	r2, [r3, #6]
}
 800e11c:	bf00      	nop
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e12e:	2180      	movs	r1, #128	; 0x80
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fc99 	bl	800ea68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e136:	2100      	movs	r1, #0
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fc95 	bl	800ea68 <USBD_LL_StallEP>
}
 800e13e:	bf00      	nop
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b086      	sub	sp, #24
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	60f8      	str	r0, [r7, #12]
 800e14e:	60b9      	str	r1, [r7, #8]
 800e150:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e152:	2300      	movs	r3, #0
 800e154:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d036      	beq.n	800e1ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e160:	6938      	ldr	r0, [r7, #16]
 800e162:	f000 f836 	bl	800e1d2 <USBD_GetLen>
 800e166:	4603      	mov	r3, r0
 800e168:	3301      	adds	r3, #1
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	005b      	lsls	r3, r3, #1
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e174:	7dfb      	ldrb	r3, [r7, #23]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	4413      	add	r3, r2
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	7812      	ldrb	r2, [r2, #0]
 800e17e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e180:	7dfb      	ldrb	r3, [r7, #23]
 800e182:	3301      	adds	r3, #1
 800e184:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e186:	7dfb      	ldrb	r3, [r7, #23]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	4413      	add	r3, r2
 800e18c:	2203      	movs	r2, #3
 800e18e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e190:	7dfb      	ldrb	r3, [r7, #23]
 800e192:	3301      	adds	r3, #1
 800e194:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e196:	e013      	b.n	800e1c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e198:	7dfb      	ldrb	r3, [r7, #23]
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	4413      	add	r3, r2
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	7812      	ldrb	r2, [r2, #0]
 800e1a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	613b      	str	r3, [r7, #16]
    idx++;
 800e1aa:	7dfb      	ldrb	r3, [r7, #23]
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e1b0:	7dfb      	ldrb	r3, [r7, #23]
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1e7      	bne.n	800e198 <USBD_GetString+0x52>
 800e1c8:	e000      	b.n	800e1cc <USBD_GetString+0x86>
    return;
 800e1ca:	bf00      	nop
  }
}
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b085      	sub	sp, #20
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e1e2:	e005      	b.n	800e1f0 <USBD_GetLen+0x1e>
  {
    len++;
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1f5      	bne.n	800e1e4 <USBD_GetLen+0x12>
  }

  return len;
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3714      	adds	r7, #20
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b084      	sub	sp, #16
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	60f8      	str	r0, [r7, #12]
 800e20e:	60b9      	str	r1, [r7, #8]
 800e210:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2202      	movs	r2, #2
 800e216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	2100      	movs	r1, #0
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f000 fca5 	bl	800eb7c <USBD_LL_Transmit>

  return USBD_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	2100      	movs	r1, #0
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f000 fc94 	bl	800eb7c <USBD_LL_Transmit>

  return USBD_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2203      	movs	r2, #3
 800e26e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	2100      	movs	r1, #0
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f000 fc98 	bl	800ebbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f000 fc87 	bl	800ebbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b082      	sub	sp, #8
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2204      	movs	r2, #4
 800e2c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fc53 	bl	800eb7c <USBD_LL_Transmit>

  return USBD_OK;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2205      	movs	r2, #5
 800e2ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fc61 	bl	800ebbe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
	...

0800e308 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e30c:	2200      	movs	r2, #0
 800e30e:	4912      	ldr	r1, [pc, #72]	; (800e358 <MX_USB_Device_Init+0x50>)
 800e310:	4812      	ldr	r0, [pc, #72]	; (800e35c <MX_USB_Device_Init+0x54>)
 800e312:	f7fe febd 	bl	800d090 <USBD_Init>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e31c:	f7f3 fb18 	bl	8001950 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e320:	490f      	ldr	r1, [pc, #60]	; (800e360 <MX_USB_Device_Init+0x58>)
 800e322:	480e      	ldr	r0, [pc, #56]	; (800e35c <MX_USB_Device_Init+0x54>)
 800e324:	f7fe fef2 	bl	800d10c <USBD_RegisterClass>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e32e:	f7f3 fb0f 	bl	8001950 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e332:	490c      	ldr	r1, [pc, #48]	; (800e364 <MX_USB_Device_Init+0x5c>)
 800e334:	4809      	ldr	r0, [pc, #36]	; (800e35c <MX_USB_Device_Init+0x54>)
 800e336:	f7fe fe05 	bl	800cf44 <USBD_CDC_RegisterInterface>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e340:	f7f3 fb06 	bl	8001950 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e344:	4805      	ldr	r0, [pc, #20]	; (800e35c <MX_USB_Device_Init+0x54>)
 800e346:	f7fe ff15 	bl	800d174 <USBD_Start>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e350:	f7f3 fafe 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e354:	bf00      	nop
 800e356:	bd80      	pop	{r7, pc}
 800e358:	20002808 	.word	0x20002808
 800e35c:	20002d60 	.word	0x20002d60
 800e360:	200026f0 	.word	0x200026f0
 800e364:	200027f4 	.word	0x200027f4

0800e368 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e36c:	2200      	movs	r2, #0
 800e36e:	4905      	ldr	r1, [pc, #20]	; (800e384 <CDC_Init_FS+0x1c>)
 800e370:	4805      	ldr	r0, [pc, #20]	; (800e388 <CDC_Init_FS+0x20>)
 800e372:	f7fe fdfc 	bl	800cf6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e376:	4905      	ldr	r1, [pc, #20]	; (800e38c <CDC_Init_FS+0x24>)
 800e378:	4803      	ldr	r0, [pc, #12]	; (800e388 <CDC_Init_FS+0x20>)
 800e37a:	f7fe fe16 	bl	800cfaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e37e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e380:	4618      	mov	r0, r3
 800e382:	bd80      	pop	{r7, pc}
 800e384:	20003830 	.word	0x20003830
 800e388:	20002d60 	.word	0x20002d60
 800e38c:	20003030 	.word	0x20003030

0800e390 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e390:	b480      	push	{r7}
 800e392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e394:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e396:	4618      	mov	r0, r3
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	6039      	str	r1, [r7, #0]
 800e3aa:	71fb      	strb	r3, [r7, #7]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	2b23      	cmp	r3, #35	; 0x23
 800e3b4:	d84a      	bhi.n	800e44c <CDC_Control_FS+0xac>
 800e3b6:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <CDC_Control_FS+0x1c>)
 800e3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3bc:	0800e44d 	.word	0x0800e44d
 800e3c0:	0800e44d 	.word	0x0800e44d
 800e3c4:	0800e44d 	.word	0x0800e44d
 800e3c8:	0800e44d 	.word	0x0800e44d
 800e3cc:	0800e44d 	.word	0x0800e44d
 800e3d0:	0800e44d 	.word	0x0800e44d
 800e3d4:	0800e44d 	.word	0x0800e44d
 800e3d8:	0800e44d 	.word	0x0800e44d
 800e3dc:	0800e44d 	.word	0x0800e44d
 800e3e0:	0800e44d 	.word	0x0800e44d
 800e3e4:	0800e44d 	.word	0x0800e44d
 800e3e8:	0800e44d 	.word	0x0800e44d
 800e3ec:	0800e44d 	.word	0x0800e44d
 800e3f0:	0800e44d 	.word	0x0800e44d
 800e3f4:	0800e44d 	.word	0x0800e44d
 800e3f8:	0800e44d 	.word	0x0800e44d
 800e3fc:	0800e44d 	.word	0x0800e44d
 800e400:	0800e44d 	.word	0x0800e44d
 800e404:	0800e44d 	.word	0x0800e44d
 800e408:	0800e44d 	.word	0x0800e44d
 800e40c:	0800e44d 	.word	0x0800e44d
 800e410:	0800e44d 	.word	0x0800e44d
 800e414:	0800e44d 	.word	0x0800e44d
 800e418:	0800e44d 	.word	0x0800e44d
 800e41c:	0800e44d 	.word	0x0800e44d
 800e420:	0800e44d 	.word	0x0800e44d
 800e424:	0800e44d 	.word	0x0800e44d
 800e428:	0800e44d 	.word	0x0800e44d
 800e42c:	0800e44d 	.word	0x0800e44d
 800e430:	0800e44d 	.word	0x0800e44d
 800e434:	0800e44d 	.word	0x0800e44d
 800e438:	0800e44d 	.word	0x0800e44d
 800e43c:	0800e44d 	.word	0x0800e44d
 800e440:	0800e44d 	.word	0x0800e44d
 800e444:	0800e44d 	.word	0x0800e44d
 800e448:	0800e44d 	.word	0x0800e44d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e44c:	bf00      	nop
  }

  return (USBD_OK);
 800e44e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e450:	4618      	mov	r0, r3
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
//  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
//  uint8_t len = (uint8_t) Len;
//  if (Buf[0]!='\0') {
//	  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
//	  memset(Buf, '\0', len);   // clear the Buf also
	  input_received_flag = 1;
 800e466:	4b07      	ldr	r3, [pc, #28]	; (800e484 <CDC_Receive_FS+0x28>)
 800e468:	2201      	movs	r2, #1
 800e46a:	701a      	strb	r2, [r3, #0]
//  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e46c:	6879      	ldr	r1, [r7, #4]
 800e46e:	4806      	ldr	r0, [pc, #24]	; (800e488 <CDC_Receive_FS+0x2c>)
 800e470:	f7fe fd9b 	bl	800cfaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e474:	4804      	ldr	r0, [pc, #16]	; (800e488 <CDC_Receive_FS+0x2c>)
 800e476:	f7fe fde1 	bl	800d03c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800e47a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	20004030 	.word	0x20004030
 800e488:	20002d60 	.word	0x20002d60

0800e48c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e49c:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <CDC_Transmit_FS+0x48>)
 800e49e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e00b      	b.n	800e4ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e4b2:	887b      	ldrh	r3, [r7, #2]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	6879      	ldr	r1, [r7, #4]
 800e4b8:	4806      	ldr	r0, [pc, #24]	; (800e4d4 <CDC_Transmit_FS+0x48>)
 800e4ba:	f7fe fd58 	bl	800cf6e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4be:	4805      	ldr	r0, [pc, #20]	; (800e4d4 <CDC_Transmit_FS+0x48>)
 800e4c0:	f7fe fd8c 	bl	800cfdc <USBD_CDC_TransmitPacket>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20002d60 	.word	0x20002d60

0800e4d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	371c      	adds	r7, #28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr
	...

0800e4fc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	6039      	str	r1, [r7, #0]
 800e506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2212      	movs	r2, #18
 800e50c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e50e:	4b03      	ldr	r3, [pc, #12]	; (800e51c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	20002828 	.word	0x20002828

0800e520 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	4603      	mov	r3, r0
 800e528:	6039      	str	r1, [r7, #0]
 800e52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2204      	movs	r2, #4
 800e530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e532:	4b03      	ldr	r3, [pc, #12]	; (800e540 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e534:	4618      	mov	r0, r3
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr
 800e540:	2000283c 	.word	0x2000283c

0800e544 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	4603      	mov	r3, r0
 800e54c:	6039      	str	r1, [r7, #0]
 800e54e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e550:	79fb      	ldrb	r3, [r7, #7]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d105      	bne.n	800e562 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e556:	683a      	ldr	r2, [r7, #0]
 800e558:	4907      	ldr	r1, [pc, #28]	; (800e578 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e55a:	4808      	ldr	r0, [pc, #32]	; (800e57c <USBD_CDC_ProductStrDescriptor+0x38>)
 800e55c:	f7ff fdf3 	bl	800e146 <USBD_GetString>
 800e560:	e004      	b.n	800e56c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	4904      	ldr	r1, [pc, #16]	; (800e578 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e566:	4805      	ldr	r0, [pc, #20]	; (800e57c <USBD_CDC_ProductStrDescriptor+0x38>)
 800e568:	f7ff fded 	bl	800e146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e56c:	4b02      	ldr	r3, [pc, #8]	; (800e578 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3708      	adds	r7, #8
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20004034 	.word	0x20004034
 800e57c:	08011908 	.word	0x08011908

0800e580 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	6039      	str	r1, [r7, #0]
 800e58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e58c:	683a      	ldr	r2, [r7, #0]
 800e58e:	4904      	ldr	r1, [pc, #16]	; (800e5a0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e590:	4804      	ldr	r0, [pc, #16]	; (800e5a4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e592:	f7ff fdd8 	bl	800e146 <USBD_GetString>
  return USBD_StrDesc;
 800e596:	4b02      	ldr	r3, [pc, #8]	; (800e5a0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20004034 	.word	0x20004034
 800e5a4:	08011920 	.word	0x08011920

0800e5a8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	6039      	str	r1, [r7, #0]
 800e5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	221a      	movs	r2, #26
 800e5b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5ba:	f000 f843 	bl	800e644 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e5be:	4b02      	ldr	r3, [pc, #8]	; (800e5c8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20002840 	.word	0x20002840

0800e5cc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	6039      	str	r1, [r7, #0]
 800e5d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e5d8:	79fb      	ldrb	r3, [r7, #7]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d105      	bne.n	800e5ea <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	4907      	ldr	r1, [pc, #28]	; (800e600 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e5e2:	4808      	ldr	r0, [pc, #32]	; (800e604 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e5e4:	f7ff fdaf 	bl	800e146 <USBD_GetString>
 800e5e8:	e004      	b.n	800e5f4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	4904      	ldr	r1, [pc, #16]	; (800e600 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e5ee:	4805      	ldr	r0, [pc, #20]	; (800e604 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e5f0:	f7ff fda9 	bl	800e146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5f4:	4b02      	ldr	r3, [pc, #8]	; (800e600 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20004034 	.word	0x20004034
 800e604:	08011934 	.word	0x08011934

0800e608 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	6039      	str	r1, [r7, #0]
 800e612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e614:	79fb      	ldrb	r3, [r7, #7]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d105      	bne.n	800e626 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	4907      	ldr	r1, [pc, #28]	; (800e63c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e61e:	4808      	ldr	r0, [pc, #32]	; (800e640 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e620:	f7ff fd91 	bl	800e146 <USBD_GetString>
 800e624:	e004      	b.n	800e630 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4904      	ldr	r1, [pc, #16]	; (800e63c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e62a:	4805      	ldr	r0, [pc, #20]	; (800e640 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e62c:	f7ff fd8b 	bl	800e146 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e630:	4b02      	ldr	r3, [pc, #8]	; (800e63c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20004034 	.word	0x20004034
 800e640:	08011940 	.word	0x08011940

0800e644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e64a:	4b0f      	ldr	r3, [pc, #60]	; (800e688 <Get_SerialNum+0x44>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e650:	4b0e      	ldr	r3, [pc, #56]	; (800e68c <Get_SerialNum+0x48>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e656:	4b0e      	ldr	r3, [pc, #56]	; (800e690 <Get_SerialNum+0x4c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4413      	add	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e66a:	2208      	movs	r2, #8
 800e66c:	4909      	ldr	r1, [pc, #36]	; (800e694 <Get_SerialNum+0x50>)
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 f814 	bl	800e69c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e674:	2204      	movs	r2, #4
 800e676:	4908      	ldr	r1, [pc, #32]	; (800e698 <Get_SerialNum+0x54>)
 800e678:	68b8      	ldr	r0, [r7, #8]
 800e67a:	f000 f80f 	bl	800e69c <IntToUnicode>
  }
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	1fff7590 	.word	0x1fff7590
 800e68c:	1fff7594 	.word	0x1fff7594
 800e690:	1fff7598 	.word	0x1fff7598
 800e694:	20002842 	.word	0x20002842
 800e698:	20002852 	.word	0x20002852

0800e69c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b087      	sub	sp, #28
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75fb      	strb	r3, [r7, #23]
 800e6b2:	e027      	b.n	800e704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	0f1b      	lsrs	r3, r3, #28
 800e6b8:	2b09      	cmp	r3, #9
 800e6ba:	d80b      	bhi.n	800e6d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	0f1b      	lsrs	r3, r3, #28
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
 800e6c4:	005b      	lsls	r3, r3, #1
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	440b      	add	r3, r1
 800e6cc:	3230      	adds	r2, #48	; 0x30
 800e6ce:	b2d2      	uxtb	r2, r2
 800e6d0:	701a      	strb	r2, [r3, #0]
 800e6d2:	e00a      	b.n	800e6ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	0f1b      	lsrs	r3, r3, #28
 800e6d8:	b2da      	uxtb	r2, r3
 800e6da:	7dfb      	ldrb	r3, [r7, #23]
 800e6dc:	005b      	lsls	r3, r3, #1
 800e6de:	4619      	mov	r1, r3
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	440b      	add	r3, r1
 800e6e4:	3237      	adds	r2, #55	; 0x37
 800e6e6:	b2d2      	uxtb	r2, r2
 800e6e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	011b      	lsls	r3, r3, #4
 800e6ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e6fe:	7dfb      	ldrb	r3, [r7, #23]
 800e700:	3301      	adds	r3, #1
 800e702:	75fb      	strb	r3, [r7, #23]
 800e704:	7dfa      	ldrb	r2, [r7, #23]
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d3d3      	bcc.n	800e6b4 <IntToUnicode+0x18>
  }
}
 800e70c:	bf00      	nop
 800e70e:	bf00      	nop
 800e710:	371c      	adds	r7, #28
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
	...

0800e71c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b098      	sub	sp, #96	; 0x60
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e724:	f107 030c 	add.w	r3, r7, #12
 800e728:	2254      	movs	r2, #84	; 0x54
 800e72a:	2100      	movs	r1, #0
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 fb25 	bl	800ed7c <memset>
  if(pcdHandle->Instance==USB)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a15      	ldr	r2, [pc, #84]	; (800e78c <HAL_PCD_MspInit+0x70>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d123      	bne.n	800e784 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e73c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e740:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800e742:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e746:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e748:	f107 030c 	add.w	r3, r7, #12
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7f9 fb19 	bl	8007d84 <HAL_RCCEx_PeriphCLKConfig>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d001      	beq.n	800e75c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800e758:	f7f3 f8fa 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e75c:	4b0c      	ldr	r3, [pc, #48]	; (800e790 <HAL_PCD_MspInit+0x74>)
 800e75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e760:	4a0b      	ldr	r2, [pc, #44]	; (800e790 <HAL_PCD_MspInit+0x74>)
 800e762:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e766:	6593      	str	r3, [r2, #88]	; 0x58
 800e768:	4b09      	ldr	r3, [pc, #36]	; (800e790 <HAL_PCD_MspInit+0x74>)
 800e76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e76c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e770:	60bb      	str	r3, [r7, #8]
 800e772:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e774:	2200      	movs	r2, #0
 800e776:	2100      	movs	r1, #0
 800e778:	2014      	movs	r0, #20
 800e77a:	f7f5 fad2 	bl	8003d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e77e:	2014      	movs	r0, #20
 800e780:	f7f5 fae9 	bl	8003d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e784:	bf00      	nop
 800e786:	3760      	adds	r7, #96	; 0x60
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	40005c00 	.word	0x40005c00
 800e790:	40021000 	.word	0x40021000

0800e794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	4610      	mov	r0, r2
 800e7ac:	f7fe fd2d 	bl	800d20a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e7b0:	bf00      	nop
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800e7ca:	78fa      	ldrb	r2, [r7, #3]
 800e7cc:	6879      	ldr	r1, [r7, #4]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	4413      	add	r3, r2
 800e7d4:	00db      	lsls	r3, r3, #3
 800e7d6:	440b      	add	r3, r1
 800e7d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	78fb      	ldrb	r3, [r7, #3]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	f7fe fd67 	bl	800d2b4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e7e6:	bf00      	nop
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800e800:	78fa      	ldrb	r2, [r7, #3]
 800e802:	6879      	ldr	r1, [r7, #4]
 800e804:	4613      	mov	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	00db      	lsls	r3, r3, #3
 800e80c:	440b      	add	r3, r1
 800e80e:	333c      	adds	r3, #60	; 0x3c
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	78fb      	ldrb	r3, [r7, #3]
 800e814:	4619      	mov	r1, r3
 800e816:	f7fe fdb0 	bl	800d37a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e830:	4618      	mov	r0, r3
 800e832:	f7fe fec4 	bl	800d5be <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e836:	bf00      	nop
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e846:	2301      	movs	r3, #1
 800e848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	2b02      	cmp	r3, #2
 800e850:	d001      	beq.n	800e856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e852:	f7f3 f87d 	bl	8001950 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e85c:	7bfa      	ldrb	r2, [r7, #15]
 800e85e:	4611      	mov	r1, r2
 800e860:	4618      	mov	r0, r3
 800e862:	f7fe fe6e 	bl	800d542 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fe fe1a 	bl	800d4a6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e872:	bf00      	nop
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
	...

0800e87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fe fe69 	bl	800d562 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d005      	beq.n	800e8a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e898:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <HAL_PCD_SuspendCallback+0x30>)
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	4a03      	ldr	r2, [pc, #12]	; (800e8ac <HAL_PCD_SuspendCallback+0x30>)
 800e89e:	f043 0306 	orr.w	r3, r3, #6
 800e8a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	e000ed00 	.word	0xe000ed00

0800e8b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	699b      	ldr	r3, [r3, #24]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d007      	beq.n	800e8d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8c0:	4b08      	ldr	r3, [pc, #32]	; (800e8e4 <HAL_PCD_ResumeCallback+0x34>)
 800e8c2:	691b      	ldr	r3, [r3, #16]
 800e8c4:	4a07      	ldr	r2, [pc, #28]	; (800e8e4 <HAL_PCD_ResumeCallback+0x34>)
 800e8c6:	f023 0306 	bic.w	r3, r3, #6
 800e8ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e8cc:	f000 f9fa 	bl	800ecc4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe fe59 	bl	800d58e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	e000ed00 	.word	0xe000ed00

0800e8e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e8f0:	4a2b      	ldr	r2, [pc, #172]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a29      	ldr	r2, [pc, #164]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e8fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e900:	4b27      	ldr	r3, [pc, #156]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e902:	4a28      	ldr	r2, [pc, #160]	; (800e9a4 <USBD_LL_Init+0xbc>)
 800e904:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e906:	4b26      	ldr	r3, [pc, #152]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e908:	2208      	movs	r2, #8
 800e90a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e90c:	4b24      	ldr	r3, [pc, #144]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e90e:	2202      	movs	r2, #2
 800e910:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e912:	4b23      	ldr	r3, [pc, #140]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e914:	2202      	movs	r2, #2
 800e916:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e918:	4b21      	ldr	r3, [pc, #132]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e91e:	4b20      	ldr	r3, [pc, #128]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e920:	2200      	movs	r2, #0
 800e922:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e924:	4b1e      	ldr	r3, [pc, #120]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e926:	2200      	movs	r2, #0
 800e928:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e92a:	4b1d      	ldr	r3, [pc, #116]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e930:	481b      	ldr	r0, [pc, #108]	; (800e9a0 <USBD_LL_Init+0xb8>)
 800e932:	f7f6 ff4c 	bl	80057ce <HAL_PCD_Init>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e93c:	f7f3 f808 	bl	8001950 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e946:	2318      	movs	r3, #24
 800e948:	2200      	movs	r2, #0
 800e94a:	2100      	movs	r1, #0
 800e94c:	f7f8 fc05 	bl	800715a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e956:	2358      	movs	r3, #88	; 0x58
 800e958:	2200      	movs	r2, #0
 800e95a:	2180      	movs	r1, #128	; 0x80
 800e95c:	f7f8 fbfd 	bl	800715a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e966:	23c0      	movs	r3, #192	; 0xc0
 800e968:	2200      	movs	r2, #0
 800e96a:	2181      	movs	r1, #129	; 0x81
 800e96c:	f7f8 fbf5 	bl	800715a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e976:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e97a:	2200      	movs	r2, #0
 800e97c:	2101      	movs	r1, #1
 800e97e:	f7f8 fbec 	bl	800715a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e98c:	2200      	movs	r2, #0
 800e98e:	2182      	movs	r1, #130	; 0x82
 800e990:	f7f8 fbe3 	bl	800715a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20004234 	.word	0x20004234
 800e9a4:	40005c00 	.word	0x40005c00

0800e9a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7f6 ffea 	bl	8005998 <HAL_PCD_Start>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f000 f980 	bl	800ecd0 <USBD_Get_USB_Status>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b084      	sub	sp, #16
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	4608      	mov	r0, r1
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	70fb      	strb	r3, [r7, #3]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70bb      	strb	r3, [r7, #2]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ea06:	78bb      	ldrb	r3, [r7, #2]
 800ea08:	883a      	ldrh	r2, [r7, #0]
 800ea0a:	78f9      	ldrb	r1, [r7, #3]
 800ea0c:	f7f7 f932 	bl	8005c74 <HAL_PCD_EP_Open>
 800ea10:	4603      	mov	r3, r0
 800ea12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea14:	7bfb      	ldrb	r3, [r7, #15]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 f95a 	bl	800ecd0 <USBD_Get_USB_Status>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b084      	sub	sp, #16
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	460b      	mov	r3, r1
 800ea34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea36:	2300      	movs	r3, #0
 800ea38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea44:	78fa      	ldrb	r2, [r7, #3]
 800ea46:	4611      	mov	r1, r2
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f7 f979 	bl	8005d40 <HAL_PCD_EP_Close>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 f93b 	bl	800ecd0 <USBD_Get_USB_Status>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	460b      	mov	r3, r1
 800ea72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea74:	2300      	movs	r3, #0
 800ea76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea82:	78fa      	ldrb	r2, [r7, #3]
 800ea84:	4611      	mov	r1, r2
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7f7 fa3a 	bl	8005f00 <HAL_PCD_EP_SetStall>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea90:	7bfb      	ldrb	r3, [r7, #15]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f000 f91c 	bl	800ecd0 <USBD_Get_USB_Status>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	460b      	mov	r3, r1
 800eab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eab6:	2300      	movs	r3, #0
 800eab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eac0:	78fa      	ldrb	r2, [r7, #3]
 800eac2:	4611      	mov	r1, r2
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7f7 fa6d 	bl	8005fa4 <HAL_PCD_EP_ClrStall>
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eace:	7bfb      	ldrb	r3, [r7, #15]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 f8fd 	bl	800ecd0 <USBD_Get_USB_Status>
 800ead6:	4603      	mov	r3, r0
 800ead8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eada:	7bbb      	ldrb	r3, [r7, #14]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eaf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eaf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	da0c      	bge.n	800eb1a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb00:	78fb      	ldrb	r3, [r7, #3]
 800eb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb06:	68f9      	ldr	r1, [r7, #12]
 800eb08:	1c5a      	adds	r2, r3, #1
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	440b      	add	r3, r1
 800eb14:	3302      	adds	r3, #2
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	e00b      	b.n	800eb32 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb1a:	78fb      	ldrb	r3, [r7, #3]
 800eb1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb20:	68f9      	ldr	r1, [r7, #12]
 800eb22:	4613      	mov	r3, r2
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	4413      	add	r3, r2
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	440b      	add	r3, r1
 800eb2c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800eb30:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b084      	sub	sp, #16
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	460b      	mov	r3, r1
 800eb48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb58:	78fa      	ldrb	r2, [r7, #3]
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7f7 f864 	bl	8005c2a <HAL_PCD_SetAddress>
 800eb62:	4603      	mov	r3, r0
 800eb64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f000 f8b1 	bl	800ecd0 <USBD_Get_USB_Status>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	607a      	str	r2, [r7, #4]
 800eb86:	603b      	str	r3, [r7, #0]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eb9a:	7af9      	ldrb	r1, [r7, #11]
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	f7f7 f96b 	bl	8005e7a <HAL_PCD_EP_Transmit>
 800eba4:	4603      	mov	r3, r0
 800eba6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eba8:	7dfb      	ldrb	r3, [r7, #23]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f000 f890 	bl	800ecd0 <USBD_Get_USB_Status>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b086      	sub	sp, #24
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	60f8      	str	r0, [r7, #12]
 800ebc6:	607a      	str	r2, [r7, #4]
 800ebc8:	603b      	str	r3, [r7, #0]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ebdc:	7af9      	ldrb	r1, [r7, #11]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	f7f7 f8f5 	bl	8005dd0 <HAL_PCD_EP_Receive>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebea:	7dfb      	ldrb	r3, [r7, #23]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f000 f86f 	bl	800ecd0 <USBD_Get_USB_Status>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebf6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ec12:	78fa      	ldrb	r2, [r7, #3]
 800ec14:	4611      	mov	r1, r2
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7f7 f917 	bl	8005e4a <HAL_PCD_EP_GetRxCount>
 800ec1c:	4603      	mov	r3, r0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3708      	adds	r7, #8
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
	...

0800ec28 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <HAL_PCDEx_LPM_Callback+0x18>
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d013      	beq.n	800ec66 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ec3e:	e023      	b.n	800ec88 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d007      	beq.n	800ec58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ec48:	f000 f83c 	bl	800ecc4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec4c:	4b10      	ldr	r3, [pc, #64]	; (800ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	4a0f      	ldr	r2, [pc, #60]	; (800ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ec52:	f023 0306 	bic.w	r3, r3, #6
 800ec56:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fc95 	bl	800d58e <USBD_LL_Resume>
    break;
 800ec64:	e010      	b.n	800ec88 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fe fc78 	bl	800d562 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d005      	beq.n	800ec86 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec7a:	4b05      	ldr	r3, [pc, #20]	; (800ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	4a04      	ldr	r2, [pc, #16]	; (800ec90 <HAL_PCDEx_LPM_Callback+0x68>)
 800ec80:	f043 0306 	orr.w	r3, r3, #6
 800ec84:	6113      	str	r3, [r2, #16]
    break;
 800ec86:	bf00      	nop
}
 800ec88:	bf00      	nop
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	e000ed00 	.word	0xe000ed00

0800ec94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ec9c:	4b03      	ldr	r3, [pc, #12]	; (800ecac <USBD_static_malloc+0x18>)
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	370c      	adds	r7, #12
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	20004528 	.word	0x20004528

0800ecb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]

}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ecc8:	f7f2 f894 	bl	8000df4 <SystemClock_Config>
}
 800eccc:	bf00      	nop
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ecde:	79fb      	ldrb	r3, [r7, #7]
 800ece0:	2b03      	cmp	r3, #3
 800ece2:	d817      	bhi.n	800ed14 <USBD_Get_USB_Status+0x44>
 800ece4:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <USBD_Get_USB_Status+0x1c>)
 800ece6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecea:	bf00      	nop
 800ecec:	0800ecfd 	.word	0x0800ecfd
 800ecf0:	0800ed03 	.word	0x0800ed03
 800ecf4:	0800ed09 	.word	0x0800ed09
 800ecf8:	0800ed0f 	.word	0x0800ed0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ed00:	e00b      	b.n	800ed1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed02:	2303      	movs	r3, #3
 800ed04:	73fb      	strb	r3, [r7, #15]
    break;
 800ed06:	e008      	b.n	800ed1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed0c:	e005      	b.n	800ed1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	73fb      	strb	r3, [r7, #15]
    break;
 800ed12:	e002      	b.n	800ed1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed14:	2303      	movs	r3, #3
 800ed16:	73fb      	strb	r3, [r7, #15]
    break;
 800ed18:	bf00      	nop
  }
  return usb_status;
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3714      	adds	r7, #20
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <__errno>:
 800ed28:	4b01      	ldr	r3, [pc, #4]	; (800ed30 <__errno+0x8>)
 800ed2a:	6818      	ldr	r0, [r3, #0]
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop
 800ed30:	2000285c 	.word	0x2000285c

0800ed34 <__libc_init_array>:
 800ed34:	b570      	push	{r4, r5, r6, lr}
 800ed36:	4d0d      	ldr	r5, [pc, #52]	; (800ed6c <__libc_init_array+0x38>)
 800ed38:	4c0d      	ldr	r4, [pc, #52]	; (800ed70 <__libc_init_array+0x3c>)
 800ed3a:	1b64      	subs	r4, r4, r5
 800ed3c:	10a4      	asrs	r4, r4, #2
 800ed3e:	2600      	movs	r6, #0
 800ed40:	42a6      	cmp	r6, r4
 800ed42:	d109      	bne.n	800ed58 <__libc_init_array+0x24>
 800ed44:	4d0b      	ldr	r5, [pc, #44]	; (800ed74 <__libc_init_array+0x40>)
 800ed46:	4c0c      	ldr	r4, [pc, #48]	; (800ed78 <__libc_init_array+0x44>)
 800ed48:	f002 fdae 	bl	80118a8 <_init>
 800ed4c:	1b64      	subs	r4, r4, r5
 800ed4e:	10a4      	asrs	r4, r4, #2
 800ed50:	2600      	movs	r6, #0
 800ed52:	42a6      	cmp	r6, r4
 800ed54:	d105      	bne.n	800ed62 <__libc_init_array+0x2e>
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
 800ed58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed5c:	4798      	blx	r3
 800ed5e:	3601      	adds	r6, #1
 800ed60:	e7ee      	b.n	800ed40 <__libc_init_array+0xc>
 800ed62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed66:	4798      	blx	r3
 800ed68:	3601      	adds	r6, #1
 800ed6a:	e7f2      	b.n	800ed52 <__libc_init_array+0x1e>
 800ed6c:	08011d3c 	.word	0x08011d3c
 800ed70:	08011d3c 	.word	0x08011d3c
 800ed74:	08011d3c 	.word	0x08011d3c
 800ed78:	08011d40 	.word	0x08011d40

0800ed7c <memset>:
 800ed7c:	4402      	add	r2, r0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d100      	bne.n	800ed86 <memset+0xa>
 800ed84:	4770      	bx	lr
 800ed86:	f803 1b01 	strb.w	r1, [r3], #1
 800ed8a:	e7f9      	b.n	800ed80 <memset+0x4>

0800ed8c <__cvt>:
 800ed8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed90:	ec55 4b10 	vmov	r4, r5, d0
 800ed94:	2d00      	cmp	r5, #0
 800ed96:	460e      	mov	r6, r1
 800ed98:	4619      	mov	r1, r3
 800ed9a:	462b      	mov	r3, r5
 800ed9c:	bfbb      	ittet	lt
 800ed9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800eda2:	461d      	movlt	r5, r3
 800eda4:	2300      	movge	r3, #0
 800eda6:	232d      	movlt	r3, #45	; 0x2d
 800eda8:	700b      	strb	r3, [r1, #0]
 800edaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edb0:	4691      	mov	r9, r2
 800edb2:	f023 0820 	bic.w	r8, r3, #32
 800edb6:	bfbc      	itt	lt
 800edb8:	4622      	movlt	r2, r4
 800edba:	4614      	movlt	r4, r2
 800edbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edc0:	d005      	beq.n	800edce <__cvt+0x42>
 800edc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edc6:	d100      	bne.n	800edca <__cvt+0x3e>
 800edc8:	3601      	adds	r6, #1
 800edca:	2102      	movs	r1, #2
 800edcc:	e000      	b.n	800edd0 <__cvt+0x44>
 800edce:	2103      	movs	r1, #3
 800edd0:	ab03      	add	r3, sp, #12
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	ab02      	add	r3, sp, #8
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	ec45 4b10 	vmov	d0, r4, r5
 800eddc:	4653      	mov	r3, sl
 800edde:	4632      	mov	r2, r6
 800ede0:	f000 fcfa 	bl	800f7d8 <_dtoa_r>
 800ede4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ede8:	4607      	mov	r7, r0
 800edea:	d102      	bne.n	800edf2 <__cvt+0x66>
 800edec:	f019 0f01 	tst.w	r9, #1
 800edf0:	d022      	beq.n	800ee38 <__cvt+0xac>
 800edf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edf6:	eb07 0906 	add.w	r9, r7, r6
 800edfa:	d110      	bne.n	800ee1e <__cvt+0x92>
 800edfc:	783b      	ldrb	r3, [r7, #0]
 800edfe:	2b30      	cmp	r3, #48	; 0x30
 800ee00:	d10a      	bne.n	800ee18 <__cvt+0x8c>
 800ee02:	2200      	movs	r2, #0
 800ee04:	2300      	movs	r3, #0
 800ee06:	4620      	mov	r0, r4
 800ee08:	4629      	mov	r1, r5
 800ee0a:	f7f1 fe85 	bl	8000b18 <__aeabi_dcmpeq>
 800ee0e:	b918      	cbnz	r0, 800ee18 <__cvt+0x8c>
 800ee10:	f1c6 0601 	rsb	r6, r6, #1
 800ee14:	f8ca 6000 	str.w	r6, [sl]
 800ee18:	f8da 3000 	ldr.w	r3, [sl]
 800ee1c:	4499      	add	r9, r3
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2300      	movs	r3, #0
 800ee22:	4620      	mov	r0, r4
 800ee24:	4629      	mov	r1, r5
 800ee26:	f7f1 fe77 	bl	8000b18 <__aeabi_dcmpeq>
 800ee2a:	b108      	cbz	r0, 800ee30 <__cvt+0xa4>
 800ee2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee30:	2230      	movs	r2, #48	; 0x30
 800ee32:	9b03      	ldr	r3, [sp, #12]
 800ee34:	454b      	cmp	r3, r9
 800ee36:	d307      	bcc.n	800ee48 <__cvt+0xbc>
 800ee38:	9b03      	ldr	r3, [sp, #12]
 800ee3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee3c:	1bdb      	subs	r3, r3, r7
 800ee3e:	4638      	mov	r0, r7
 800ee40:	6013      	str	r3, [r2, #0]
 800ee42:	b004      	add	sp, #16
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	1c59      	adds	r1, r3, #1
 800ee4a:	9103      	str	r1, [sp, #12]
 800ee4c:	701a      	strb	r2, [r3, #0]
 800ee4e:	e7f0      	b.n	800ee32 <__cvt+0xa6>

0800ee50 <__exponent>:
 800ee50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee52:	4603      	mov	r3, r0
 800ee54:	2900      	cmp	r1, #0
 800ee56:	bfb8      	it	lt
 800ee58:	4249      	neglt	r1, r1
 800ee5a:	f803 2b02 	strb.w	r2, [r3], #2
 800ee5e:	bfb4      	ite	lt
 800ee60:	222d      	movlt	r2, #45	; 0x2d
 800ee62:	222b      	movge	r2, #43	; 0x2b
 800ee64:	2909      	cmp	r1, #9
 800ee66:	7042      	strb	r2, [r0, #1]
 800ee68:	dd2a      	ble.n	800eec0 <__exponent+0x70>
 800ee6a:	f10d 0407 	add.w	r4, sp, #7
 800ee6e:	46a4      	mov	ip, r4
 800ee70:	270a      	movs	r7, #10
 800ee72:	46a6      	mov	lr, r4
 800ee74:	460a      	mov	r2, r1
 800ee76:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee7a:	fb07 1516 	mls	r5, r7, r6, r1
 800ee7e:	3530      	adds	r5, #48	; 0x30
 800ee80:	2a63      	cmp	r2, #99	; 0x63
 800ee82:	f104 34ff 	add.w	r4, r4, #4294967295
 800ee86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	dcf1      	bgt.n	800ee72 <__exponent+0x22>
 800ee8e:	3130      	adds	r1, #48	; 0x30
 800ee90:	f1ae 0502 	sub.w	r5, lr, #2
 800ee94:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee98:	1c44      	adds	r4, r0, #1
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	4561      	cmp	r1, ip
 800ee9e:	d30a      	bcc.n	800eeb6 <__exponent+0x66>
 800eea0:	f10d 0209 	add.w	r2, sp, #9
 800eea4:	eba2 020e 	sub.w	r2, r2, lr
 800eea8:	4565      	cmp	r5, ip
 800eeaa:	bf88      	it	hi
 800eeac:	2200      	movhi	r2, #0
 800eeae:	4413      	add	r3, r2
 800eeb0:	1a18      	subs	r0, r3, r0
 800eeb2:	b003      	add	sp, #12
 800eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eeba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eebe:	e7ed      	b.n	800ee9c <__exponent+0x4c>
 800eec0:	2330      	movs	r3, #48	; 0x30
 800eec2:	3130      	adds	r1, #48	; 0x30
 800eec4:	7083      	strb	r3, [r0, #2]
 800eec6:	70c1      	strb	r1, [r0, #3]
 800eec8:	1d03      	adds	r3, r0, #4
 800eeca:	e7f1      	b.n	800eeb0 <__exponent+0x60>

0800eecc <_printf_float>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	ed2d 8b02 	vpush	{d8}
 800eed4:	b08d      	sub	sp, #52	; 0x34
 800eed6:	460c      	mov	r4, r1
 800eed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eedc:	4616      	mov	r6, r2
 800eede:	461f      	mov	r7, r3
 800eee0:	4605      	mov	r5, r0
 800eee2:	f001 fb5d 	bl	80105a0 <_localeconv_r>
 800eee6:	f8d0 a000 	ldr.w	sl, [r0]
 800eeea:	4650      	mov	r0, sl
 800eeec:	f7f1 f998 	bl	8000220 <strlen>
 800eef0:	2300      	movs	r3, #0
 800eef2:	930a      	str	r3, [sp, #40]	; 0x28
 800eef4:	6823      	ldr	r3, [r4, #0]
 800eef6:	9305      	str	r3, [sp, #20]
 800eef8:	f8d8 3000 	ldr.w	r3, [r8]
 800eefc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef00:	3307      	adds	r3, #7
 800ef02:	f023 0307 	bic.w	r3, r3, #7
 800ef06:	f103 0208 	add.w	r2, r3, #8
 800ef0a:	f8c8 2000 	str.w	r2, [r8]
 800ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef1e:	9307      	str	r3, [sp, #28]
 800ef20:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef24:	ee08 0a10 	vmov	s16, r0
 800ef28:	4b9f      	ldr	r3, [pc, #636]	; (800f1a8 <_printf_float+0x2dc>)
 800ef2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef32:	f7f1 fe23 	bl	8000b7c <__aeabi_dcmpun>
 800ef36:	bb88      	cbnz	r0, 800ef9c <_printf_float+0xd0>
 800ef38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3c:	4b9a      	ldr	r3, [pc, #616]	; (800f1a8 <_printf_float+0x2dc>)
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef42:	f7f1 fdfd 	bl	8000b40 <__aeabi_dcmple>
 800ef46:	bb48      	cbnz	r0, 800ef9c <_printf_float+0xd0>
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	4640      	mov	r0, r8
 800ef4e:	4649      	mov	r1, r9
 800ef50:	f7f1 fdec 	bl	8000b2c <__aeabi_dcmplt>
 800ef54:	b110      	cbz	r0, 800ef5c <_printf_float+0x90>
 800ef56:	232d      	movs	r3, #45	; 0x2d
 800ef58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef5c:	4b93      	ldr	r3, [pc, #588]	; (800f1ac <_printf_float+0x2e0>)
 800ef5e:	4894      	ldr	r0, [pc, #592]	; (800f1b0 <_printf_float+0x2e4>)
 800ef60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef64:	bf94      	ite	ls
 800ef66:	4698      	movls	r8, r3
 800ef68:	4680      	movhi	r8, r0
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	6123      	str	r3, [r4, #16]
 800ef6e:	9b05      	ldr	r3, [sp, #20]
 800ef70:	f023 0204 	bic.w	r2, r3, #4
 800ef74:	6022      	str	r2, [r4, #0]
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	9700      	str	r7, [sp, #0]
 800ef7c:	4633      	mov	r3, r6
 800ef7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef80:	4621      	mov	r1, r4
 800ef82:	4628      	mov	r0, r5
 800ef84:	f000 f9d8 	bl	800f338 <_printf_common>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	f040 8090 	bne.w	800f0ae <_printf_float+0x1e2>
 800ef8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef92:	b00d      	add	sp, #52	; 0x34
 800ef94:	ecbd 8b02 	vpop	{d8}
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	4642      	mov	r2, r8
 800ef9e:	464b      	mov	r3, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 fdea 	bl	8000b7c <__aeabi_dcmpun>
 800efa8:	b140      	cbz	r0, 800efbc <_printf_float+0xf0>
 800efaa:	464b      	mov	r3, r9
 800efac:	2b00      	cmp	r3, #0
 800efae:	bfbc      	itt	lt
 800efb0:	232d      	movlt	r3, #45	; 0x2d
 800efb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efb6:	487f      	ldr	r0, [pc, #508]	; (800f1b4 <_printf_float+0x2e8>)
 800efb8:	4b7f      	ldr	r3, [pc, #508]	; (800f1b8 <_printf_float+0x2ec>)
 800efba:	e7d1      	b.n	800ef60 <_printf_float+0x94>
 800efbc:	6863      	ldr	r3, [r4, #4]
 800efbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efc2:	9206      	str	r2, [sp, #24]
 800efc4:	1c5a      	adds	r2, r3, #1
 800efc6:	d13f      	bne.n	800f048 <_printf_float+0x17c>
 800efc8:	2306      	movs	r3, #6
 800efca:	6063      	str	r3, [r4, #4]
 800efcc:	9b05      	ldr	r3, [sp, #20]
 800efce:	6861      	ldr	r1, [r4, #4]
 800efd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efd4:	2300      	movs	r3, #0
 800efd6:	9303      	str	r3, [sp, #12]
 800efd8:	ab0a      	add	r3, sp, #40	; 0x28
 800efda:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efde:	ab09      	add	r3, sp, #36	; 0x24
 800efe0:	ec49 8b10 	vmov	d0, r8, r9
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efec:	4628      	mov	r0, r5
 800efee:	f7ff fecd 	bl	800ed8c <__cvt>
 800eff2:	9b06      	ldr	r3, [sp, #24]
 800eff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eff6:	2b47      	cmp	r3, #71	; 0x47
 800eff8:	4680      	mov	r8, r0
 800effa:	d108      	bne.n	800f00e <_printf_float+0x142>
 800effc:	1cc8      	adds	r0, r1, #3
 800effe:	db02      	blt.n	800f006 <_printf_float+0x13a>
 800f000:	6863      	ldr	r3, [r4, #4]
 800f002:	4299      	cmp	r1, r3
 800f004:	dd41      	ble.n	800f08a <_printf_float+0x1be>
 800f006:	f1ab 0b02 	sub.w	fp, fp, #2
 800f00a:	fa5f fb8b 	uxtb.w	fp, fp
 800f00e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f012:	d820      	bhi.n	800f056 <_printf_float+0x18a>
 800f014:	3901      	subs	r1, #1
 800f016:	465a      	mov	r2, fp
 800f018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f01c:	9109      	str	r1, [sp, #36]	; 0x24
 800f01e:	f7ff ff17 	bl	800ee50 <__exponent>
 800f022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f024:	1813      	adds	r3, r2, r0
 800f026:	2a01      	cmp	r2, #1
 800f028:	4681      	mov	r9, r0
 800f02a:	6123      	str	r3, [r4, #16]
 800f02c:	dc02      	bgt.n	800f034 <_printf_float+0x168>
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	07d2      	lsls	r2, r2, #31
 800f032:	d501      	bpl.n	800f038 <_printf_float+0x16c>
 800f034:	3301      	adds	r3, #1
 800f036:	6123      	str	r3, [r4, #16]
 800f038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d09c      	beq.n	800ef7a <_printf_float+0xae>
 800f040:	232d      	movs	r3, #45	; 0x2d
 800f042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f046:	e798      	b.n	800ef7a <_printf_float+0xae>
 800f048:	9a06      	ldr	r2, [sp, #24]
 800f04a:	2a47      	cmp	r2, #71	; 0x47
 800f04c:	d1be      	bne.n	800efcc <_printf_float+0x100>
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1bc      	bne.n	800efcc <_printf_float+0x100>
 800f052:	2301      	movs	r3, #1
 800f054:	e7b9      	b.n	800efca <_printf_float+0xfe>
 800f056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f05a:	d118      	bne.n	800f08e <_printf_float+0x1c2>
 800f05c:	2900      	cmp	r1, #0
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	dd0b      	ble.n	800f07a <_printf_float+0x1ae>
 800f062:	6121      	str	r1, [r4, #16]
 800f064:	b913      	cbnz	r3, 800f06c <_printf_float+0x1a0>
 800f066:	6822      	ldr	r2, [r4, #0]
 800f068:	07d0      	lsls	r0, r2, #31
 800f06a:	d502      	bpl.n	800f072 <_printf_float+0x1a6>
 800f06c:	3301      	adds	r3, #1
 800f06e:	440b      	add	r3, r1
 800f070:	6123      	str	r3, [r4, #16]
 800f072:	65a1      	str	r1, [r4, #88]	; 0x58
 800f074:	f04f 0900 	mov.w	r9, #0
 800f078:	e7de      	b.n	800f038 <_printf_float+0x16c>
 800f07a:	b913      	cbnz	r3, 800f082 <_printf_float+0x1b6>
 800f07c:	6822      	ldr	r2, [r4, #0]
 800f07e:	07d2      	lsls	r2, r2, #31
 800f080:	d501      	bpl.n	800f086 <_printf_float+0x1ba>
 800f082:	3302      	adds	r3, #2
 800f084:	e7f4      	b.n	800f070 <_printf_float+0x1a4>
 800f086:	2301      	movs	r3, #1
 800f088:	e7f2      	b.n	800f070 <_printf_float+0x1a4>
 800f08a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f090:	4299      	cmp	r1, r3
 800f092:	db05      	blt.n	800f0a0 <_printf_float+0x1d4>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	6121      	str	r1, [r4, #16]
 800f098:	07d8      	lsls	r0, r3, #31
 800f09a:	d5ea      	bpl.n	800f072 <_printf_float+0x1a6>
 800f09c:	1c4b      	adds	r3, r1, #1
 800f09e:	e7e7      	b.n	800f070 <_printf_float+0x1a4>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	bfd4      	ite	le
 800f0a4:	f1c1 0202 	rsble	r2, r1, #2
 800f0a8:	2201      	movgt	r2, #1
 800f0aa:	4413      	add	r3, r2
 800f0ac:	e7e0      	b.n	800f070 <_printf_float+0x1a4>
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	055a      	lsls	r2, r3, #21
 800f0b2:	d407      	bmi.n	800f0c4 <_printf_float+0x1f8>
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	4642      	mov	r2, r8
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	47b8      	blx	r7
 800f0be:	3001      	adds	r0, #1
 800f0c0:	d12c      	bne.n	800f11c <_printf_float+0x250>
 800f0c2:	e764      	b.n	800ef8e <_printf_float+0xc2>
 800f0c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0c8:	f240 80e0 	bls.w	800f28c <_printf_float+0x3c0>
 800f0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f7f1 fd20 	bl	8000b18 <__aeabi_dcmpeq>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d034      	beq.n	800f146 <_printf_float+0x27a>
 800f0dc:	4a37      	ldr	r2, [pc, #220]	; (800f1bc <_printf_float+0x2f0>)
 800f0de:	2301      	movs	r3, #1
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	47b8      	blx	r7
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	f43f af51 	beq.w	800ef8e <_printf_float+0xc2>
 800f0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	db02      	blt.n	800f0fa <_printf_float+0x22e>
 800f0f4:	6823      	ldr	r3, [r4, #0]
 800f0f6:	07d8      	lsls	r0, r3, #31
 800f0f8:	d510      	bpl.n	800f11c <_printf_float+0x250>
 800f0fa:	ee18 3a10 	vmov	r3, s16
 800f0fe:	4652      	mov	r2, sl
 800f100:	4631      	mov	r1, r6
 800f102:	4628      	mov	r0, r5
 800f104:	47b8      	blx	r7
 800f106:	3001      	adds	r0, #1
 800f108:	f43f af41 	beq.w	800ef8e <_printf_float+0xc2>
 800f10c:	f04f 0800 	mov.w	r8, #0
 800f110:	f104 091a 	add.w	r9, r4, #26
 800f114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f116:	3b01      	subs	r3, #1
 800f118:	4543      	cmp	r3, r8
 800f11a:	dc09      	bgt.n	800f130 <_printf_float+0x264>
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	079b      	lsls	r3, r3, #30
 800f120:	f100 8105 	bmi.w	800f32e <_printf_float+0x462>
 800f124:	68e0      	ldr	r0, [r4, #12]
 800f126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f128:	4298      	cmp	r0, r3
 800f12a:	bfb8      	it	lt
 800f12c:	4618      	movlt	r0, r3
 800f12e:	e730      	b.n	800ef92 <_printf_float+0xc6>
 800f130:	2301      	movs	r3, #1
 800f132:	464a      	mov	r2, r9
 800f134:	4631      	mov	r1, r6
 800f136:	4628      	mov	r0, r5
 800f138:	47b8      	blx	r7
 800f13a:	3001      	adds	r0, #1
 800f13c:	f43f af27 	beq.w	800ef8e <_printf_float+0xc2>
 800f140:	f108 0801 	add.w	r8, r8, #1
 800f144:	e7e6      	b.n	800f114 <_printf_float+0x248>
 800f146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	dc39      	bgt.n	800f1c0 <_printf_float+0x2f4>
 800f14c:	4a1b      	ldr	r2, [pc, #108]	; (800f1bc <_printf_float+0x2f0>)
 800f14e:	2301      	movs	r3, #1
 800f150:	4631      	mov	r1, r6
 800f152:	4628      	mov	r0, r5
 800f154:	47b8      	blx	r7
 800f156:	3001      	adds	r0, #1
 800f158:	f43f af19 	beq.w	800ef8e <_printf_float+0xc2>
 800f15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f160:	4313      	orrs	r3, r2
 800f162:	d102      	bne.n	800f16a <_printf_float+0x29e>
 800f164:	6823      	ldr	r3, [r4, #0]
 800f166:	07d9      	lsls	r1, r3, #31
 800f168:	d5d8      	bpl.n	800f11c <_printf_float+0x250>
 800f16a:	ee18 3a10 	vmov	r3, s16
 800f16e:	4652      	mov	r2, sl
 800f170:	4631      	mov	r1, r6
 800f172:	4628      	mov	r0, r5
 800f174:	47b8      	blx	r7
 800f176:	3001      	adds	r0, #1
 800f178:	f43f af09 	beq.w	800ef8e <_printf_float+0xc2>
 800f17c:	f04f 0900 	mov.w	r9, #0
 800f180:	f104 0a1a 	add.w	sl, r4, #26
 800f184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f186:	425b      	negs	r3, r3
 800f188:	454b      	cmp	r3, r9
 800f18a:	dc01      	bgt.n	800f190 <_printf_float+0x2c4>
 800f18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f18e:	e792      	b.n	800f0b6 <_printf_float+0x1ea>
 800f190:	2301      	movs	r3, #1
 800f192:	4652      	mov	r2, sl
 800f194:	4631      	mov	r1, r6
 800f196:	4628      	mov	r0, r5
 800f198:	47b8      	blx	r7
 800f19a:	3001      	adds	r0, #1
 800f19c:	f43f aef7 	beq.w	800ef8e <_printf_float+0xc2>
 800f1a0:	f109 0901 	add.w	r9, r9, #1
 800f1a4:	e7ee      	b.n	800f184 <_printf_float+0x2b8>
 800f1a6:	bf00      	nop
 800f1a8:	7fefffff 	.word	0x7fefffff
 800f1ac:	08011964 	.word	0x08011964
 800f1b0:	08011968 	.word	0x08011968
 800f1b4:	08011970 	.word	0x08011970
 800f1b8:	0801196c 	.word	0x0801196c
 800f1bc:	08011974 	.word	0x08011974
 800f1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	bfa8      	it	ge
 800f1c8:	461a      	movge	r2, r3
 800f1ca:	2a00      	cmp	r2, #0
 800f1cc:	4691      	mov	r9, r2
 800f1ce:	dc37      	bgt.n	800f240 <_printf_float+0x374>
 800f1d0:	f04f 0b00 	mov.w	fp, #0
 800f1d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1d8:	f104 021a 	add.w	r2, r4, #26
 800f1dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1de:	9305      	str	r3, [sp, #20]
 800f1e0:	eba3 0309 	sub.w	r3, r3, r9
 800f1e4:	455b      	cmp	r3, fp
 800f1e6:	dc33      	bgt.n	800f250 <_printf_float+0x384>
 800f1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	db3b      	blt.n	800f268 <_printf_float+0x39c>
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	07da      	lsls	r2, r3, #31
 800f1f4:	d438      	bmi.n	800f268 <_printf_float+0x39c>
 800f1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f8:	9a05      	ldr	r2, [sp, #20]
 800f1fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1fc:	1a9a      	subs	r2, r3, r2
 800f1fe:	eba3 0901 	sub.w	r9, r3, r1
 800f202:	4591      	cmp	r9, r2
 800f204:	bfa8      	it	ge
 800f206:	4691      	movge	r9, r2
 800f208:	f1b9 0f00 	cmp.w	r9, #0
 800f20c:	dc35      	bgt.n	800f27a <_printf_float+0x3ae>
 800f20e:	f04f 0800 	mov.w	r8, #0
 800f212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f216:	f104 0a1a 	add.w	sl, r4, #26
 800f21a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f21e:	1a9b      	subs	r3, r3, r2
 800f220:	eba3 0309 	sub.w	r3, r3, r9
 800f224:	4543      	cmp	r3, r8
 800f226:	f77f af79 	ble.w	800f11c <_printf_float+0x250>
 800f22a:	2301      	movs	r3, #1
 800f22c:	4652      	mov	r2, sl
 800f22e:	4631      	mov	r1, r6
 800f230:	4628      	mov	r0, r5
 800f232:	47b8      	blx	r7
 800f234:	3001      	adds	r0, #1
 800f236:	f43f aeaa 	beq.w	800ef8e <_printf_float+0xc2>
 800f23a:	f108 0801 	add.w	r8, r8, #1
 800f23e:	e7ec      	b.n	800f21a <_printf_float+0x34e>
 800f240:	4613      	mov	r3, r2
 800f242:	4631      	mov	r1, r6
 800f244:	4642      	mov	r2, r8
 800f246:	4628      	mov	r0, r5
 800f248:	47b8      	blx	r7
 800f24a:	3001      	adds	r0, #1
 800f24c:	d1c0      	bne.n	800f1d0 <_printf_float+0x304>
 800f24e:	e69e      	b.n	800ef8e <_printf_float+0xc2>
 800f250:	2301      	movs	r3, #1
 800f252:	4631      	mov	r1, r6
 800f254:	4628      	mov	r0, r5
 800f256:	9205      	str	r2, [sp, #20]
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	f43f ae97 	beq.w	800ef8e <_printf_float+0xc2>
 800f260:	9a05      	ldr	r2, [sp, #20]
 800f262:	f10b 0b01 	add.w	fp, fp, #1
 800f266:	e7b9      	b.n	800f1dc <_printf_float+0x310>
 800f268:	ee18 3a10 	vmov	r3, s16
 800f26c:	4652      	mov	r2, sl
 800f26e:	4631      	mov	r1, r6
 800f270:	4628      	mov	r0, r5
 800f272:	47b8      	blx	r7
 800f274:	3001      	adds	r0, #1
 800f276:	d1be      	bne.n	800f1f6 <_printf_float+0x32a>
 800f278:	e689      	b.n	800ef8e <_printf_float+0xc2>
 800f27a:	9a05      	ldr	r2, [sp, #20]
 800f27c:	464b      	mov	r3, r9
 800f27e:	4442      	add	r2, r8
 800f280:	4631      	mov	r1, r6
 800f282:	4628      	mov	r0, r5
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	d1c1      	bne.n	800f20e <_printf_float+0x342>
 800f28a:	e680      	b.n	800ef8e <_printf_float+0xc2>
 800f28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f28e:	2a01      	cmp	r2, #1
 800f290:	dc01      	bgt.n	800f296 <_printf_float+0x3ca>
 800f292:	07db      	lsls	r3, r3, #31
 800f294:	d538      	bpl.n	800f308 <_printf_float+0x43c>
 800f296:	2301      	movs	r3, #1
 800f298:	4642      	mov	r2, r8
 800f29a:	4631      	mov	r1, r6
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b8      	blx	r7
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	f43f ae74 	beq.w	800ef8e <_printf_float+0xc2>
 800f2a6:	ee18 3a10 	vmov	r3, s16
 800f2aa:	4652      	mov	r2, sl
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	f43f ae6b 	beq.w	800ef8e <_printf_float+0xc2>
 800f2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f7f1 fc2a 	bl	8000b18 <__aeabi_dcmpeq>
 800f2c4:	b9d8      	cbnz	r0, 800f2fe <_printf_float+0x432>
 800f2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c8:	f108 0201 	add.w	r2, r8, #1
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	4631      	mov	r1, r6
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b8      	blx	r7
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d10e      	bne.n	800f2f6 <_printf_float+0x42a>
 800f2d8:	e659      	b.n	800ef8e <_printf_float+0xc2>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4652      	mov	r2, sl
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	f43f ae52 	beq.w	800ef8e <_printf_float+0xc2>
 800f2ea:	f108 0801 	add.w	r8, r8, #1
 800f2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	4543      	cmp	r3, r8
 800f2f4:	dcf1      	bgt.n	800f2da <_printf_float+0x40e>
 800f2f6:	464b      	mov	r3, r9
 800f2f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2fc:	e6dc      	b.n	800f0b8 <_printf_float+0x1ec>
 800f2fe:	f04f 0800 	mov.w	r8, #0
 800f302:	f104 0a1a 	add.w	sl, r4, #26
 800f306:	e7f2      	b.n	800f2ee <_printf_float+0x422>
 800f308:	2301      	movs	r3, #1
 800f30a:	4642      	mov	r2, r8
 800f30c:	e7df      	b.n	800f2ce <_printf_float+0x402>
 800f30e:	2301      	movs	r3, #1
 800f310:	464a      	mov	r2, r9
 800f312:	4631      	mov	r1, r6
 800f314:	4628      	mov	r0, r5
 800f316:	47b8      	blx	r7
 800f318:	3001      	adds	r0, #1
 800f31a:	f43f ae38 	beq.w	800ef8e <_printf_float+0xc2>
 800f31e:	f108 0801 	add.w	r8, r8, #1
 800f322:	68e3      	ldr	r3, [r4, #12]
 800f324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f326:	1a5b      	subs	r3, r3, r1
 800f328:	4543      	cmp	r3, r8
 800f32a:	dcf0      	bgt.n	800f30e <_printf_float+0x442>
 800f32c:	e6fa      	b.n	800f124 <_printf_float+0x258>
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	f104 0919 	add.w	r9, r4, #25
 800f336:	e7f4      	b.n	800f322 <_printf_float+0x456>

0800f338 <_printf_common>:
 800f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f33c:	4616      	mov	r6, r2
 800f33e:	4699      	mov	r9, r3
 800f340:	688a      	ldr	r2, [r1, #8]
 800f342:	690b      	ldr	r3, [r1, #16]
 800f344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f348:	4293      	cmp	r3, r2
 800f34a:	bfb8      	it	lt
 800f34c:	4613      	movlt	r3, r2
 800f34e:	6033      	str	r3, [r6, #0]
 800f350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f354:	4607      	mov	r7, r0
 800f356:	460c      	mov	r4, r1
 800f358:	b10a      	cbz	r2, 800f35e <_printf_common+0x26>
 800f35a:	3301      	adds	r3, #1
 800f35c:	6033      	str	r3, [r6, #0]
 800f35e:	6823      	ldr	r3, [r4, #0]
 800f360:	0699      	lsls	r1, r3, #26
 800f362:	bf42      	ittt	mi
 800f364:	6833      	ldrmi	r3, [r6, #0]
 800f366:	3302      	addmi	r3, #2
 800f368:	6033      	strmi	r3, [r6, #0]
 800f36a:	6825      	ldr	r5, [r4, #0]
 800f36c:	f015 0506 	ands.w	r5, r5, #6
 800f370:	d106      	bne.n	800f380 <_printf_common+0x48>
 800f372:	f104 0a19 	add.w	sl, r4, #25
 800f376:	68e3      	ldr	r3, [r4, #12]
 800f378:	6832      	ldr	r2, [r6, #0]
 800f37a:	1a9b      	subs	r3, r3, r2
 800f37c:	42ab      	cmp	r3, r5
 800f37e:	dc26      	bgt.n	800f3ce <_printf_common+0x96>
 800f380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f384:	1e13      	subs	r3, r2, #0
 800f386:	6822      	ldr	r2, [r4, #0]
 800f388:	bf18      	it	ne
 800f38a:	2301      	movne	r3, #1
 800f38c:	0692      	lsls	r2, r2, #26
 800f38e:	d42b      	bmi.n	800f3e8 <_printf_common+0xb0>
 800f390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f394:	4649      	mov	r1, r9
 800f396:	4638      	mov	r0, r7
 800f398:	47c0      	blx	r8
 800f39a:	3001      	adds	r0, #1
 800f39c:	d01e      	beq.n	800f3dc <_printf_common+0xa4>
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	68e5      	ldr	r5, [r4, #12]
 800f3a2:	6832      	ldr	r2, [r6, #0]
 800f3a4:	f003 0306 	and.w	r3, r3, #6
 800f3a8:	2b04      	cmp	r3, #4
 800f3aa:	bf08      	it	eq
 800f3ac:	1aad      	subeq	r5, r5, r2
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	6922      	ldr	r2, [r4, #16]
 800f3b2:	bf0c      	ite	eq
 800f3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3b8:	2500      	movne	r5, #0
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	bfc4      	itt	gt
 800f3be:	1a9b      	subgt	r3, r3, r2
 800f3c0:	18ed      	addgt	r5, r5, r3
 800f3c2:	2600      	movs	r6, #0
 800f3c4:	341a      	adds	r4, #26
 800f3c6:	42b5      	cmp	r5, r6
 800f3c8:	d11a      	bne.n	800f400 <_printf_common+0xc8>
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	e008      	b.n	800f3e0 <_printf_common+0xa8>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	4652      	mov	r2, sl
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	47c0      	blx	r8
 800f3d8:	3001      	adds	r0, #1
 800f3da:	d103      	bne.n	800f3e4 <_printf_common+0xac>
 800f3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e4:	3501      	adds	r5, #1
 800f3e6:	e7c6      	b.n	800f376 <_printf_common+0x3e>
 800f3e8:	18e1      	adds	r1, r4, r3
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	2030      	movs	r0, #48	; 0x30
 800f3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f3f2:	4422      	add	r2, r4
 800f3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3fc:	3302      	adds	r3, #2
 800f3fe:	e7c7      	b.n	800f390 <_printf_common+0x58>
 800f400:	2301      	movs	r3, #1
 800f402:	4622      	mov	r2, r4
 800f404:	4649      	mov	r1, r9
 800f406:	4638      	mov	r0, r7
 800f408:	47c0      	blx	r8
 800f40a:	3001      	adds	r0, #1
 800f40c:	d0e6      	beq.n	800f3dc <_printf_common+0xa4>
 800f40e:	3601      	adds	r6, #1
 800f410:	e7d9      	b.n	800f3c6 <_printf_common+0x8e>
	...

0800f414 <_printf_i>:
 800f414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	7e0f      	ldrb	r7, [r1, #24]
 800f41a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f41c:	2f78      	cmp	r7, #120	; 0x78
 800f41e:	4691      	mov	r9, r2
 800f420:	4680      	mov	r8, r0
 800f422:	460c      	mov	r4, r1
 800f424:	469a      	mov	sl, r3
 800f426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f42a:	d807      	bhi.n	800f43c <_printf_i+0x28>
 800f42c:	2f62      	cmp	r7, #98	; 0x62
 800f42e:	d80a      	bhi.n	800f446 <_printf_i+0x32>
 800f430:	2f00      	cmp	r7, #0
 800f432:	f000 80d8 	beq.w	800f5e6 <_printf_i+0x1d2>
 800f436:	2f58      	cmp	r7, #88	; 0x58
 800f438:	f000 80a3 	beq.w	800f582 <_printf_i+0x16e>
 800f43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f444:	e03a      	b.n	800f4bc <_printf_i+0xa8>
 800f446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f44a:	2b15      	cmp	r3, #21
 800f44c:	d8f6      	bhi.n	800f43c <_printf_i+0x28>
 800f44e:	a101      	add	r1, pc, #4	; (adr r1, 800f454 <_printf_i+0x40>)
 800f450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f454:	0800f4ad 	.word	0x0800f4ad
 800f458:	0800f4c1 	.word	0x0800f4c1
 800f45c:	0800f43d 	.word	0x0800f43d
 800f460:	0800f43d 	.word	0x0800f43d
 800f464:	0800f43d 	.word	0x0800f43d
 800f468:	0800f43d 	.word	0x0800f43d
 800f46c:	0800f4c1 	.word	0x0800f4c1
 800f470:	0800f43d 	.word	0x0800f43d
 800f474:	0800f43d 	.word	0x0800f43d
 800f478:	0800f43d 	.word	0x0800f43d
 800f47c:	0800f43d 	.word	0x0800f43d
 800f480:	0800f5cd 	.word	0x0800f5cd
 800f484:	0800f4f1 	.word	0x0800f4f1
 800f488:	0800f5af 	.word	0x0800f5af
 800f48c:	0800f43d 	.word	0x0800f43d
 800f490:	0800f43d 	.word	0x0800f43d
 800f494:	0800f5ef 	.word	0x0800f5ef
 800f498:	0800f43d 	.word	0x0800f43d
 800f49c:	0800f4f1 	.word	0x0800f4f1
 800f4a0:	0800f43d 	.word	0x0800f43d
 800f4a4:	0800f43d 	.word	0x0800f43d
 800f4a8:	0800f5b7 	.word	0x0800f5b7
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	1d1a      	adds	r2, r3, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	602a      	str	r2, [r5, #0]
 800f4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e0a3      	b.n	800f608 <_printf_i+0x1f4>
 800f4c0:	6820      	ldr	r0, [r4, #0]
 800f4c2:	6829      	ldr	r1, [r5, #0]
 800f4c4:	0606      	lsls	r6, r0, #24
 800f4c6:	f101 0304 	add.w	r3, r1, #4
 800f4ca:	d50a      	bpl.n	800f4e2 <_printf_i+0xce>
 800f4cc:	680e      	ldr	r6, [r1, #0]
 800f4ce:	602b      	str	r3, [r5, #0]
 800f4d0:	2e00      	cmp	r6, #0
 800f4d2:	da03      	bge.n	800f4dc <_printf_i+0xc8>
 800f4d4:	232d      	movs	r3, #45	; 0x2d
 800f4d6:	4276      	negs	r6, r6
 800f4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4dc:	485e      	ldr	r0, [pc, #376]	; (800f658 <_printf_i+0x244>)
 800f4de:	230a      	movs	r3, #10
 800f4e0:	e019      	b.n	800f516 <_printf_i+0x102>
 800f4e2:	680e      	ldr	r6, [r1, #0]
 800f4e4:	602b      	str	r3, [r5, #0]
 800f4e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f4ea:	bf18      	it	ne
 800f4ec:	b236      	sxthne	r6, r6
 800f4ee:	e7ef      	b.n	800f4d0 <_printf_i+0xbc>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	6820      	ldr	r0, [r4, #0]
 800f4f4:	1d19      	adds	r1, r3, #4
 800f4f6:	6029      	str	r1, [r5, #0]
 800f4f8:	0601      	lsls	r1, r0, #24
 800f4fa:	d501      	bpl.n	800f500 <_printf_i+0xec>
 800f4fc:	681e      	ldr	r6, [r3, #0]
 800f4fe:	e002      	b.n	800f506 <_printf_i+0xf2>
 800f500:	0646      	lsls	r6, r0, #25
 800f502:	d5fb      	bpl.n	800f4fc <_printf_i+0xe8>
 800f504:	881e      	ldrh	r6, [r3, #0]
 800f506:	4854      	ldr	r0, [pc, #336]	; (800f658 <_printf_i+0x244>)
 800f508:	2f6f      	cmp	r7, #111	; 0x6f
 800f50a:	bf0c      	ite	eq
 800f50c:	2308      	moveq	r3, #8
 800f50e:	230a      	movne	r3, #10
 800f510:	2100      	movs	r1, #0
 800f512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f516:	6865      	ldr	r5, [r4, #4]
 800f518:	60a5      	str	r5, [r4, #8]
 800f51a:	2d00      	cmp	r5, #0
 800f51c:	bfa2      	ittt	ge
 800f51e:	6821      	ldrge	r1, [r4, #0]
 800f520:	f021 0104 	bicge.w	r1, r1, #4
 800f524:	6021      	strge	r1, [r4, #0]
 800f526:	b90e      	cbnz	r6, 800f52c <_printf_i+0x118>
 800f528:	2d00      	cmp	r5, #0
 800f52a:	d04d      	beq.n	800f5c8 <_printf_i+0x1b4>
 800f52c:	4615      	mov	r5, r2
 800f52e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f532:	fb03 6711 	mls	r7, r3, r1, r6
 800f536:	5dc7      	ldrb	r7, [r0, r7]
 800f538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f53c:	4637      	mov	r7, r6
 800f53e:	42bb      	cmp	r3, r7
 800f540:	460e      	mov	r6, r1
 800f542:	d9f4      	bls.n	800f52e <_printf_i+0x11a>
 800f544:	2b08      	cmp	r3, #8
 800f546:	d10b      	bne.n	800f560 <_printf_i+0x14c>
 800f548:	6823      	ldr	r3, [r4, #0]
 800f54a:	07de      	lsls	r6, r3, #31
 800f54c:	d508      	bpl.n	800f560 <_printf_i+0x14c>
 800f54e:	6923      	ldr	r3, [r4, #16]
 800f550:	6861      	ldr	r1, [r4, #4]
 800f552:	4299      	cmp	r1, r3
 800f554:	bfde      	ittt	le
 800f556:	2330      	movle	r3, #48	; 0x30
 800f558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f560:	1b52      	subs	r2, r2, r5
 800f562:	6122      	str	r2, [r4, #16]
 800f564:	f8cd a000 	str.w	sl, [sp]
 800f568:	464b      	mov	r3, r9
 800f56a:	aa03      	add	r2, sp, #12
 800f56c:	4621      	mov	r1, r4
 800f56e:	4640      	mov	r0, r8
 800f570:	f7ff fee2 	bl	800f338 <_printf_common>
 800f574:	3001      	adds	r0, #1
 800f576:	d14c      	bne.n	800f612 <_printf_i+0x1fe>
 800f578:	f04f 30ff 	mov.w	r0, #4294967295
 800f57c:	b004      	add	sp, #16
 800f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f582:	4835      	ldr	r0, [pc, #212]	; (800f658 <_printf_i+0x244>)
 800f584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f588:	6829      	ldr	r1, [r5, #0]
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f590:	6029      	str	r1, [r5, #0]
 800f592:	061d      	lsls	r5, r3, #24
 800f594:	d514      	bpl.n	800f5c0 <_printf_i+0x1ac>
 800f596:	07df      	lsls	r7, r3, #31
 800f598:	bf44      	itt	mi
 800f59a:	f043 0320 	orrmi.w	r3, r3, #32
 800f59e:	6023      	strmi	r3, [r4, #0]
 800f5a0:	b91e      	cbnz	r6, 800f5aa <_printf_i+0x196>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	f023 0320 	bic.w	r3, r3, #32
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	2310      	movs	r3, #16
 800f5ac:	e7b0      	b.n	800f510 <_printf_i+0xfc>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f043 0320 	orr.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	2378      	movs	r3, #120	; 0x78
 800f5b8:	4828      	ldr	r0, [pc, #160]	; (800f65c <_printf_i+0x248>)
 800f5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5be:	e7e3      	b.n	800f588 <_printf_i+0x174>
 800f5c0:	0659      	lsls	r1, r3, #25
 800f5c2:	bf48      	it	mi
 800f5c4:	b2b6      	uxthmi	r6, r6
 800f5c6:	e7e6      	b.n	800f596 <_printf_i+0x182>
 800f5c8:	4615      	mov	r5, r2
 800f5ca:	e7bb      	b.n	800f544 <_printf_i+0x130>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	6826      	ldr	r6, [r4, #0]
 800f5d0:	6961      	ldr	r1, [r4, #20]
 800f5d2:	1d18      	adds	r0, r3, #4
 800f5d4:	6028      	str	r0, [r5, #0]
 800f5d6:	0635      	lsls	r5, r6, #24
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	d501      	bpl.n	800f5e0 <_printf_i+0x1cc>
 800f5dc:	6019      	str	r1, [r3, #0]
 800f5de:	e002      	b.n	800f5e6 <_printf_i+0x1d2>
 800f5e0:	0670      	lsls	r0, r6, #25
 800f5e2:	d5fb      	bpl.n	800f5dc <_printf_i+0x1c8>
 800f5e4:	8019      	strh	r1, [r3, #0]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	4615      	mov	r5, r2
 800f5ec:	e7ba      	b.n	800f564 <_printf_i+0x150>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	1d1a      	adds	r2, r3, #4
 800f5f2:	602a      	str	r2, [r5, #0]
 800f5f4:	681d      	ldr	r5, [r3, #0]
 800f5f6:	6862      	ldr	r2, [r4, #4]
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7f0 fe18 	bl	8000230 <memchr>
 800f600:	b108      	cbz	r0, 800f606 <_printf_i+0x1f2>
 800f602:	1b40      	subs	r0, r0, r5
 800f604:	6060      	str	r0, [r4, #4]
 800f606:	6863      	ldr	r3, [r4, #4]
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	2300      	movs	r3, #0
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	e7a8      	b.n	800f564 <_printf_i+0x150>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	462a      	mov	r2, r5
 800f616:	4649      	mov	r1, r9
 800f618:	4640      	mov	r0, r8
 800f61a:	47d0      	blx	sl
 800f61c:	3001      	adds	r0, #1
 800f61e:	d0ab      	beq.n	800f578 <_printf_i+0x164>
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	079b      	lsls	r3, r3, #30
 800f624:	d413      	bmi.n	800f64e <_printf_i+0x23a>
 800f626:	68e0      	ldr	r0, [r4, #12]
 800f628:	9b03      	ldr	r3, [sp, #12]
 800f62a:	4298      	cmp	r0, r3
 800f62c:	bfb8      	it	lt
 800f62e:	4618      	movlt	r0, r3
 800f630:	e7a4      	b.n	800f57c <_printf_i+0x168>
 800f632:	2301      	movs	r3, #1
 800f634:	4632      	mov	r2, r6
 800f636:	4649      	mov	r1, r9
 800f638:	4640      	mov	r0, r8
 800f63a:	47d0      	blx	sl
 800f63c:	3001      	adds	r0, #1
 800f63e:	d09b      	beq.n	800f578 <_printf_i+0x164>
 800f640:	3501      	adds	r5, #1
 800f642:	68e3      	ldr	r3, [r4, #12]
 800f644:	9903      	ldr	r1, [sp, #12]
 800f646:	1a5b      	subs	r3, r3, r1
 800f648:	42ab      	cmp	r3, r5
 800f64a:	dcf2      	bgt.n	800f632 <_printf_i+0x21e>
 800f64c:	e7eb      	b.n	800f626 <_printf_i+0x212>
 800f64e:	2500      	movs	r5, #0
 800f650:	f104 0619 	add.w	r6, r4, #25
 800f654:	e7f5      	b.n	800f642 <_printf_i+0x22e>
 800f656:	bf00      	nop
 800f658:	08011976 	.word	0x08011976
 800f65c:	08011987 	.word	0x08011987

0800f660 <iprintf>:
 800f660:	b40f      	push	{r0, r1, r2, r3}
 800f662:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <iprintf+0x2c>)
 800f664:	b513      	push	{r0, r1, r4, lr}
 800f666:	681c      	ldr	r4, [r3, #0]
 800f668:	b124      	cbz	r4, 800f674 <iprintf+0x14>
 800f66a:	69a3      	ldr	r3, [r4, #24]
 800f66c:	b913      	cbnz	r3, 800f674 <iprintf+0x14>
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 fef8 	bl	8010464 <__sinit>
 800f674:	ab05      	add	r3, sp, #20
 800f676:	9a04      	ldr	r2, [sp, #16]
 800f678:	68a1      	ldr	r1, [r4, #8]
 800f67a:	9301      	str	r3, [sp, #4]
 800f67c:	4620      	mov	r0, r4
 800f67e:	f001 fc51 	bl	8010f24 <_vfiprintf_r>
 800f682:	b002      	add	sp, #8
 800f684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f688:	b004      	add	sp, #16
 800f68a:	4770      	bx	lr
 800f68c:	2000285c 	.word	0x2000285c

0800f690 <putchar>:
 800f690:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <putchar+0x28>)
 800f692:	b513      	push	{r0, r1, r4, lr}
 800f694:	681c      	ldr	r4, [r3, #0]
 800f696:	4601      	mov	r1, r0
 800f698:	b134      	cbz	r4, 800f6a8 <putchar+0x18>
 800f69a:	69a3      	ldr	r3, [r4, #24]
 800f69c:	b923      	cbnz	r3, 800f6a8 <putchar+0x18>
 800f69e:	9001      	str	r0, [sp, #4]
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f000 fedf 	bl	8010464 <__sinit>
 800f6a6:	9901      	ldr	r1, [sp, #4]
 800f6a8:	68a2      	ldr	r2, [r4, #8]
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	b002      	add	sp, #8
 800f6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6b2:	f001 bd67 	b.w	8011184 <_putc_r>
 800f6b6:	bf00      	nop
 800f6b8:	2000285c 	.word	0x2000285c

0800f6bc <quorem>:
 800f6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	6903      	ldr	r3, [r0, #16]
 800f6c2:	690c      	ldr	r4, [r1, #16]
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	4607      	mov	r7, r0
 800f6c8:	f2c0 8081 	blt.w	800f7ce <quorem+0x112>
 800f6cc:	3c01      	subs	r4, #1
 800f6ce:	f101 0814 	add.w	r8, r1, #20
 800f6d2:	f100 0514 	add.w	r5, r0, #20
 800f6d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f6ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6f4:	d331      	bcc.n	800f75a <quorem+0x9e>
 800f6f6:	f04f 0e00 	mov.w	lr, #0
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	46ac      	mov	ip, r5
 800f6fe:	46f2      	mov	sl, lr
 800f700:	f850 2b04 	ldr.w	r2, [r0], #4
 800f704:	b293      	uxth	r3, r2
 800f706:	fb06 e303 	mla	r3, r6, r3, lr
 800f70a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f70e:	b29b      	uxth	r3, r3
 800f710:	ebaa 0303 	sub.w	r3, sl, r3
 800f714:	f8dc a000 	ldr.w	sl, [ip]
 800f718:	0c12      	lsrs	r2, r2, #16
 800f71a:	fa13 f38a 	uxtah	r3, r3, sl
 800f71e:	fb06 e202 	mla	r2, r6, r2, lr
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	9b00      	ldr	r3, [sp, #0]
 800f726:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f72a:	b292      	uxth	r2, r2
 800f72c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f734:	f8bd 3000 	ldrh.w	r3, [sp]
 800f738:	4581      	cmp	r9, r0
 800f73a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f73e:	f84c 3b04 	str.w	r3, [ip], #4
 800f742:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f746:	d2db      	bcs.n	800f700 <quorem+0x44>
 800f748:	f855 300b 	ldr.w	r3, [r5, fp]
 800f74c:	b92b      	cbnz	r3, 800f75a <quorem+0x9e>
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	3b04      	subs	r3, #4
 800f752:	429d      	cmp	r5, r3
 800f754:	461a      	mov	r2, r3
 800f756:	d32e      	bcc.n	800f7b6 <quorem+0xfa>
 800f758:	613c      	str	r4, [r7, #16]
 800f75a:	4638      	mov	r0, r7
 800f75c:	f001 f9c0 	bl	8010ae0 <__mcmp>
 800f760:	2800      	cmp	r0, #0
 800f762:	db24      	blt.n	800f7ae <quorem+0xf2>
 800f764:	3601      	adds	r6, #1
 800f766:	4628      	mov	r0, r5
 800f768:	f04f 0c00 	mov.w	ip, #0
 800f76c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f770:	f8d0 e000 	ldr.w	lr, [r0]
 800f774:	b293      	uxth	r3, r2
 800f776:	ebac 0303 	sub.w	r3, ip, r3
 800f77a:	0c12      	lsrs	r2, r2, #16
 800f77c:	fa13 f38e 	uxtah	r3, r3, lr
 800f780:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f788:	b29b      	uxth	r3, r3
 800f78a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f78e:	45c1      	cmp	r9, r8
 800f790:	f840 3b04 	str.w	r3, [r0], #4
 800f794:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f798:	d2e8      	bcs.n	800f76c <quorem+0xb0>
 800f79a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f79e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7a2:	b922      	cbnz	r2, 800f7ae <quorem+0xf2>
 800f7a4:	3b04      	subs	r3, #4
 800f7a6:	429d      	cmp	r5, r3
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	d30a      	bcc.n	800f7c2 <quorem+0x106>
 800f7ac:	613c      	str	r4, [r7, #16]
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	b003      	add	sp, #12
 800f7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b6:	6812      	ldr	r2, [r2, #0]
 800f7b8:	3b04      	subs	r3, #4
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	d1cc      	bne.n	800f758 <quorem+0x9c>
 800f7be:	3c01      	subs	r4, #1
 800f7c0:	e7c7      	b.n	800f752 <quorem+0x96>
 800f7c2:	6812      	ldr	r2, [r2, #0]
 800f7c4:	3b04      	subs	r3, #4
 800f7c6:	2a00      	cmp	r2, #0
 800f7c8:	d1f0      	bne.n	800f7ac <quorem+0xf0>
 800f7ca:	3c01      	subs	r4, #1
 800f7cc:	e7eb      	b.n	800f7a6 <quorem+0xea>
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e7ee      	b.n	800f7b0 <quorem+0xf4>
 800f7d2:	0000      	movs	r0, r0
 800f7d4:	0000      	movs	r0, r0
	...

0800f7d8 <_dtoa_r>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	ed2d 8b04 	vpush	{d8-d9}
 800f7e0:	ec57 6b10 	vmov	r6, r7, d0
 800f7e4:	b093      	sub	sp, #76	; 0x4c
 800f7e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f7e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f7ec:	9106      	str	r1, [sp, #24]
 800f7ee:	ee10 aa10 	vmov	sl, s0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f6:	930c      	str	r3, [sp, #48]	; 0x30
 800f7f8:	46bb      	mov	fp, r7
 800f7fa:	b975      	cbnz	r5, 800f81a <_dtoa_r+0x42>
 800f7fc:	2010      	movs	r0, #16
 800f7fe:	f000 fed7 	bl	80105b0 <malloc>
 800f802:	4602      	mov	r2, r0
 800f804:	6260      	str	r0, [r4, #36]	; 0x24
 800f806:	b920      	cbnz	r0, 800f812 <_dtoa_r+0x3a>
 800f808:	4ba7      	ldr	r3, [pc, #668]	; (800faa8 <_dtoa_r+0x2d0>)
 800f80a:	21ea      	movs	r1, #234	; 0xea
 800f80c:	48a7      	ldr	r0, [pc, #668]	; (800faac <_dtoa_r+0x2d4>)
 800f80e:	f001 fe27 	bl	8011460 <__assert_func>
 800f812:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f816:	6005      	str	r5, [r0, #0]
 800f818:	60c5      	str	r5, [r0, #12]
 800f81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f81c:	6819      	ldr	r1, [r3, #0]
 800f81e:	b151      	cbz	r1, 800f836 <_dtoa_r+0x5e>
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	604a      	str	r2, [r1, #4]
 800f824:	2301      	movs	r3, #1
 800f826:	4093      	lsls	r3, r2
 800f828:	608b      	str	r3, [r1, #8]
 800f82a:	4620      	mov	r0, r4
 800f82c:	f000 ff16 	bl	801065c <_Bfree>
 800f830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	1e3b      	subs	r3, r7, #0
 800f838:	bfaa      	itet	ge
 800f83a:	2300      	movge	r3, #0
 800f83c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f840:	f8c8 3000 	strge.w	r3, [r8]
 800f844:	4b9a      	ldr	r3, [pc, #616]	; (800fab0 <_dtoa_r+0x2d8>)
 800f846:	bfbc      	itt	lt
 800f848:	2201      	movlt	r2, #1
 800f84a:	f8c8 2000 	strlt.w	r2, [r8]
 800f84e:	ea33 030b 	bics.w	r3, r3, fp
 800f852:	d11b      	bne.n	800f88c <_dtoa_r+0xb4>
 800f854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f856:	f242 730f 	movw	r3, #9999	; 0x270f
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f860:	4333      	orrs	r3, r6
 800f862:	f000 8592 	beq.w	801038a <_dtoa_r+0xbb2>
 800f866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f868:	b963      	cbnz	r3, 800f884 <_dtoa_r+0xac>
 800f86a:	4b92      	ldr	r3, [pc, #584]	; (800fab4 <_dtoa_r+0x2dc>)
 800f86c:	e022      	b.n	800f8b4 <_dtoa_r+0xdc>
 800f86e:	4b92      	ldr	r3, [pc, #584]	; (800fab8 <_dtoa_r+0x2e0>)
 800f870:	9301      	str	r3, [sp, #4]
 800f872:	3308      	adds	r3, #8
 800f874:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f876:	6013      	str	r3, [r2, #0]
 800f878:	9801      	ldr	r0, [sp, #4]
 800f87a:	b013      	add	sp, #76	; 0x4c
 800f87c:	ecbd 8b04 	vpop	{d8-d9}
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	4b8b      	ldr	r3, [pc, #556]	; (800fab4 <_dtoa_r+0x2dc>)
 800f886:	9301      	str	r3, [sp, #4]
 800f888:	3303      	adds	r3, #3
 800f88a:	e7f3      	b.n	800f874 <_dtoa_r+0x9c>
 800f88c:	2200      	movs	r2, #0
 800f88e:	2300      	movs	r3, #0
 800f890:	4650      	mov	r0, sl
 800f892:	4659      	mov	r1, fp
 800f894:	f7f1 f940 	bl	8000b18 <__aeabi_dcmpeq>
 800f898:	ec4b ab19 	vmov	d9, sl, fp
 800f89c:	4680      	mov	r8, r0
 800f89e:	b158      	cbz	r0, 800f8b8 <_dtoa_r+0xe0>
 800f8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	6013      	str	r3, [r2, #0]
 800f8a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 856b 	beq.w	8010384 <_dtoa_r+0xbac>
 800f8ae:	4883      	ldr	r0, [pc, #524]	; (800fabc <_dtoa_r+0x2e4>)
 800f8b0:	6018      	str	r0, [r3, #0]
 800f8b2:	1e43      	subs	r3, r0, #1
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	e7df      	b.n	800f878 <_dtoa_r+0xa0>
 800f8b8:	ec4b ab10 	vmov	d0, sl, fp
 800f8bc:	aa10      	add	r2, sp, #64	; 0x40
 800f8be:	a911      	add	r1, sp, #68	; 0x44
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f001 f9b3 	bl	8010c2c <__d2b>
 800f8c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f8ca:	ee08 0a10 	vmov	s16, r0
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	f000 8084 	beq.w	800f9dc <_dtoa_r+0x204>
 800f8d4:	ee19 3a90 	vmov	r3, s19
 800f8d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f8e0:	4656      	mov	r6, sl
 800f8e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f8e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f8ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f8ee:	4b74      	ldr	r3, [pc, #464]	; (800fac0 <_dtoa_r+0x2e8>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	f7f0 fcef 	bl	80002d8 <__aeabi_dsub>
 800f8fa:	a365      	add	r3, pc, #404	; (adr r3, 800fa90 <_dtoa_r+0x2b8>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	f7f0 fea2 	bl	8000648 <__aeabi_dmul>
 800f904:	a364      	add	r3, pc, #400	; (adr r3, 800fa98 <_dtoa_r+0x2c0>)
 800f906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90a:	f7f0 fce7 	bl	80002dc <__adddf3>
 800f90e:	4606      	mov	r6, r0
 800f910:	4628      	mov	r0, r5
 800f912:	460f      	mov	r7, r1
 800f914:	f7f0 fe2e 	bl	8000574 <__aeabi_i2d>
 800f918:	a361      	add	r3, pc, #388	; (adr r3, 800faa0 <_dtoa_r+0x2c8>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fe93 	bl	8000648 <__aeabi_dmul>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	4630      	mov	r0, r6
 800f928:	4639      	mov	r1, r7
 800f92a:	f7f0 fcd7 	bl	80002dc <__adddf3>
 800f92e:	4606      	mov	r6, r0
 800f930:	460f      	mov	r7, r1
 800f932:	f7f1 f939 	bl	8000ba8 <__aeabi_d2iz>
 800f936:	2200      	movs	r2, #0
 800f938:	9000      	str	r0, [sp, #0]
 800f93a:	2300      	movs	r3, #0
 800f93c:	4630      	mov	r0, r6
 800f93e:	4639      	mov	r1, r7
 800f940:	f7f1 f8f4 	bl	8000b2c <__aeabi_dcmplt>
 800f944:	b150      	cbz	r0, 800f95c <_dtoa_r+0x184>
 800f946:	9800      	ldr	r0, [sp, #0]
 800f948:	f7f0 fe14 	bl	8000574 <__aeabi_i2d>
 800f94c:	4632      	mov	r2, r6
 800f94e:	463b      	mov	r3, r7
 800f950:	f7f1 f8e2 	bl	8000b18 <__aeabi_dcmpeq>
 800f954:	b910      	cbnz	r0, 800f95c <_dtoa_r+0x184>
 800f956:	9b00      	ldr	r3, [sp, #0]
 800f958:	3b01      	subs	r3, #1
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	9b00      	ldr	r3, [sp, #0]
 800f95e:	2b16      	cmp	r3, #22
 800f960:	d85a      	bhi.n	800fa18 <_dtoa_r+0x240>
 800f962:	9a00      	ldr	r2, [sp, #0]
 800f964:	4b57      	ldr	r3, [pc, #348]	; (800fac4 <_dtoa_r+0x2ec>)
 800f966:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	ec51 0b19 	vmov	r0, r1, d9
 800f972:	f7f1 f8db 	bl	8000b2c <__aeabi_dcmplt>
 800f976:	2800      	cmp	r0, #0
 800f978:	d050      	beq.n	800fa1c <_dtoa_r+0x244>
 800f97a:	9b00      	ldr	r3, [sp, #0]
 800f97c:	3b01      	subs	r3, #1
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	2300      	movs	r3, #0
 800f982:	930b      	str	r3, [sp, #44]	; 0x2c
 800f984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f986:	1b5d      	subs	r5, r3, r5
 800f988:	1e6b      	subs	r3, r5, #1
 800f98a:	9305      	str	r3, [sp, #20]
 800f98c:	bf45      	ittet	mi
 800f98e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f992:	9304      	strmi	r3, [sp, #16]
 800f994:	2300      	movpl	r3, #0
 800f996:	2300      	movmi	r3, #0
 800f998:	bf4c      	ite	mi
 800f99a:	9305      	strmi	r3, [sp, #20]
 800f99c:	9304      	strpl	r3, [sp, #16]
 800f99e:	9b00      	ldr	r3, [sp, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	db3d      	blt.n	800fa20 <_dtoa_r+0x248>
 800f9a4:	9b05      	ldr	r3, [sp, #20]
 800f9a6:	9a00      	ldr	r2, [sp, #0]
 800f9a8:	920a      	str	r2, [sp, #40]	; 0x28
 800f9aa:	4413      	add	r3, r2
 800f9ac:	9305      	str	r3, [sp, #20]
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	9307      	str	r3, [sp, #28]
 800f9b2:	9b06      	ldr	r3, [sp, #24]
 800f9b4:	2b09      	cmp	r3, #9
 800f9b6:	f200 8089 	bhi.w	800facc <_dtoa_r+0x2f4>
 800f9ba:	2b05      	cmp	r3, #5
 800f9bc:	bfc4      	itt	gt
 800f9be:	3b04      	subgt	r3, #4
 800f9c0:	9306      	strgt	r3, [sp, #24]
 800f9c2:	9b06      	ldr	r3, [sp, #24]
 800f9c4:	f1a3 0302 	sub.w	r3, r3, #2
 800f9c8:	bfcc      	ite	gt
 800f9ca:	2500      	movgt	r5, #0
 800f9cc:	2501      	movle	r5, #1
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	f200 8087 	bhi.w	800fae2 <_dtoa_r+0x30a>
 800f9d4:	e8df f003 	tbb	[pc, r3]
 800f9d8:	59383a2d 	.word	0x59383a2d
 800f9dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f9e0:	441d      	add	r5, r3
 800f9e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f9e6:	2b20      	cmp	r3, #32
 800f9e8:	bfc1      	itttt	gt
 800f9ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f9ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f9f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f9f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f9fa:	bfda      	itte	le
 800f9fc:	f1c3 0320 	rsble	r3, r3, #32
 800fa00:	fa06 f003 	lslle.w	r0, r6, r3
 800fa04:	4318      	orrgt	r0, r3
 800fa06:	f7f0 fda5 	bl	8000554 <__aeabi_ui2d>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fa12:	3d01      	subs	r5, #1
 800fa14:	930e      	str	r3, [sp, #56]	; 0x38
 800fa16:	e76a      	b.n	800f8ee <_dtoa_r+0x116>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e7b2      	b.n	800f982 <_dtoa_r+0x1aa>
 800fa1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fa1e:	e7b1      	b.n	800f984 <_dtoa_r+0x1ac>
 800fa20:	9b04      	ldr	r3, [sp, #16]
 800fa22:	9a00      	ldr	r2, [sp, #0]
 800fa24:	1a9b      	subs	r3, r3, r2
 800fa26:	9304      	str	r3, [sp, #16]
 800fa28:	4253      	negs	r3, r2
 800fa2a:	9307      	str	r3, [sp, #28]
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800fa30:	e7bf      	b.n	800f9b2 <_dtoa_r+0x1da>
 800fa32:	2300      	movs	r3, #0
 800fa34:	9308      	str	r3, [sp, #32]
 800fa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	dc55      	bgt.n	800fae8 <_dtoa_r+0x310>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fa42:	461a      	mov	r2, r3
 800fa44:	9209      	str	r2, [sp, #36]	; 0x24
 800fa46:	e00c      	b.n	800fa62 <_dtoa_r+0x28a>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e7f3      	b.n	800fa34 <_dtoa_r+0x25c>
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa50:	9308      	str	r3, [sp, #32]
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	4413      	add	r3, r2
 800fa56:	9302      	str	r3, [sp, #8]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	9303      	str	r3, [sp, #12]
 800fa5e:	bfb8      	it	lt
 800fa60:	2301      	movlt	r3, #1
 800fa62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fa64:	2200      	movs	r2, #0
 800fa66:	6042      	str	r2, [r0, #4]
 800fa68:	2204      	movs	r2, #4
 800fa6a:	f102 0614 	add.w	r6, r2, #20
 800fa6e:	429e      	cmp	r6, r3
 800fa70:	6841      	ldr	r1, [r0, #4]
 800fa72:	d93d      	bls.n	800faf0 <_dtoa_r+0x318>
 800fa74:	4620      	mov	r0, r4
 800fa76:	f000 fdb1 	bl	80105dc <_Balloc>
 800fa7a:	9001      	str	r0, [sp, #4]
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d13b      	bne.n	800faf8 <_dtoa_r+0x320>
 800fa80:	4b11      	ldr	r3, [pc, #68]	; (800fac8 <_dtoa_r+0x2f0>)
 800fa82:	4602      	mov	r2, r0
 800fa84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fa88:	e6c0      	b.n	800f80c <_dtoa_r+0x34>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e7df      	b.n	800fa4e <_dtoa_r+0x276>
 800fa8e:	bf00      	nop
 800fa90:	636f4361 	.word	0x636f4361
 800fa94:	3fd287a7 	.word	0x3fd287a7
 800fa98:	8b60c8b3 	.word	0x8b60c8b3
 800fa9c:	3fc68a28 	.word	0x3fc68a28
 800faa0:	509f79fb 	.word	0x509f79fb
 800faa4:	3fd34413 	.word	0x3fd34413
 800faa8:	080119a5 	.word	0x080119a5
 800faac:	080119bc 	.word	0x080119bc
 800fab0:	7ff00000 	.word	0x7ff00000
 800fab4:	080119a1 	.word	0x080119a1
 800fab8:	08011998 	.word	0x08011998
 800fabc:	08011975 	.word	0x08011975
 800fac0:	3ff80000 	.word	0x3ff80000
 800fac4:	08011b10 	.word	0x08011b10
 800fac8:	08011a17 	.word	0x08011a17
 800facc:	2501      	movs	r5, #1
 800face:	2300      	movs	r3, #0
 800fad0:	9306      	str	r3, [sp, #24]
 800fad2:	9508      	str	r5, [sp, #32]
 800fad4:	f04f 33ff 	mov.w	r3, #4294967295
 800fad8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fadc:	2200      	movs	r2, #0
 800fade:	2312      	movs	r3, #18
 800fae0:	e7b0      	b.n	800fa44 <_dtoa_r+0x26c>
 800fae2:	2301      	movs	r3, #1
 800fae4:	9308      	str	r3, [sp, #32]
 800fae6:	e7f5      	b.n	800fad4 <_dtoa_r+0x2fc>
 800fae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800faee:	e7b8      	b.n	800fa62 <_dtoa_r+0x28a>
 800faf0:	3101      	adds	r1, #1
 800faf2:	6041      	str	r1, [r0, #4]
 800faf4:	0052      	lsls	r2, r2, #1
 800faf6:	e7b8      	b.n	800fa6a <_dtoa_r+0x292>
 800faf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fafa:	9a01      	ldr	r2, [sp, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	2b0e      	cmp	r3, #14
 800fb02:	f200 809d 	bhi.w	800fc40 <_dtoa_r+0x468>
 800fb06:	2d00      	cmp	r5, #0
 800fb08:	f000 809a 	beq.w	800fc40 <_dtoa_r+0x468>
 800fb0c:	9b00      	ldr	r3, [sp, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	dd32      	ble.n	800fb78 <_dtoa_r+0x3a0>
 800fb12:	4ab7      	ldr	r2, [pc, #732]	; (800fdf0 <_dtoa_r+0x618>)
 800fb14:	f003 030f 	and.w	r3, r3, #15
 800fb18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fb1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb20:	9b00      	ldr	r3, [sp, #0]
 800fb22:	05d8      	lsls	r0, r3, #23
 800fb24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fb28:	d516      	bpl.n	800fb58 <_dtoa_r+0x380>
 800fb2a:	4bb2      	ldr	r3, [pc, #712]	; (800fdf4 <_dtoa_r+0x61c>)
 800fb2c:	ec51 0b19 	vmov	r0, r1, d9
 800fb30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fb34:	f7f0 feb2 	bl	800089c <__aeabi_ddiv>
 800fb38:	f007 070f 	and.w	r7, r7, #15
 800fb3c:	4682      	mov	sl, r0
 800fb3e:	468b      	mov	fp, r1
 800fb40:	2503      	movs	r5, #3
 800fb42:	4eac      	ldr	r6, [pc, #688]	; (800fdf4 <_dtoa_r+0x61c>)
 800fb44:	b957      	cbnz	r7, 800fb5c <_dtoa_r+0x384>
 800fb46:	4642      	mov	r2, r8
 800fb48:	464b      	mov	r3, r9
 800fb4a:	4650      	mov	r0, sl
 800fb4c:	4659      	mov	r1, fp
 800fb4e:	f7f0 fea5 	bl	800089c <__aeabi_ddiv>
 800fb52:	4682      	mov	sl, r0
 800fb54:	468b      	mov	fp, r1
 800fb56:	e028      	b.n	800fbaa <_dtoa_r+0x3d2>
 800fb58:	2502      	movs	r5, #2
 800fb5a:	e7f2      	b.n	800fb42 <_dtoa_r+0x36a>
 800fb5c:	07f9      	lsls	r1, r7, #31
 800fb5e:	d508      	bpl.n	800fb72 <_dtoa_r+0x39a>
 800fb60:	4640      	mov	r0, r8
 800fb62:	4649      	mov	r1, r9
 800fb64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb68:	f7f0 fd6e 	bl	8000648 <__aeabi_dmul>
 800fb6c:	3501      	adds	r5, #1
 800fb6e:	4680      	mov	r8, r0
 800fb70:	4689      	mov	r9, r1
 800fb72:	107f      	asrs	r7, r7, #1
 800fb74:	3608      	adds	r6, #8
 800fb76:	e7e5      	b.n	800fb44 <_dtoa_r+0x36c>
 800fb78:	f000 809b 	beq.w	800fcb2 <_dtoa_r+0x4da>
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	4f9d      	ldr	r7, [pc, #628]	; (800fdf4 <_dtoa_r+0x61c>)
 800fb80:	425e      	negs	r6, r3
 800fb82:	4b9b      	ldr	r3, [pc, #620]	; (800fdf0 <_dtoa_r+0x618>)
 800fb84:	f006 020f 	and.w	r2, r6, #15
 800fb88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	ec51 0b19 	vmov	r0, r1, d9
 800fb94:	f7f0 fd58 	bl	8000648 <__aeabi_dmul>
 800fb98:	1136      	asrs	r6, r6, #4
 800fb9a:	4682      	mov	sl, r0
 800fb9c:	468b      	mov	fp, r1
 800fb9e:	2300      	movs	r3, #0
 800fba0:	2502      	movs	r5, #2
 800fba2:	2e00      	cmp	r6, #0
 800fba4:	d17a      	bne.n	800fc9c <_dtoa_r+0x4c4>
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1d3      	bne.n	800fb52 <_dtoa_r+0x37a>
 800fbaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 8082 	beq.w	800fcb6 <_dtoa_r+0x4de>
 800fbb2:	4b91      	ldr	r3, [pc, #580]	; (800fdf8 <_dtoa_r+0x620>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	4659      	mov	r1, fp
 800fbba:	f7f0 ffb7 	bl	8000b2c <__aeabi_dcmplt>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d079      	beq.n	800fcb6 <_dtoa_r+0x4de>
 800fbc2:	9b03      	ldr	r3, [sp, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d076      	beq.n	800fcb6 <_dtoa_r+0x4de>
 800fbc8:	9b02      	ldr	r3, [sp, #8]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	dd36      	ble.n	800fc3c <_dtoa_r+0x464>
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	4650      	mov	r0, sl
 800fbd2:	4659      	mov	r1, fp
 800fbd4:	1e5f      	subs	r7, r3, #1
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	4b88      	ldr	r3, [pc, #544]	; (800fdfc <_dtoa_r+0x624>)
 800fbda:	f7f0 fd35 	bl	8000648 <__aeabi_dmul>
 800fbde:	9e02      	ldr	r6, [sp, #8]
 800fbe0:	4682      	mov	sl, r0
 800fbe2:	468b      	mov	fp, r1
 800fbe4:	3501      	adds	r5, #1
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7f0 fcc4 	bl	8000574 <__aeabi_i2d>
 800fbec:	4652      	mov	r2, sl
 800fbee:	465b      	mov	r3, fp
 800fbf0:	f7f0 fd2a 	bl	8000648 <__aeabi_dmul>
 800fbf4:	4b82      	ldr	r3, [pc, #520]	; (800fe00 <_dtoa_r+0x628>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f7f0 fb70 	bl	80002dc <__adddf3>
 800fbfc:	46d0      	mov	r8, sl
 800fbfe:	46d9      	mov	r9, fp
 800fc00:	4682      	mov	sl, r0
 800fc02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fc06:	2e00      	cmp	r6, #0
 800fc08:	d158      	bne.n	800fcbc <_dtoa_r+0x4e4>
 800fc0a:	4b7e      	ldr	r3, [pc, #504]	; (800fe04 <_dtoa_r+0x62c>)
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	4640      	mov	r0, r8
 800fc10:	4649      	mov	r1, r9
 800fc12:	f7f0 fb61 	bl	80002d8 <__aeabi_dsub>
 800fc16:	4652      	mov	r2, sl
 800fc18:	465b      	mov	r3, fp
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	4689      	mov	r9, r1
 800fc1e:	f7f0 ffa3 	bl	8000b68 <__aeabi_dcmpgt>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	f040 8295 	bne.w	8010152 <_dtoa_r+0x97a>
 800fc28:	4652      	mov	r2, sl
 800fc2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fc2e:	4640      	mov	r0, r8
 800fc30:	4649      	mov	r1, r9
 800fc32:	f7f0 ff7b 	bl	8000b2c <__aeabi_dcmplt>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	f040 8289 	bne.w	801014e <_dtoa_r+0x976>
 800fc3c:	ec5b ab19 	vmov	sl, fp, d9
 800fc40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f2c0 8148 	blt.w	800fed8 <_dtoa_r+0x700>
 800fc48:	9a00      	ldr	r2, [sp, #0]
 800fc4a:	2a0e      	cmp	r2, #14
 800fc4c:	f300 8144 	bgt.w	800fed8 <_dtoa_r+0x700>
 800fc50:	4b67      	ldr	r3, [pc, #412]	; (800fdf0 <_dtoa_r+0x618>)
 800fc52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc56:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f280 80d5 	bge.w	800fe0c <_dtoa_r+0x634>
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f300 80d1 	bgt.w	800fe0c <_dtoa_r+0x634>
 800fc6a:	f040 826f 	bne.w	801014c <_dtoa_r+0x974>
 800fc6e:	4b65      	ldr	r3, [pc, #404]	; (800fe04 <_dtoa_r+0x62c>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	4640      	mov	r0, r8
 800fc74:	4649      	mov	r1, r9
 800fc76:	f7f0 fce7 	bl	8000648 <__aeabi_dmul>
 800fc7a:	4652      	mov	r2, sl
 800fc7c:	465b      	mov	r3, fp
 800fc7e:	f7f0 ff69 	bl	8000b54 <__aeabi_dcmpge>
 800fc82:	9e03      	ldr	r6, [sp, #12]
 800fc84:	4637      	mov	r7, r6
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f040 8245 	bne.w	8010116 <_dtoa_r+0x93e>
 800fc8c:	9d01      	ldr	r5, [sp, #4]
 800fc8e:	2331      	movs	r3, #49	; 0x31
 800fc90:	f805 3b01 	strb.w	r3, [r5], #1
 800fc94:	9b00      	ldr	r3, [sp, #0]
 800fc96:	3301      	adds	r3, #1
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	e240      	b.n	801011e <_dtoa_r+0x946>
 800fc9c:	07f2      	lsls	r2, r6, #31
 800fc9e:	d505      	bpl.n	800fcac <_dtoa_r+0x4d4>
 800fca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fca4:	f7f0 fcd0 	bl	8000648 <__aeabi_dmul>
 800fca8:	3501      	adds	r5, #1
 800fcaa:	2301      	movs	r3, #1
 800fcac:	1076      	asrs	r6, r6, #1
 800fcae:	3708      	adds	r7, #8
 800fcb0:	e777      	b.n	800fba2 <_dtoa_r+0x3ca>
 800fcb2:	2502      	movs	r5, #2
 800fcb4:	e779      	b.n	800fbaa <_dtoa_r+0x3d2>
 800fcb6:	9f00      	ldr	r7, [sp, #0]
 800fcb8:	9e03      	ldr	r6, [sp, #12]
 800fcba:	e794      	b.n	800fbe6 <_dtoa_r+0x40e>
 800fcbc:	9901      	ldr	r1, [sp, #4]
 800fcbe:	4b4c      	ldr	r3, [pc, #304]	; (800fdf0 <_dtoa_r+0x618>)
 800fcc0:	4431      	add	r1, r6
 800fcc2:	910d      	str	r1, [sp, #52]	; 0x34
 800fcc4:	9908      	ldr	r1, [sp, #32]
 800fcc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fcca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	d043      	beq.n	800fd5a <_dtoa_r+0x582>
 800fcd2:	494d      	ldr	r1, [pc, #308]	; (800fe08 <_dtoa_r+0x630>)
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f7f0 fde1 	bl	800089c <__aeabi_ddiv>
 800fcda:	4652      	mov	r2, sl
 800fcdc:	465b      	mov	r3, fp
 800fcde:	f7f0 fafb 	bl	80002d8 <__aeabi_dsub>
 800fce2:	9d01      	ldr	r5, [sp, #4]
 800fce4:	4682      	mov	sl, r0
 800fce6:	468b      	mov	fp, r1
 800fce8:	4649      	mov	r1, r9
 800fcea:	4640      	mov	r0, r8
 800fcec:	f7f0 ff5c 	bl	8000ba8 <__aeabi_d2iz>
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	f7f0 fc3f 	bl	8000574 <__aeabi_i2d>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	4649      	mov	r1, r9
 800fcfe:	f7f0 faeb 	bl	80002d8 <__aeabi_dsub>
 800fd02:	3630      	adds	r6, #48	; 0x30
 800fd04:	f805 6b01 	strb.w	r6, [r5], #1
 800fd08:	4652      	mov	r2, sl
 800fd0a:	465b      	mov	r3, fp
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	4689      	mov	r9, r1
 800fd10:	f7f0 ff0c 	bl	8000b2c <__aeabi_dcmplt>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d163      	bne.n	800fde0 <_dtoa_r+0x608>
 800fd18:	4642      	mov	r2, r8
 800fd1a:	464b      	mov	r3, r9
 800fd1c:	4936      	ldr	r1, [pc, #216]	; (800fdf8 <_dtoa_r+0x620>)
 800fd1e:	2000      	movs	r0, #0
 800fd20:	f7f0 fada 	bl	80002d8 <__aeabi_dsub>
 800fd24:	4652      	mov	r2, sl
 800fd26:	465b      	mov	r3, fp
 800fd28:	f7f0 ff00 	bl	8000b2c <__aeabi_dcmplt>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	f040 80b5 	bne.w	800fe9c <_dtoa_r+0x6c4>
 800fd32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd34:	429d      	cmp	r5, r3
 800fd36:	d081      	beq.n	800fc3c <_dtoa_r+0x464>
 800fd38:	4b30      	ldr	r3, [pc, #192]	; (800fdfc <_dtoa_r+0x624>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	4650      	mov	r0, sl
 800fd3e:	4659      	mov	r1, fp
 800fd40:	f7f0 fc82 	bl	8000648 <__aeabi_dmul>
 800fd44:	4b2d      	ldr	r3, [pc, #180]	; (800fdfc <_dtoa_r+0x624>)
 800fd46:	4682      	mov	sl, r0
 800fd48:	468b      	mov	fp, r1
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f7f0 fc7a 	bl	8000648 <__aeabi_dmul>
 800fd54:	4680      	mov	r8, r0
 800fd56:	4689      	mov	r9, r1
 800fd58:	e7c6      	b.n	800fce8 <_dtoa_r+0x510>
 800fd5a:	4650      	mov	r0, sl
 800fd5c:	4659      	mov	r1, fp
 800fd5e:	f7f0 fc73 	bl	8000648 <__aeabi_dmul>
 800fd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd64:	9d01      	ldr	r5, [sp, #4]
 800fd66:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd68:	4682      	mov	sl, r0
 800fd6a:	468b      	mov	fp, r1
 800fd6c:	4649      	mov	r1, r9
 800fd6e:	4640      	mov	r0, r8
 800fd70:	f7f0 ff1a 	bl	8000ba8 <__aeabi_d2iz>
 800fd74:	4606      	mov	r6, r0
 800fd76:	f7f0 fbfd 	bl	8000574 <__aeabi_i2d>
 800fd7a:	3630      	adds	r6, #48	; 0x30
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4640      	mov	r0, r8
 800fd82:	4649      	mov	r1, r9
 800fd84:	f7f0 faa8 	bl	80002d8 <__aeabi_dsub>
 800fd88:	f805 6b01 	strb.w	r6, [r5], #1
 800fd8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd8e:	429d      	cmp	r5, r3
 800fd90:	4680      	mov	r8, r0
 800fd92:	4689      	mov	r9, r1
 800fd94:	f04f 0200 	mov.w	r2, #0
 800fd98:	d124      	bne.n	800fde4 <_dtoa_r+0x60c>
 800fd9a:	4b1b      	ldr	r3, [pc, #108]	; (800fe08 <_dtoa_r+0x630>)
 800fd9c:	4650      	mov	r0, sl
 800fd9e:	4659      	mov	r1, fp
 800fda0:	f7f0 fa9c 	bl	80002dc <__adddf3>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4640      	mov	r0, r8
 800fdaa:	4649      	mov	r1, r9
 800fdac:	f7f0 fedc 	bl	8000b68 <__aeabi_dcmpgt>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d173      	bne.n	800fe9c <_dtoa_r+0x6c4>
 800fdb4:	4652      	mov	r2, sl
 800fdb6:	465b      	mov	r3, fp
 800fdb8:	4913      	ldr	r1, [pc, #76]	; (800fe08 <_dtoa_r+0x630>)
 800fdba:	2000      	movs	r0, #0
 800fdbc:	f7f0 fa8c 	bl	80002d8 <__aeabi_dsub>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	f7f0 feb0 	bl	8000b2c <__aeabi_dcmplt>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	f43f af35 	beq.w	800fc3c <_dtoa_r+0x464>
 800fdd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fdd4:	1e6b      	subs	r3, r5, #1
 800fdd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fddc:	2b30      	cmp	r3, #48	; 0x30
 800fdde:	d0f8      	beq.n	800fdd2 <_dtoa_r+0x5fa>
 800fde0:	9700      	str	r7, [sp, #0]
 800fde2:	e049      	b.n	800fe78 <_dtoa_r+0x6a0>
 800fde4:	4b05      	ldr	r3, [pc, #20]	; (800fdfc <_dtoa_r+0x624>)
 800fde6:	f7f0 fc2f 	bl	8000648 <__aeabi_dmul>
 800fdea:	4680      	mov	r8, r0
 800fdec:	4689      	mov	r9, r1
 800fdee:	e7bd      	b.n	800fd6c <_dtoa_r+0x594>
 800fdf0:	08011b10 	.word	0x08011b10
 800fdf4:	08011ae8 	.word	0x08011ae8
 800fdf8:	3ff00000 	.word	0x3ff00000
 800fdfc:	40240000 	.word	0x40240000
 800fe00:	401c0000 	.word	0x401c0000
 800fe04:	40140000 	.word	0x40140000
 800fe08:	3fe00000 	.word	0x3fe00000
 800fe0c:	9d01      	ldr	r5, [sp, #4]
 800fe0e:	4656      	mov	r6, sl
 800fe10:	465f      	mov	r7, fp
 800fe12:	4642      	mov	r2, r8
 800fe14:	464b      	mov	r3, r9
 800fe16:	4630      	mov	r0, r6
 800fe18:	4639      	mov	r1, r7
 800fe1a:	f7f0 fd3f 	bl	800089c <__aeabi_ddiv>
 800fe1e:	f7f0 fec3 	bl	8000ba8 <__aeabi_d2iz>
 800fe22:	4682      	mov	sl, r0
 800fe24:	f7f0 fba6 	bl	8000574 <__aeabi_i2d>
 800fe28:	4642      	mov	r2, r8
 800fe2a:	464b      	mov	r3, r9
 800fe2c:	f7f0 fc0c 	bl	8000648 <__aeabi_dmul>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	4630      	mov	r0, r6
 800fe36:	4639      	mov	r1, r7
 800fe38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fe3c:	f7f0 fa4c 	bl	80002d8 <__aeabi_dsub>
 800fe40:	f805 6b01 	strb.w	r6, [r5], #1
 800fe44:	9e01      	ldr	r6, [sp, #4]
 800fe46:	9f03      	ldr	r7, [sp, #12]
 800fe48:	1bae      	subs	r6, r5, r6
 800fe4a:	42b7      	cmp	r7, r6
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	460b      	mov	r3, r1
 800fe50:	d135      	bne.n	800febe <_dtoa_r+0x6e6>
 800fe52:	f7f0 fa43 	bl	80002dc <__adddf3>
 800fe56:	4642      	mov	r2, r8
 800fe58:	464b      	mov	r3, r9
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	460f      	mov	r7, r1
 800fe5e:	f7f0 fe83 	bl	8000b68 <__aeabi_dcmpgt>
 800fe62:	b9d0      	cbnz	r0, 800fe9a <_dtoa_r+0x6c2>
 800fe64:	4642      	mov	r2, r8
 800fe66:	464b      	mov	r3, r9
 800fe68:	4630      	mov	r0, r6
 800fe6a:	4639      	mov	r1, r7
 800fe6c:	f7f0 fe54 	bl	8000b18 <__aeabi_dcmpeq>
 800fe70:	b110      	cbz	r0, 800fe78 <_dtoa_r+0x6a0>
 800fe72:	f01a 0f01 	tst.w	sl, #1
 800fe76:	d110      	bne.n	800fe9a <_dtoa_r+0x6c2>
 800fe78:	4620      	mov	r0, r4
 800fe7a:	ee18 1a10 	vmov	r1, s16
 800fe7e:	f000 fbed 	bl	801065c <_Bfree>
 800fe82:	2300      	movs	r3, #0
 800fe84:	9800      	ldr	r0, [sp, #0]
 800fe86:	702b      	strb	r3, [r5, #0]
 800fe88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe8a:	3001      	adds	r0, #1
 800fe8c:	6018      	str	r0, [r3, #0]
 800fe8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f43f acf1 	beq.w	800f878 <_dtoa_r+0xa0>
 800fe96:	601d      	str	r5, [r3, #0]
 800fe98:	e4ee      	b.n	800f878 <_dtoa_r+0xa0>
 800fe9a:	9f00      	ldr	r7, [sp, #0]
 800fe9c:	462b      	mov	r3, r5
 800fe9e:	461d      	mov	r5, r3
 800fea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fea4:	2a39      	cmp	r2, #57	; 0x39
 800fea6:	d106      	bne.n	800feb6 <_dtoa_r+0x6de>
 800fea8:	9a01      	ldr	r2, [sp, #4]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d1f7      	bne.n	800fe9e <_dtoa_r+0x6c6>
 800feae:	9901      	ldr	r1, [sp, #4]
 800feb0:	2230      	movs	r2, #48	; 0x30
 800feb2:	3701      	adds	r7, #1
 800feb4:	700a      	strb	r2, [r1, #0]
 800feb6:	781a      	ldrb	r2, [r3, #0]
 800feb8:	3201      	adds	r2, #1
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	e790      	b.n	800fde0 <_dtoa_r+0x608>
 800febe:	4ba6      	ldr	r3, [pc, #664]	; (8010158 <_dtoa_r+0x980>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	f7f0 fbc1 	bl	8000648 <__aeabi_dmul>
 800fec6:	2200      	movs	r2, #0
 800fec8:	2300      	movs	r3, #0
 800feca:	4606      	mov	r6, r0
 800fecc:	460f      	mov	r7, r1
 800fece:	f7f0 fe23 	bl	8000b18 <__aeabi_dcmpeq>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d09d      	beq.n	800fe12 <_dtoa_r+0x63a>
 800fed6:	e7cf      	b.n	800fe78 <_dtoa_r+0x6a0>
 800fed8:	9a08      	ldr	r2, [sp, #32]
 800feda:	2a00      	cmp	r2, #0
 800fedc:	f000 80d7 	beq.w	801008e <_dtoa_r+0x8b6>
 800fee0:	9a06      	ldr	r2, [sp, #24]
 800fee2:	2a01      	cmp	r2, #1
 800fee4:	f300 80ba 	bgt.w	801005c <_dtoa_r+0x884>
 800fee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800feea:	2a00      	cmp	r2, #0
 800feec:	f000 80b2 	beq.w	8010054 <_dtoa_r+0x87c>
 800fef0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fef4:	9e07      	ldr	r6, [sp, #28]
 800fef6:	9d04      	ldr	r5, [sp, #16]
 800fef8:	9a04      	ldr	r2, [sp, #16]
 800fefa:	441a      	add	r2, r3
 800fefc:	9204      	str	r2, [sp, #16]
 800fefe:	9a05      	ldr	r2, [sp, #20]
 800ff00:	2101      	movs	r1, #1
 800ff02:	441a      	add	r2, r3
 800ff04:	4620      	mov	r0, r4
 800ff06:	9205      	str	r2, [sp, #20]
 800ff08:	f000 fc60 	bl	80107cc <__i2b>
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	2d00      	cmp	r5, #0
 800ff10:	dd0c      	ble.n	800ff2c <_dtoa_r+0x754>
 800ff12:	9b05      	ldr	r3, [sp, #20]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	dd09      	ble.n	800ff2c <_dtoa_r+0x754>
 800ff18:	42ab      	cmp	r3, r5
 800ff1a:	9a04      	ldr	r2, [sp, #16]
 800ff1c:	bfa8      	it	ge
 800ff1e:	462b      	movge	r3, r5
 800ff20:	1ad2      	subs	r2, r2, r3
 800ff22:	9204      	str	r2, [sp, #16]
 800ff24:	9a05      	ldr	r2, [sp, #20]
 800ff26:	1aed      	subs	r5, r5, r3
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	9305      	str	r3, [sp, #20]
 800ff2c:	9b07      	ldr	r3, [sp, #28]
 800ff2e:	b31b      	cbz	r3, 800ff78 <_dtoa_r+0x7a0>
 800ff30:	9b08      	ldr	r3, [sp, #32]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 80af 	beq.w	8010096 <_dtoa_r+0x8be>
 800ff38:	2e00      	cmp	r6, #0
 800ff3a:	dd13      	ble.n	800ff64 <_dtoa_r+0x78c>
 800ff3c:	4639      	mov	r1, r7
 800ff3e:	4632      	mov	r2, r6
 800ff40:	4620      	mov	r0, r4
 800ff42:	f000 fd03 	bl	801094c <__pow5mult>
 800ff46:	ee18 2a10 	vmov	r2, s16
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4607      	mov	r7, r0
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 fc52 	bl	80107f8 <__multiply>
 800ff54:	ee18 1a10 	vmov	r1, s16
 800ff58:	4680      	mov	r8, r0
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 fb7e 	bl	801065c <_Bfree>
 800ff60:	ee08 8a10 	vmov	s16, r8
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	1b9a      	subs	r2, r3, r6
 800ff68:	d006      	beq.n	800ff78 <_dtoa_r+0x7a0>
 800ff6a:	ee18 1a10 	vmov	r1, s16
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f000 fcec 	bl	801094c <__pow5mult>
 800ff74:	ee08 0a10 	vmov	s16, r0
 800ff78:	2101      	movs	r1, #1
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f000 fc26 	bl	80107cc <__i2b>
 800ff80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	4606      	mov	r6, r0
 800ff86:	f340 8088 	ble.w	801009a <_dtoa_r+0x8c2>
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	4601      	mov	r1, r0
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 fcdc 	bl	801094c <__pow5mult>
 800ff94:	9b06      	ldr	r3, [sp, #24]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	4606      	mov	r6, r0
 800ff9a:	f340 8081 	ble.w	80100a0 <_dtoa_r+0x8c8>
 800ff9e:	f04f 0800 	mov.w	r8, #0
 800ffa2:	6933      	ldr	r3, [r6, #16]
 800ffa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ffa8:	6918      	ldr	r0, [r3, #16]
 800ffaa:	f000 fbbf 	bl	801072c <__hi0bits>
 800ffae:	f1c0 0020 	rsb	r0, r0, #32
 800ffb2:	9b05      	ldr	r3, [sp, #20]
 800ffb4:	4418      	add	r0, r3
 800ffb6:	f010 001f 	ands.w	r0, r0, #31
 800ffba:	f000 8092 	beq.w	80100e2 <_dtoa_r+0x90a>
 800ffbe:	f1c0 0320 	rsb	r3, r0, #32
 800ffc2:	2b04      	cmp	r3, #4
 800ffc4:	f340 808a 	ble.w	80100dc <_dtoa_r+0x904>
 800ffc8:	f1c0 001c 	rsb	r0, r0, #28
 800ffcc:	9b04      	ldr	r3, [sp, #16]
 800ffce:	4403      	add	r3, r0
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	9b05      	ldr	r3, [sp, #20]
 800ffd4:	4403      	add	r3, r0
 800ffd6:	4405      	add	r5, r0
 800ffd8:	9305      	str	r3, [sp, #20]
 800ffda:	9b04      	ldr	r3, [sp, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	dd07      	ble.n	800fff0 <_dtoa_r+0x818>
 800ffe0:	ee18 1a10 	vmov	r1, s16
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f000 fd0a 	bl	8010a00 <__lshift>
 800ffec:	ee08 0a10 	vmov	s16, r0
 800fff0:	9b05      	ldr	r3, [sp, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	dd05      	ble.n	8010002 <_dtoa_r+0x82a>
 800fff6:	4631      	mov	r1, r6
 800fff8:	461a      	mov	r2, r3
 800fffa:	4620      	mov	r0, r4
 800fffc:	f000 fd00 	bl	8010a00 <__lshift>
 8010000:	4606      	mov	r6, r0
 8010002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010004:	2b00      	cmp	r3, #0
 8010006:	d06e      	beq.n	80100e6 <_dtoa_r+0x90e>
 8010008:	ee18 0a10 	vmov	r0, s16
 801000c:	4631      	mov	r1, r6
 801000e:	f000 fd67 	bl	8010ae0 <__mcmp>
 8010012:	2800      	cmp	r0, #0
 8010014:	da67      	bge.n	80100e6 <_dtoa_r+0x90e>
 8010016:	9b00      	ldr	r3, [sp, #0]
 8010018:	3b01      	subs	r3, #1
 801001a:	ee18 1a10 	vmov	r1, s16
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	220a      	movs	r2, #10
 8010022:	2300      	movs	r3, #0
 8010024:	4620      	mov	r0, r4
 8010026:	f000 fb3b 	bl	80106a0 <__multadd>
 801002a:	9b08      	ldr	r3, [sp, #32]
 801002c:	ee08 0a10 	vmov	s16, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 81b1 	beq.w	8010398 <_dtoa_r+0xbc0>
 8010036:	2300      	movs	r3, #0
 8010038:	4639      	mov	r1, r7
 801003a:	220a      	movs	r2, #10
 801003c:	4620      	mov	r0, r4
 801003e:	f000 fb2f 	bl	80106a0 <__multadd>
 8010042:	9b02      	ldr	r3, [sp, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	4607      	mov	r7, r0
 8010048:	f300 808e 	bgt.w	8010168 <_dtoa_r+0x990>
 801004c:	9b06      	ldr	r3, [sp, #24]
 801004e:	2b02      	cmp	r3, #2
 8010050:	dc51      	bgt.n	80100f6 <_dtoa_r+0x91e>
 8010052:	e089      	b.n	8010168 <_dtoa_r+0x990>
 8010054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801005a:	e74b      	b.n	800fef4 <_dtoa_r+0x71c>
 801005c:	9b03      	ldr	r3, [sp, #12]
 801005e:	1e5e      	subs	r6, r3, #1
 8010060:	9b07      	ldr	r3, [sp, #28]
 8010062:	42b3      	cmp	r3, r6
 8010064:	bfbf      	itttt	lt
 8010066:	9b07      	ldrlt	r3, [sp, #28]
 8010068:	9607      	strlt	r6, [sp, #28]
 801006a:	1af2      	sublt	r2, r6, r3
 801006c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801006e:	bfb6      	itet	lt
 8010070:	189b      	addlt	r3, r3, r2
 8010072:	1b9e      	subge	r6, r3, r6
 8010074:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010076:	9b03      	ldr	r3, [sp, #12]
 8010078:	bfb8      	it	lt
 801007a:	2600      	movlt	r6, #0
 801007c:	2b00      	cmp	r3, #0
 801007e:	bfb7      	itett	lt
 8010080:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010084:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010088:	1a9d      	sublt	r5, r3, r2
 801008a:	2300      	movlt	r3, #0
 801008c:	e734      	b.n	800fef8 <_dtoa_r+0x720>
 801008e:	9e07      	ldr	r6, [sp, #28]
 8010090:	9d04      	ldr	r5, [sp, #16]
 8010092:	9f08      	ldr	r7, [sp, #32]
 8010094:	e73b      	b.n	800ff0e <_dtoa_r+0x736>
 8010096:	9a07      	ldr	r2, [sp, #28]
 8010098:	e767      	b.n	800ff6a <_dtoa_r+0x792>
 801009a:	9b06      	ldr	r3, [sp, #24]
 801009c:	2b01      	cmp	r3, #1
 801009e:	dc18      	bgt.n	80100d2 <_dtoa_r+0x8fa>
 80100a0:	f1ba 0f00 	cmp.w	sl, #0
 80100a4:	d115      	bne.n	80100d2 <_dtoa_r+0x8fa>
 80100a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100aa:	b993      	cbnz	r3, 80100d2 <_dtoa_r+0x8fa>
 80100ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100b0:	0d1b      	lsrs	r3, r3, #20
 80100b2:	051b      	lsls	r3, r3, #20
 80100b4:	b183      	cbz	r3, 80100d8 <_dtoa_r+0x900>
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	3301      	adds	r3, #1
 80100ba:	9304      	str	r3, [sp, #16]
 80100bc:	9b05      	ldr	r3, [sp, #20]
 80100be:	3301      	adds	r3, #1
 80100c0:	9305      	str	r3, [sp, #20]
 80100c2:	f04f 0801 	mov.w	r8, #1
 80100c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f47f af6a 	bne.w	800ffa2 <_dtoa_r+0x7ca>
 80100ce:	2001      	movs	r0, #1
 80100d0:	e76f      	b.n	800ffb2 <_dtoa_r+0x7da>
 80100d2:	f04f 0800 	mov.w	r8, #0
 80100d6:	e7f6      	b.n	80100c6 <_dtoa_r+0x8ee>
 80100d8:	4698      	mov	r8, r3
 80100da:	e7f4      	b.n	80100c6 <_dtoa_r+0x8ee>
 80100dc:	f43f af7d 	beq.w	800ffda <_dtoa_r+0x802>
 80100e0:	4618      	mov	r0, r3
 80100e2:	301c      	adds	r0, #28
 80100e4:	e772      	b.n	800ffcc <_dtoa_r+0x7f4>
 80100e6:	9b03      	ldr	r3, [sp, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	dc37      	bgt.n	801015c <_dtoa_r+0x984>
 80100ec:	9b06      	ldr	r3, [sp, #24]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	dd34      	ble.n	801015c <_dtoa_r+0x984>
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	9302      	str	r3, [sp, #8]
 80100f6:	9b02      	ldr	r3, [sp, #8]
 80100f8:	b96b      	cbnz	r3, 8010116 <_dtoa_r+0x93e>
 80100fa:	4631      	mov	r1, r6
 80100fc:	2205      	movs	r2, #5
 80100fe:	4620      	mov	r0, r4
 8010100:	f000 face 	bl	80106a0 <__multadd>
 8010104:	4601      	mov	r1, r0
 8010106:	4606      	mov	r6, r0
 8010108:	ee18 0a10 	vmov	r0, s16
 801010c:	f000 fce8 	bl	8010ae0 <__mcmp>
 8010110:	2800      	cmp	r0, #0
 8010112:	f73f adbb 	bgt.w	800fc8c <_dtoa_r+0x4b4>
 8010116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010118:	9d01      	ldr	r5, [sp, #4]
 801011a:	43db      	mvns	r3, r3
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	f04f 0800 	mov.w	r8, #0
 8010122:	4631      	mov	r1, r6
 8010124:	4620      	mov	r0, r4
 8010126:	f000 fa99 	bl	801065c <_Bfree>
 801012a:	2f00      	cmp	r7, #0
 801012c:	f43f aea4 	beq.w	800fe78 <_dtoa_r+0x6a0>
 8010130:	f1b8 0f00 	cmp.w	r8, #0
 8010134:	d005      	beq.n	8010142 <_dtoa_r+0x96a>
 8010136:	45b8      	cmp	r8, r7
 8010138:	d003      	beq.n	8010142 <_dtoa_r+0x96a>
 801013a:	4641      	mov	r1, r8
 801013c:	4620      	mov	r0, r4
 801013e:	f000 fa8d 	bl	801065c <_Bfree>
 8010142:	4639      	mov	r1, r7
 8010144:	4620      	mov	r0, r4
 8010146:	f000 fa89 	bl	801065c <_Bfree>
 801014a:	e695      	b.n	800fe78 <_dtoa_r+0x6a0>
 801014c:	2600      	movs	r6, #0
 801014e:	4637      	mov	r7, r6
 8010150:	e7e1      	b.n	8010116 <_dtoa_r+0x93e>
 8010152:	9700      	str	r7, [sp, #0]
 8010154:	4637      	mov	r7, r6
 8010156:	e599      	b.n	800fc8c <_dtoa_r+0x4b4>
 8010158:	40240000 	.word	0x40240000
 801015c:	9b08      	ldr	r3, [sp, #32]
 801015e:	2b00      	cmp	r3, #0
 8010160:	f000 80ca 	beq.w	80102f8 <_dtoa_r+0xb20>
 8010164:	9b03      	ldr	r3, [sp, #12]
 8010166:	9302      	str	r3, [sp, #8]
 8010168:	2d00      	cmp	r5, #0
 801016a:	dd05      	ble.n	8010178 <_dtoa_r+0x9a0>
 801016c:	4639      	mov	r1, r7
 801016e:	462a      	mov	r2, r5
 8010170:	4620      	mov	r0, r4
 8010172:	f000 fc45 	bl	8010a00 <__lshift>
 8010176:	4607      	mov	r7, r0
 8010178:	f1b8 0f00 	cmp.w	r8, #0
 801017c:	d05b      	beq.n	8010236 <_dtoa_r+0xa5e>
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fa2b 	bl	80105dc <_Balloc>
 8010186:	4605      	mov	r5, r0
 8010188:	b928      	cbnz	r0, 8010196 <_dtoa_r+0x9be>
 801018a:	4b87      	ldr	r3, [pc, #540]	; (80103a8 <_dtoa_r+0xbd0>)
 801018c:	4602      	mov	r2, r0
 801018e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010192:	f7ff bb3b 	b.w	800f80c <_dtoa_r+0x34>
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	3202      	adds	r2, #2
 801019a:	0092      	lsls	r2, r2, #2
 801019c:	f107 010c 	add.w	r1, r7, #12
 80101a0:	300c      	adds	r0, #12
 80101a2:	f000 fa0d 	bl	80105c0 <memcpy>
 80101a6:	2201      	movs	r2, #1
 80101a8:	4629      	mov	r1, r5
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 fc28 	bl	8010a00 <__lshift>
 80101b0:	9b01      	ldr	r3, [sp, #4]
 80101b2:	f103 0901 	add.w	r9, r3, #1
 80101b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80101ba:	4413      	add	r3, r2
 80101bc:	9305      	str	r3, [sp, #20]
 80101be:	f00a 0301 	and.w	r3, sl, #1
 80101c2:	46b8      	mov	r8, r7
 80101c4:	9304      	str	r3, [sp, #16]
 80101c6:	4607      	mov	r7, r0
 80101c8:	4631      	mov	r1, r6
 80101ca:	ee18 0a10 	vmov	r0, s16
 80101ce:	f7ff fa75 	bl	800f6bc <quorem>
 80101d2:	4641      	mov	r1, r8
 80101d4:	9002      	str	r0, [sp, #8]
 80101d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80101da:	ee18 0a10 	vmov	r0, s16
 80101de:	f000 fc7f 	bl	8010ae0 <__mcmp>
 80101e2:	463a      	mov	r2, r7
 80101e4:	9003      	str	r0, [sp, #12]
 80101e6:	4631      	mov	r1, r6
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 fc95 	bl	8010b18 <__mdiff>
 80101ee:	68c2      	ldr	r2, [r0, #12]
 80101f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80101f4:	4605      	mov	r5, r0
 80101f6:	bb02      	cbnz	r2, 801023a <_dtoa_r+0xa62>
 80101f8:	4601      	mov	r1, r0
 80101fa:	ee18 0a10 	vmov	r0, s16
 80101fe:	f000 fc6f 	bl	8010ae0 <__mcmp>
 8010202:	4602      	mov	r2, r0
 8010204:	4629      	mov	r1, r5
 8010206:	4620      	mov	r0, r4
 8010208:	9207      	str	r2, [sp, #28]
 801020a:	f000 fa27 	bl	801065c <_Bfree>
 801020e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010212:	ea43 0102 	orr.w	r1, r3, r2
 8010216:	9b04      	ldr	r3, [sp, #16]
 8010218:	430b      	orrs	r3, r1
 801021a:	464d      	mov	r5, r9
 801021c:	d10f      	bne.n	801023e <_dtoa_r+0xa66>
 801021e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010222:	d02a      	beq.n	801027a <_dtoa_r+0xaa2>
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	dd02      	ble.n	8010230 <_dtoa_r+0xa58>
 801022a:	9b02      	ldr	r3, [sp, #8]
 801022c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010230:	f88b a000 	strb.w	sl, [fp]
 8010234:	e775      	b.n	8010122 <_dtoa_r+0x94a>
 8010236:	4638      	mov	r0, r7
 8010238:	e7ba      	b.n	80101b0 <_dtoa_r+0x9d8>
 801023a:	2201      	movs	r2, #1
 801023c:	e7e2      	b.n	8010204 <_dtoa_r+0xa2c>
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	db04      	blt.n	801024e <_dtoa_r+0xa76>
 8010244:	9906      	ldr	r1, [sp, #24]
 8010246:	430b      	orrs	r3, r1
 8010248:	9904      	ldr	r1, [sp, #16]
 801024a:	430b      	orrs	r3, r1
 801024c:	d122      	bne.n	8010294 <_dtoa_r+0xabc>
 801024e:	2a00      	cmp	r2, #0
 8010250:	ddee      	ble.n	8010230 <_dtoa_r+0xa58>
 8010252:	ee18 1a10 	vmov	r1, s16
 8010256:	2201      	movs	r2, #1
 8010258:	4620      	mov	r0, r4
 801025a:	f000 fbd1 	bl	8010a00 <__lshift>
 801025e:	4631      	mov	r1, r6
 8010260:	ee08 0a10 	vmov	s16, r0
 8010264:	f000 fc3c 	bl	8010ae0 <__mcmp>
 8010268:	2800      	cmp	r0, #0
 801026a:	dc03      	bgt.n	8010274 <_dtoa_r+0xa9c>
 801026c:	d1e0      	bne.n	8010230 <_dtoa_r+0xa58>
 801026e:	f01a 0f01 	tst.w	sl, #1
 8010272:	d0dd      	beq.n	8010230 <_dtoa_r+0xa58>
 8010274:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010278:	d1d7      	bne.n	801022a <_dtoa_r+0xa52>
 801027a:	2339      	movs	r3, #57	; 0x39
 801027c:	f88b 3000 	strb.w	r3, [fp]
 8010280:	462b      	mov	r3, r5
 8010282:	461d      	mov	r5, r3
 8010284:	3b01      	subs	r3, #1
 8010286:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801028a:	2a39      	cmp	r2, #57	; 0x39
 801028c:	d071      	beq.n	8010372 <_dtoa_r+0xb9a>
 801028e:	3201      	adds	r2, #1
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	e746      	b.n	8010122 <_dtoa_r+0x94a>
 8010294:	2a00      	cmp	r2, #0
 8010296:	dd07      	ble.n	80102a8 <_dtoa_r+0xad0>
 8010298:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801029c:	d0ed      	beq.n	801027a <_dtoa_r+0xaa2>
 801029e:	f10a 0301 	add.w	r3, sl, #1
 80102a2:	f88b 3000 	strb.w	r3, [fp]
 80102a6:	e73c      	b.n	8010122 <_dtoa_r+0x94a>
 80102a8:	9b05      	ldr	r3, [sp, #20]
 80102aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80102ae:	4599      	cmp	r9, r3
 80102b0:	d047      	beq.n	8010342 <_dtoa_r+0xb6a>
 80102b2:	ee18 1a10 	vmov	r1, s16
 80102b6:	2300      	movs	r3, #0
 80102b8:	220a      	movs	r2, #10
 80102ba:	4620      	mov	r0, r4
 80102bc:	f000 f9f0 	bl	80106a0 <__multadd>
 80102c0:	45b8      	cmp	r8, r7
 80102c2:	ee08 0a10 	vmov	s16, r0
 80102c6:	f04f 0300 	mov.w	r3, #0
 80102ca:	f04f 020a 	mov.w	r2, #10
 80102ce:	4641      	mov	r1, r8
 80102d0:	4620      	mov	r0, r4
 80102d2:	d106      	bne.n	80102e2 <_dtoa_r+0xb0a>
 80102d4:	f000 f9e4 	bl	80106a0 <__multadd>
 80102d8:	4680      	mov	r8, r0
 80102da:	4607      	mov	r7, r0
 80102dc:	f109 0901 	add.w	r9, r9, #1
 80102e0:	e772      	b.n	80101c8 <_dtoa_r+0x9f0>
 80102e2:	f000 f9dd 	bl	80106a0 <__multadd>
 80102e6:	4639      	mov	r1, r7
 80102e8:	4680      	mov	r8, r0
 80102ea:	2300      	movs	r3, #0
 80102ec:	220a      	movs	r2, #10
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 f9d6 	bl	80106a0 <__multadd>
 80102f4:	4607      	mov	r7, r0
 80102f6:	e7f1      	b.n	80102dc <_dtoa_r+0xb04>
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	9302      	str	r3, [sp, #8]
 80102fc:	9d01      	ldr	r5, [sp, #4]
 80102fe:	ee18 0a10 	vmov	r0, s16
 8010302:	4631      	mov	r1, r6
 8010304:	f7ff f9da 	bl	800f6bc <quorem>
 8010308:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	f805 ab01 	strb.w	sl, [r5], #1
 8010312:	1aea      	subs	r2, r5, r3
 8010314:	9b02      	ldr	r3, [sp, #8]
 8010316:	4293      	cmp	r3, r2
 8010318:	dd09      	ble.n	801032e <_dtoa_r+0xb56>
 801031a:	ee18 1a10 	vmov	r1, s16
 801031e:	2300      	movs	r3, #0
 8010320:	220a      	movs	r2, #10
 8010322:	4620      	mov	r0, r4
 8010324:	f000 f9bc 	bl	80106a0 <__multadd>
 8010328:	ee08 0a10 	vmov	s16, r0
 801032c:	e7e7      	b.n	80102fe <_dtoa_r+0xb26>
 801032e:	9b02      	ldr	r3, [sp, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	bfc8      	it	gt
 8010334:	461d      	movgt	r5, r3
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	bfd8      	it	le
 801033a:	2501      	movle	r5, #1
 801033c:	441d      	add	r5, r3
 801033e:	f04f 0800 	mov.w	r8, #0
 8010342:	ee18 1a10 	vmov	r1, s16
 8010346:	2201      	movs	r2, #1
 8010348:	4620      	mov	r0, r4
 801034a:	f000 fb59 	bl	8010a00 <__lshift>
 801034e:	4631      	mov	r1, r6
 8010350:	ee08 0a10 	vmov	s16, r0
 8010354:	f000 fbc4 	bl	8010ae0 <__mcmp>
 8010358:	2800      	cmp	r0, #0
 801035a:	dc91      	bgt.n	8010280 <_dtoa_r+0xaa8>
 801035c:	d102      	bne.n	8010364 <_dtoa_r+0xb8c>
 801035e:	f01a 0f01 	tst.w	sl, #1
 8010362:	d18d      	bne.n	8010280 <_dtoa_r+0xaa8>
 8010364:	462b      	mov	r3, r5
 8010366:	461d      	mov	r5, r3
 8010368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801036c:	2a30      	cmp	r2, #48	; 0x30
 801036e:	d0fa      	beq.n	8010366 <_dtoa_r+0xb8e>
 8010370:	e6d7      	b.n	8010122 <_dtoa_r+0x94a>
 8010372:	9a01      	ldr	r2, [sp, #4]
 8010374:	429a      	cmp	r2, r3
 8010376:	d184      	bne.n	8010282 <_dtoa_r+0xaaa>
 8010378:	9b00      	ldr	r3, [sp, #0]
 801037a:	3301      	adds	r3, #1
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	2331      	movs	r3, #49	; 0x31
 8010380:	7013      	strb	r3, [r2, #0]
 8010382:	e6ce      	b.n	8010122 <_dtoa_r+0x94a>
 8010384:	4b09      	ldr	r3, [pc, #36]	; (80103ac <_dtoa_r+0xbd4>)
 8010386:	f7ff ba95 	b.w	800f8b4 <_dtoa_r+0xdc>
 801038a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801038c:	2b00      	cmp	r3, #0
 801038e:	f47f aa6e 	bne.w	800f86e <_dtoa_r+0x96>
 8010392:	4b07      	ldr	r3, [pc, #28]	; (80103b0 <_dtoa_r+0xbd8>)
 8010394:	f7ff ba8e 	b.w	800f8b4 <_dtoa_r+0xdc>
 8010398:	9b02      	ldr	r3, [sp, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	dcae      	bgt.n	80102fc <_dtoa_r+0xb24>
 801039e:	9b06      	ldr	r3, [sp, #24]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	f73f aea8 	bgt.w	80100f6 <_dtoa_r+0x91e>
 80103a6:	e7a9      	b.n	80102fc <_dtoa_r+0xb24>
 80103a8:	08011a17 	.word	0x08011a17
 80103ac:	08011974 	.word	0x08011974
 80103b0:	08011998 	.word	0x08011998

080103b4 <std>:
 80103b4:	2300      	movs	r3, #0
 80103b6:	b510      	push	{r4, lr}
 80103b8:	4604      	mov	r4, r0
 80103ba:	e9c0 3300 	strd	r3, r3, [r0]
 80103be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103c2:	6083      	str	r3, [r0, #8]
 80103c4:	8181      	strh	r1, [r0, #12]
 80103c6:	6643      	str	r3, [r0, #100]	; 0x64
 80103c8:	81c2      	strh	r2, [r0, #14]
 80103ca:	6183      	str	r3, [r0, #24]
 80103cc:	4619      	mov	r1, r3
 80103ce:	2208      	movs	r2, #8
 80103d0:	305c      	adds	r0, #92	; 0x5c
 80103d2:	f7fe fcd3 	bl	800ed7c <memset>
 80103d6:	4b05      	ldr	r3, [pc, #20]	; (80103ec <std+0x38>)
 80103d8:	6263      	str	r3, [r4, #36]	; 0x24
 80103da:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <std+0x3c>)
 80103dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80103de:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <std+0x40>)
 80103e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103e2:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <std+0x44>)
 80103e4:	6224      	str	r4, [r4, #32]
 80103e6:	6323      	str	r3, [r4, #48]	; 0x30
 80103e8:	bd10      	pop	{r4, pc}
 80103ea:	bf00      	nop
 80103ec:	08011235 	.word	0x08011235
 80103f0:	08011257 	.word	0x08011257
 80103f4:	0801128f 	.word	0x0801128f
 80103f8:	080112b3 	.word	0x080112b3

080103fc <_cleanup_r>:
 80103fc:	4901      	ldr	r1, [pc, #4]	; (8010404 <_cleanup_r+0x8>)
 80103fe:	f000 b8af 	b.w	8010560 <_fwalk_reent>
 8010402:	bf00      	nop
 8010404:	080115c9 	.word	0x080115c9

08010408 <__sfmoreglue>:
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	2268      	movs	r2, #104	; 0x68
 801040c:	1e4d      	subs	r5, r1, #1
 801040e:	4355      	muls	r5, r2
 8010410:	460e      	mov	r6, r1
 8010412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010416:	f000 fce7 	bl	8010de8 <_malloc_r>
 801041a:	4604      	mov	r4, r0
 801041c:	b140      	cbz	r0, 8010430 <__sfmoreglue+0x28>
 801041e:	2100      	movs	r1, #0
 8010420:	e9c0 1600 	strd	r1, r6, [r0]
 8010424:	300c      	adds	r0, #12
 8010426:	60a0      	str	r0, [r4, #8]
 8010428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801042c:	f7fe fca6 	bl	800ed7c <memset>
 8010430:	4620      	mov	r0, r4
 8010432:	bd70      	pop	{r4, r5, r6, pc}

08010434 <__sfp_lock_acquire>:
 8010434:	4801      	ldr	r0, [pc, #4]	; (801043c <__sfp_lock_acquire+0x8>)
 8010436:	f000 b8b8 	b.w	80105aa <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	20004749 	.word	0x20004749

08010440 <__sfp_lock_release>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__sfp_lock_release+0x8>)
 8010442:	f000 b8b3 	b.w	80105ac <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	20004749 	.word	0x20004749

0801044c <__sinit_lock_acquire>:
 801044c:	4801      	ldr	r0, [pc, #4]	; (8010454 <__sinit_lock_acquire+0x8>)
 801044e:	f000 b8ac 	b.w	80105aa <__retarget_lock_acquire_recursive>
 8010452:	bf00      	nop
 8010454:	2000474a 	.word	0x2000474a

08010458 <__sinit_lock_release>:
 8010458:	4801      	ldr	r0, [pc, #4]	; (8010460 <__sinit_lock_release+0x8>)
 801045a:	f000 b8a7 	b.w	80105ac <__retarget_lock_release_recursive>
 801045e:	bf00      	nop
 8010460:	2000474a 	.word	0x2000474a

08010464 <__sinit>:
 8010464:	b510      	push	{r4, lr}
 8010466:	4604      	mov	r4, r0
 8010468:	f7ff fff0 	bl	801044c <__sinit_lock_acquire>
 801046c:	69a3      	ldr	r3, [r4, #24]
 801046e:	b11b      	cbz	r3, 8010478 <__sinit+0x14>
 8010470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010474:	f7ff bff0 	b.w	8010458 <__sinit_lock_release>
 8010478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801047c:	6523      	str	r3, [r4, #80]	; 0x50
 801047e:	4b13      	ldr	r3, [pc, #76]	; (80104cc <__sinit+0x68>)
 8010480:	4a13      	ldr	r2, [pc, #76]	; (80104d0 <__sinit+0x6c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	62a2      	str	r2, [r4, #40]	; 0x28
 8010486:	42a3      	cmp	r3, r4
 8010488:	bf04      	itt	eq
 801048a:	2301      	moveq	r3, #1
 801048c:	61a3      	streq	r3, [r4, #24]
 801048e:	4620      	mov	r0, r4
 8010490:	f000 f820 	bl	80104d4 <__sfp>
 8010494:	6060      	str	r0, [r4, #4]
 8010496:	4620      	mov	r0, r4
 8010498:	f000 f81c 	bl	80104d4 <__sfp>
 801049c:	60a0      	str	r0, [r4, #8]
 801049e:	4620      	mov	r0, r4
 80104a0:	f000 f818 	bl	80104d4 <__sfp>
 80104a4:	2200      	movs	r2, #0
 80104a6:	60e0      	str	r0, [r4, #12]
 80104a8:	2104      	movs	r1, #4
 80104aa:	6860      	ldr	r0, [r4, #4]
 80104ac:	f7ff ff82 	bl	80103b4 <std>
 80104b0:	68a0      	ldr	r0, [r4, #8]
 80104b2:	2201      	movs	r2, #1
 80104b4:	2109      	movs	r1, #9
 80104b6:	f7ff ff7d 	bl	80103b4 <std>
 80104ba:	68e0      	ldr	r0, [r4, #12]
 80104bc:	2202      	movs	r2, #2
 80104be:	2112      	movs	r1, #18
 80104c0:	f7ff ff78 	bl	80103b4 <std>
 80104c4:	2301      	movs	r3, #1
 80104c6:	61a3      	str	r3, [r4, #24]
 80104c8:	e7d2      	b.n	8010470 <__sinit+0xc>
 80104ca:	bf00      	nop
 80104cc:	08011960 	.word	0x08011960
 80104d0:	080103fd 	.word	0x080103fd

080104d4 <__sfp>:
 80104d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d6:	4607      	mov	r7, r0
 80104d8:	f7ff ffac 	bl	8010434 <__sfp_lock_acquire>
 80104dc:	4b1e      	ldr	r3, [pc, #120]	; (8010558 <__sfp+0x84>)
 80104de:	681e      	ldr	r6, [r3, #0]
 80104e0:	69b3      	ldr	r3, [r6, #24]
 80104e2:	b913      	cbnz	r3, 80104ea <__sfp+0x16>
 80104e4:	4630      	mov	r0, r6
 80104e6:	f7ff ffbd 	bl	8010464 <__sinit>
 80104ea:	3648      	adds	r6, #72	; 0x48
 80104ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	d503      	bpl.n	80104fc <__sfp+0x28>
 80104f4:	6833      	ldr	r3, [r6, #0]
 80104f6:	b30b      	cbz	r3, 801053c <__sfp+0x68>
 80104f8:	6836      	ldr	r6, [r6, #0]
 80104fa:	e7f7      	b.n	80104ec <__sfp+0x18>
 80104fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010500:	b9d5      	cbnz	r5, 8010538 <__sfp+0x64>
 8010502:	4b16      	ldr	r3, [pc, #88]	; (801055c <__sfp+0x88>)
 8010504:	60e3      	str	r3, [r4, #12]
 8010506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801050a:	6665      	str	r5, [r4, #100]	; 0x64
 801050c:	f000 f84c 	bl	80105a8 <__retarget_lock_init_recursive>
 8010510:	f7ff ff96 	bl	8010440 <__sfp_lock_release>
 8010514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801051c:	6025      	str	r5, [r4, #0]
 801051e:	61a5      	str	r5, [r4, #24]
 8010520:	2208      	movs	r2, #8
 8010522:	4629      	mov	r1, r5
 8010524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010528:	f7fe fc28 	bl	800ed7c <memset>
 801052c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010534:	4620      	mov	r0, r4
 8010536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010538:	3468      	adds	r4, #104	; 0x68
 801053a:	e7d9      	b.n	80104f0 <__sfp+0x1c>
 801053c:	2104      	movs	r1, #4
 801053e:	4638      	mov	r0, r7
 8010540:	f7ff ff62 	bl	8010408 <__sfmoreglue>
 8010544:	4604      	mov	r4, r0
 8010546:	6030      	str	r0, [r6, #0]
 8010548:	2800      	cmp	r0, #0
 801054a:	d1d5      	bne.n	80104f8 <__sfp+0x24>
 801054c:	f7ff ff78 	bl	8010440 <__sfp_lock_release>
 8010550:	230c      	movs	r3, #12
 8010552:	603b      	str	r3, [r7, #0]
 8010554:	e7ee      	b.n	8010534 <__sfp+0x60>
 8010556:	bf00      	nop
 8010558:	08011960 	.word	0x08011960
 801055c:	ffff0001 	.word	0xffff0001

08010560 <_fwalk_reent>:
 8010560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010564:	4606      	mov	r6, r0
 8010566:	4688      	mov	r8, r1
 8010568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801056c:	2700      	movs	r7, #0
 801056e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010572:	f1b9 0901 	subs.w	r9, r9, #1
 8010576:	d505      	bpl.n	8010584 <_fwalk_reent+0x24>
 8010578:	6824      	ldr	r4, [r4, #0]
 801057a:	2c00      	cmp	r4, #0
 801057c:	d1f7      	bne.n	801056e <_fwalk_reent+0xe>
 801057e:	4638      	mov	r0, r7
 8010580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010584:	89ab      	ldrh	r3, [r5, #12]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d907      	bls.n	801059a <_fwalk_reent+0x3a>
 801058a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801058e:	3301      	adds	r3, #1
 8010590:	d003      	beq.n	801059a <_fwalk_reent+0x3a>
 8010592:	4629      	mov	r1, r5
 8010594:	4630      	mov	r0, r6
 8010596:	47c0      	blx	r8
 8010598:	4307      	orrs	r7, r0
 801059a:	3568      	adds	r5, #104	; 0x68
 801059c:	e7e9      	b.n	8010572 <_fwalk_reent+0x12>
	...

080105a0 <_localeconv_r>:
 80105a0:	4800      	ldr	r0, [pc, #0]	; (80105a4 <_localeconv_r+0x4>)
 80105a2:	4770      	bx	lr
 80105a4:	200029b0 	.word	0x200029b0

080105a8 <__retarget_lock_init_recursive>:
 80105a8:	4770      	bx	lr

080105aa <__retarget_lock_acquire_recursive>:
 80105aa:	4770      	bx	lr

080105ac <__retarget_lock_release_recursive>:
 80105ac:	4770      	bx	lr
	...

080105b0 <malloc>:
 80105b0:	4b02      	ldr	r3, [pc, #8]	; (80105bc <malloc+0xc>)
 80105b2:	4601      	mov	r1, r0
 80105b4:	6818      	ldr	r0, [r3, #0]
 80105b6:	f000 bc17 	b.w	8010de8 <_malloc_r>
 80105ba:	bf00      	nop
 80105bc:	2000285c 	.word	0x2000285c

080105c0 <memcpy>:
 80105c0:	440a      	add	r2, r1
 80105c2:	4291      	cmp	r1, r2
 80105c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80105c8:	d100      	bne.n	80105cc <memcpy+0xc>
 80105ca:	4770      	bx	lr
 80105cc:	b510      	push	{r4, lr}
 80105ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105d6:	4291      	cmp	r1, r2
 80105d8:	d1f9      	bne.n	80105ce <memcpy+0xe>
 80105da:	bd10      	pop	{r4, pc}

080105dc <_Balloc>:
 80105dc:	b570      	push	{r4, r5, r6, lr}
 80105de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80105e0:	4604      	mov	r4, r0
 80105e2:	460d      	mov	r5, r1
 80105e4:	b976      	cbnz	r6, 8010604 <_Balloc+0x28>
 80105e6:	2010      	movs	r0, #16
 80105e8:	f7ff ffe2 	bl	80105b0 <malloc>
 80105ec:	4602      	mov	r2, r0
 80105ee:	6260      	str	r0, [r4, #36]	; 0x24
 80105f0:	b920      	cbnz	r0, 80105fc <_Balloc+0x20>
 80105f2:	4b18      	ldr	r3, [pc, #96]	; (8010654 <_Balloc+0x78>)
 80105f4:	4818      	ldr	r0, [pc, #96]	; (8010658 <_Balloc+0x7c>)
 80105f6:	2166      	movs	r1, #102	; 0x66
 80105f8:	f000 ff32 	bl	8011460 <__assert_func>
 80105fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010600:	6006      	str	r6, [r0, #0]
 8010602:	60c6      	str	r6, [r0, #12]
 8010604:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010606:	68f3      	ldr	r3, [r6, #12]
 8010608:	b183      	cbz	r3, 801062c <_Balloc+0x50>
 801060a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010612:	b9b8      	cbnz	r0, 8010644 <_Balloc+0x68>
 8010614:	2101      	movs	r1, #1
 8010616:	fa01 f605 	lsl.w	r6, r1, r5
 801061a:	1d72      	adds	r2, r6, #5
 801061c:	0092      	lsls	r2, r2, #2
 801061e:	4620      	mov	r0, r4
 8010620:	f000 fb60 	bl	8010ce4 <_calloc_r>
 8010624:	b160      	cbz	r0, 8010640 <_Balloc+0x64>
 8010626:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801062a:	e00e      	b.n	801064a <_Balloc+0x6e>
 801062c:	2221      	movs	r2, #33	; 0x21
 801062e:	2104      	movs	r1, #4
 8010630:	4620      	mov	r0, r4
 8010632:	f000 fb57 	bl	8010ce4 <_calloc_r>
 8010636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010638:	60f0      	str	r0, [r6, #12]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1e4      	bne.n	801060a <_Balloc+0x2e>
 8010640:	2000      	movs	r0, #0
 8010642:	bd70      	pop	{r4, r5, r6, pc}
 8010644:	6802      	ldr	r2, [r0, #0]
 8010646:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801064a:	2300      	movs	r3, #0
 801064c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010650:	e7f7      	b.n	8010642 <_Balloc+0x66>
 8010652:	bf00      	nop
 8010654:	080119a5 	.word	0x080119a5
 8010658:	08011a88 	.word	0x08011a88

0801065c <_Bfree>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010660:	4605      	mov	r5, r0
 8010662:	460c      	mov	r4, r1
 8010664:	b976      	cbnz	r6, 8010684 <_Bfree+0x28>
 8010666:	2010      	movs	r0, #16
 8010668:	f7ff ffa2 	bl	80105b0 <malloc>
 801066c:	4602      	mov	r2, r0
 801066e:	6268      	str	r0, [r5, #36]	; 0x24
 8010670:	b920      	cbnz	r0, 801067c <_Bfree+0x20>
 8010672:	4b09      	ldr	r3, [pc, #36]	; (8010698 <_Bfree+0x3c>)
 8010674:	4809      	ldr	r0, [pc, #36]	; (801069c <_Bfree+0x40>)
 8010676:	218a      	movs	r1, #138	; 0x8a
 8010678:	f000 fef2 	bl	8011460 <__assert_func>
 801067c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010680:	6006      	str	r6, [r0, #0]
 8010682:	60c6      	str	r6, [r0, #12]
 8010684:	b13c      	cbz	r4, 8010696 <_Bfree+0x3a>
 8010686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010688:	6862      	ldr	r2, [r4, #4]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010690:	6021      	str	r1, [r4, #0]
 8010692:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010696:	bd70      	pop	{r4, r5, r6, pc}
 8010698:	080119a5 	.word	0x080119a5
 801069c:	08011a88 	.word	0x08011a88

080106a0 <__multadd>:
 80106a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a4:	690d      	ldr	r5, [r1, #16]
 80106a6:	4607      	mov	r7, r0
 80106a8:	460c      	mov	r4, r1
 80106aa:	461e      	mov	r6, r3
 80106ac:	f101 0c14 	add.w	ip, r1, #20
 80106b0:	2000      	movs	r0, #0
 80106b2:	f8dc 3000 	ldr.w	r3, [ip]
 80106b6:	b299      	uxth	r1, r3
 80106b8:	fb02 6101 	mla	r1, r2, r1, r6
 80106bc:	0c1e      	lsrs	r6, r3, #16
 80106be:	0c0b      	lsrs	r3, r1, #16
 80106c0:	fb02 3306 	mla	r3, r2, r6, r3
 80106c4:	b289      	uxth	r1, r1
 80106c6:	3001      	adds	r0, #1
 80106c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106cc:	4285      	cmp	r5, r0
 80106ce:	f84c 1b04 	str.w	r1, [ip], #4
 80106d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106d6:	dcec      	bgt.n	80106b2 <__multadd+0x12>
 80106d8:	b30e      	cbz	r6, 801071e <__multadd+0x7e>
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	42ab      	cmp	r3, r5
 80106de:	dc19      	bgt.n	8010714 <__multadd+0x74>
 80106e0:	6861      	ldr	r1, [r4, #4]
 80106e2:	4638      	mov	r0, r7
 80106e4:	3101      	adds	r1, #1
 80106e6:	f7ff ff79 	bl	80105dc <_Balloc>
 80106ea:	4680      	mov	r8, r0
 80106ec:	b928      	cbnz	r0, 80106fa <__multadd+0x5a>
 80106ee:	4602      	mov	r2, r0
 80106f0:	4b0c      	ldr	r3, [pc, #48]	; (8010724 <__multadd+0x84>)
 80106f2:	480d      	ldr	r0, [pc, #52]	; (8010728 <__multadd+0x88>)
 80106f4:	21b5      	movs	r1, #181	; 0xb5
 80106f6:	f000 feb3 	bl	8011460 <__assert_func>
 80106fa:	6922      	ldr	r2, [r4, #16]
 80106fc:	3202      	adds	r2, #2
 80106fe:	f104 010c 	add.w	r1, r4, #12
 8010702:	0092      	lsls	r2, r2, #2
 8010704:	300c      	adds	r0, #12
 8010706:	f7ff ff5b 	bl	80105c0 <memcpy>
 801070a:	4621      	mov	r1, r4
 801070c:	4638      	mov	r0, r7
 801070e:	f7ff ffa5 	bl	801065c <_Bfree>
 8010712:	4644      	mov	r4, r8
 8010714:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010718:	3501      	adds	r5, #1
 801071a:	615e      	str	r6, [r3, #20]
 801071c:	6125      	str	r5, [r4, #16]
 801071e:	4620      	mov	r0, r4
 8010720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010724:	08011a17 	.word	0x08011a17
 8010728:	08011a88 	.word	0x08011a88

0801072c <__hi0bits>:
 801072c:	0c03      	lsrs	r3, r0, #16
 801072e:	041b      	lsls	r3, r3, #16
 8010730:	b9d3      	cbnz	r3, 8010768 <__hi0bits+0x3c>
 8010732:	0400      	lsls	r0, r0, #16
 8010734:	2310      	movs	r3, #16
 8010736:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801073a:	bf04      	itt	eq
 801073c:	0200      	lsleq	r0, r0, #8
 801073e:	3308      	addeq	r3, #8
 8010740:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010744:	bf04      	itt	eq
 8010746:	0100      	lsleq	r0, r0, #4
 8010748:	3304      	addeq	r3, #4
 801074a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801074e:	bf04      	itt	eq
 8010750:	0080      	lsleq	r0, r0, #2
 8010752:	3302      	addeq	r3, #2
 8010754:	2800      	cmp	r0, #0
 8010756:	db05      	blt.n	8010764 <__hi0bits+0x38>
 8010758:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801075c:	f103 0301 	add.w	r3, r3, #1
 8010760:	bf08      	it	eq
 8010762:	2320      	moveq	r3, #32
 8010764:	4618      	mov	r0, r3
 8010766:	4770      	bx	lr
 8010768:	2300      	movs	r3, #0
 801076a:	e7e4      	b.n	8010736 <__hi0bits+0xa>

0801076c <__lo0bits>:
 801076c:	6803      	ldr	r3, [r0, #0]
 801076e:	f013 0207 	ands.w	r2, r3, #7
 8010772:	4601      	mov	r1, r0
 8010774:	d00b      	beq.n	801078e <__lo0bits+0x22>
 8010776:	07da      	lsls	r2, r3, #31
 8010778:	d423      	bmi.n	80107c2 <__lo0bits+0x56>
 801077a:	0798      	lsls	r0, r3, #30
 801077c:	bf49      	itett	mi
 801077e:	085b      	lsrmi	r3, r3, #1
 8010780:	089b      	lsrpl	r3, r3, #2
 8010782:	2001      	movmi	r0, #1
 8010784:	600b      	strmi	r3, [r1, #0]
 8010786:	bf5c      	itt	pl
 8010788:	600b      	strpl	r3, [r1, #0]
 801078a:	2002      	movpl	r0, #2
 801078c:	4770      	bx	lr
 801078e:	b298      	uxth	r0, r3
 8010790:	b9a8      	cbnz	r0, 80107be <__lo0bits+0x52>
 8010792:	0c1b      	lsrs	r3, r3, #16
 8010794:	2010      	movs	r0, #16
 8010796:	b2da      	uxtb	r2, r3
 8010798:	b90a      	cbnz	r2, 801079e <__lo0bits+0x32>
 801079a:	3008      	adds	r0, #8
 801079c:	0a1b      	lsrs	r3, r3, #8
 801079e:	071a      	lsls	r2, r3, #28
 80107a0:	bf04      	itt	eq
 80107a2:	091b      	lsreq	r3, r3, #4
 80107a4:	3004      	addeq	r0, #4
 80107a6:	079a      	lsls	r2, r3, #30
 80107a8:	bf04      	itt	eq
 80107aa:	089b      	lsreq	r3, r3, #2
 80107ac:	3002      	addeq	r0, #2
 80107ae:	07da      	lsls	r2, r3, #31
 80107b0:	d403      	bmi.n	80107ba <__lo0bits+0x4e>
 80107b2:	085b      	lsrs	r3, r3, #1
 80107b4:	f100 0001 	add.w	r0, r0, #1
 80107b8:	d005      	beq.n	80107c6 <__lo0bits+0x5a>
 80107ba:	600b      	str	r3, [r1, #0]
 80107bc:	4770      	bx	lr
 80107be:	4610      	mov	r0, r2
 80107c0:	e7e9      	b.n	8010796 <__lo0bits+0x2a>
 80107c2:	2000      	movs	r0, #0
 80107c4:	4770      	bx	lr
 80107c6:	2020      	movs	r0, #32
 80107c8:	4770      	bx	lr
	...

080107cc <__i2b>:
 80107cc:	b510      	push	{r4, lr}
 80107ce:	460c      	mov	r4, r1
 80107d0:	2101      	movs	r1, #1
 80107d2:	f7ff ff03 	bl	80105dc <_Balloc>
 80107d6:	4602      	mov	r2, r0
 80107d8:	b928      	cbnz	r0, 80107e6 <__i2b+0x1a>
 80107da:	4b05      	ldr	r3, [pc, #20]	; (80107f0 <__i2b+0x24>)
 80107dc:	4805      	ldr	r0, [pc, #20]	; (80107f4 <__i2b+0x28>)
 80107de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80107e2:	f000 fe3d 	bl	8011460 <__assert_func>
 80107e6:	2301      	movs	r3, #1
 80107e8:	6144      	str	r4, [r0, #20]
 80107ea:	6103      	str	r3, [r0, #16]
 80107ec:	bd10      	pop	{r4, pc}
 80107ee:	bf00      	nop
 80107f0:	08011a17 	.word	0x08011a17
 80107f4:	08011a88 	.word	0x08011a88

080107f8 <__multiply>:
 80107f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fc:	4691      	mov	r9, r2
 80107fe:	690a      	ldr	r2, [r1, #16]
 8010800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010804:	429a      	cmp	r2, r3
 8010806:	bfb8      	it	lt
 8010808:	460b      	movlt	r3, r1
 801080a:	460c      	mov	r4, r1
 801080c:	bfbc      	itt	lt
 801080e:	464c      	movlt	r4, r9
 8010810:	4699      	movlt	r9, r3
 8010812:	6927      	ldr	r7, [r4, #16]
 8010814:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010818:	68a3      	ldr	r3, [r4, #8]
 801081a:	6861      	ldr	r1, [r4, #4]
 801081c:	eb07 060a 	add.w	r6, r7, sl
 8010820:	42b3      	cmp	r3, r6
 8010822:	b085      	sub	sp, #20
 8010824:	bfb8      	it	lt
 8010826:	3101      	addlt	r1, #1
 8010828:	f7ff fed8 	bl	80105dc <_Balloc>
 801082c:	b930      	cbnz	r0, 801083c <__multiply+0x44>
 801082e:	4602      	mov	r2, r0
 8010830:	4b44      	ldr	r3, [pc, #272]	; (8010944 <__multiply+0x14c>)
 8010832:	4845      	ldr	r0, [pc, #276]	; (8010948 <__multiply+0x150>)
 8010834:	f240 115d 	movw	r1, #349	; 0x15d
 8010838:	f000 fe12 	bl	8011460 <__assert_func>
 801083c:	f100 0514 	add.w	r5, r0, #20
 8010840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010844:	462b      	mov	r3, r5
 8010846:	2200      	movs	r2, #0
 8010848:	4543      	cmp	r3, r8
 801084a:	d321      	bcc.n	8010890 <__multiply+0x98>
 801084c:	f104 0314 	add.w	r3, r4, #20
 8010850:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010854:	f109 0314 	add.w	r3, r9, #20
 8010858:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801085c:	9202      	str	r2, [sp, #8]
 801085e:	1b3a      	subs	r2, r7, r4
 8010860:	3a15      	subs	r2, #21
 8010862:	f022 0203 	bic.w	r2, r2, #3
 8010866:	3204      	adds	r2, #4
 8010868:	f104 0115 	add.w	r1, r4, #21
 801086c:	428f      	cmp	r7, r1
 801086e:	bf38      	it	cc
 8010870:	2204      	movcc	r2, #4
 8010872:	9201      	str	r2, [sp, #4]
 8010874:	9a02      	ldr	r2, [sp, #8]
 8010876:	9303      	str	r3, [sp, #12]
 8010878:	429a      	cmp	r2, r3
 801087a:	d80c      	bhi.n	8010896 <__multiply+0x9e>
 801087c:	2e00      	cmp	r6, #0
 801087e:	dd03      	ble.n	8010888 <__multiply+0x90>
 8010880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010884:	2b00      	cmp	r3, #0
 8010886:	d05a      	beq.n	801093e <__multiply+0x146>
 8010888:	6106      	str	r6, [r0, #16]
 801088a:	b005      	add	sp, #20
 801088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010890:	f843 2b04 	str.w	r2, [r3], #4
 8010894:	e7d8      	b.n	8010848 <__multiply+0x50>
 8010896:	f8b3 a000 	ldrh.w	sl, [r3]
 801089a:	f1ba 0f00 	cmp.w	sl, #0
 801089e:	d024      	beq.n	80108ea <__multiply+0xf2>
 80108a0:	f104 0e14 	add.w	lr, r4, #20
 80108a4:	46a9      	mov	r9, r5
 80108a6:	f04f 0c00 	mov.w	ip, #0
 80108aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80108ae:	f8d9 1000 	ldr.w	r1, [r9]
 80108b2:	fa1f fb82 	uxth.w	fp, r2
 80108b6:	b289      	uxth	r1, r1
 80108b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80108bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80108c0:	f8d9 2000 	ldr.w	r2, [r9]
 80108c4:	4461      	add	r1, ip
 80108c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80108ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80108ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80108d2:	b289      	uxth	r1, r1
 80108d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80108d8:	4577      	cmp	r7, lr
 80108da:	f849 1b04 	str.w	r1, [r9], #4
 80108de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80108e2:	d8e2      	bhi.n	80108aa <__multiply+0xb2>
 80108e4:	9a01      	ldr	r2, [sp, #4]
 80108e6:	f845 c002 	str.w	ip, [r5, r2]
 80108ea:	9a03      	ldr	r2, [sp, #12]
 80108ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80108f0:	3304      	adds	r3, #4
 80108f2:	f1b9 0f00 	cmp.w	r9, #0
 80108f6:	d020      	beq.n	801093a <__multiply+0x142>
 80108f8:	6829      	ldr	r1, [r5, #0]
 80108fa:	f104 0c14 	add.w	ip, r4, #20
 80108fe:	46ae      	mov	lr, r5
 8010900:	f04f 0a00 	mov.w	sl, #0
 8010904:	f8bc b000 	ldrh.w	fp, [ip]
 8010908:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801090c:	fb09 220b 	mla	r2, r9, fp, r2
 8010910:	4492      	add	sl, r2
 8010912:	b289      	uxth	r1, r1
 8010914:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010918:	f84e 1b04 	str.w	r1, [lr], #4
 801091c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010920:	f8be 1000 	ldrh.w	r1, [lr]
 8010924:	0c12      	lsrs	r2, r2, #16
 8010926:	fb09 1102 	mla	r1, r9, r2, r1
 801092a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801092e:	4567      	cmp	r7, ip
 8010930:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010934:	d8e6      	bhi.n	8010904 <__multiply+0x10c>
 8010936:	9a01      	ldr	r2, [sp, #4]
 8010938:	50a9      	str	r1, [r5, r2]
 801093a:	3504      	adds	r5, #4
 801093c:	e79a      	b.n	8010874 <__multiply+0x7c>
 801093e:	3e01      	subs	r6, #1
 8010940:	e79c      	b.n	801087c <__multiply+0x84>
 8010942:	bf00      	nop
 8010944:	08011a17 	.word	0x08011a17
 8010948:	08011a88 	.word	0x08011a88

0801094c <__pow5mult>:
 801094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010950:	4615      	mov	r5, r2
 8010952:	f012 0203 	ands.w	r2, r2, #3
 8010956:	4606      	mov	r6, r0
 8010958:	460f      	mov	r7, r1
 801095a:	d007      	beq.n	801096c <__pow5mult+0x20>
 801095c:	4c25      	ldr	r4, [pc, #148]	; (80109f4 <__pow5mult+0xa8>)
 801095e:	3a01      	subs	r2, #1
 8010960:	2300      	movs	r3, #0
 8010962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010966:	f7ff fe9b 	bl	80106a0 <__multadd>
 801096a:	4607      	mov	r7, r0
 801096c:	10ad      	asrs	r5, r5, #2
 801096e:	d03d      	beq.n	80109ec <__pow5mult+0xa0>
 8010970:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010972:	b97c      	cbnz	r4, 8010994 <__pow5mult+0x48>
 8010974:	2010      	movs	r0, #16
 8010976:	f7ff fe1b 	bl	80105b0 <malloc>
 801097a:	4602      	mov	r2, r0
 801097c:	6270      	str	r0, [r6, #36]	; 0x24
 801097e:	b928      	cbnz	r0, 801098c <__pow5mult+0x40>
 8010980:	4b1d      	ldr	r3, [pc, #116]	; (80109f8 <__pow5mult+0xac>)
 8010982:	481e      	ldr	r0, [pc, #120]	; (80109fc <__pow5mult+0xb0>)
 8010984:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010988:	f000 fd6a 	bl	8011460 <__assert_func>
 801098c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010990:	6004      	str	r4, [r0, #0]
 8010992:	60c4      	str	r4, [r0, #12]
 8010994:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801099c:	b94c      	cbnz	r4, 80109b2 <__pow5mult+0x66>
 801099e:	f240 2171 	movw	r1, #625	; 0x271
 80109a2:	4630      	mov	r0, r6
 80109a4:	f7ff ff12 	bl	80107cc <__i2b>
 80109a8:	2300      	movs	r3, #0
 80109aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80109ae:	4604      	mov	r4, r0
 80109b0:	6003      	str	r3, [r0, #0]
 80109b2:	f04f 0900 	mov.w	r9, #0
 80109b6:	07eb      	lsls	r3, r5, #31
 80109b8:	d50a      	bpl.n	80109d0 <__pow5mult+0x84>
 80109ba:	4639      	mov	r1, r7
 80109bc:	4622      	mov	r2, r4
 80109be:	4630      	mov	r0, r6
 80109c0:	f7ff ff1a 	bl	80107f8 <__multiply>
 80109c4:	4639      	mov	r1, r7
 80109c6:	4680      	mov	r8, r0
 80109c8:	4630      	mov	r0, r6
 80109ca:	f7ff fe47 	bl	801065c <_Bfree>
 80109ce:	4647      	mov	r7, r8
 80109d0:	106d      	asrs	r5, r5, #1
 80109d2:	d00b      	beq.n	80109ec <__pow5mult+0xa0>
 80109d4:	6820      	ldr	r0, [r4, #0]
 80109d6:	b938      	cbnz	r0, 80109e8 <__pow5mult+0x9c>
 80109d8:	4622      	mov	r2, r4
 80109da:	4621      	mov	r1, r4
 80109dc:	4630      	mov	r0, r6
 80109de:	f7ff ff0b 	bl	80107f8 <__multiply>
 80109e2:	6020      	str	r0, [r4, #0]
 80109e4:	f8c0 9000 	str.w	r9, [r0]
 80109e8:	4604      	mov	r4, r0
 80109ea:	e7e4      	b.n	80109b6 <__pow5mult+0x6a>
 80109ec:	4638      	mov	r0, r7
 80109ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109f2:	bf00      	nop
 80109f4:	08011bd8 	.word	0x08011bd8
 80109f8:	080119a5 	.word	0x080119a5
 80109fc:	08011a88 	.word	0x08011a88

08010a00 <__lshift>:
 8010a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a04:	460c      	mov	r4, r1
 8010a06:	6849      	ldr	r1, [r1, #4]
 8010a08:	6923      	ldr	r3, [r4, #16]
 8010a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a0e:	68a3      	ldr	r3, [r4, #8]
 8010a10:	4607      	mov	r7, r0
 8010a12:	4691      	mov	r9, r2
 8010a14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a18:	f108 0601 	add.w	r6, r8, #1
 8010a1c:	42b3      	cmp	r3, r6
 8010a1e:	db0b      	blt.n	8010a38 <__lshift+0x38>
 8010a20:	4638      	mov	r0, r7
 8010a22:	f7ff fddb 	bl	80105dc <_Balloc>
 8010a26:	4605      	mov	r5, r0
 8010a28:	b948      	cbnz	r0, 8010a3e <__lshift+0x3e>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	4b2a      	ldr	r3, [pc, #168]	; (8010ad8 <__lshift+0xd8>)
 8010a2e:	482b      	ldr	r0, [pc, #172]	; (8010adc <__lshift+0xdc>)
 8010a30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010a34:	f000 fd14 	bl	8011460 <__assert_func>
 8010a38:	3101      	adds	r1, #1
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	e7ee      	b.n	8010a1c <__lshift+0x1c>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	f100 0114 	add.w	r1, r0, #20
 8010a44:	f100 0210 	add.w	r2, r0, #16
 8010a48:	4618      	mov	r0, r3
 8010a4a:	4553      	cmp	r3, sl
 8010a4c:	db37      	blt.n	8010abe <__lshift+0xbe>
 8010a4e:	6920      	ldr	r0, [r4, #16]
 8010a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a54:	f104 0314 	add.w	r3, r4, #20
 8010a58:	f019 091f 	ands.w	r9, r9, #31
 8010a5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010a64:	d02f      	beq.n	8010ac6 <__lshift+0xc6>
 8010a66:	f1c9 0e20 	rsb	lr, r9, #32
 8010a6a:	468a      	mov	sl, r1
 8010a6c:	f04f 0c00 	mov.w	ip, #0
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	fa02 f209 	lsl.w	r2, r2, r9
 8010a76:	ea42 020c 	orr.w	r2, r2, ip
 8010a7a:	f84a 2b04 	str.w	r2, [sl], #4
 8010a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a82:	4298      	cmp	r0, r3
 8010a84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010a88:	d8f2      	bhi.n	8010a70 <__lshift+0x70>
 8010a8a:	1b03      	subs	r3, r0, r4
 8010a8c:	3b15      	subs	r3, #21
 8010a8e:	f023 0303 	bic.w	r3, r3, #3
 8010a92:	3304      	adds	r3, #4
 8010a94:	f104 0215 	add.w	r2, r4, #21
 8010a98:	4290      	cmp	r0, r2
 8010a9a:	bf38      	it	cc
 8010a9c:	2304      	movcc	r3, #4
 8010a9e:	f841 c003 	str.w	ip, [r1, r3]
 8010aa2:	f1bc 0f00 	cmp.w	ip, #0
 8010aa6:	d001      	beq.n	8010aac <__lshift+0xac>
 8010aa8:	f108 0602 	add.w	r6, r8, #2
 8010aac:	3e01      	subs	r6, #1
 8010aae:	4638      	mov	r0, r7
 8010ab0:	612e      	str	r6, [r5, #16]
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	f7ff fdd2 	bl	801065c <_Bfree>
 8010ab8:	4628      	mov	r0, r5
 8010aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	e7c1      	b.n	8010a4a <__lshift+0x4a>
 8010ac6:	3904      	subs	r1, #4
 8010ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ad0:	4298      	cmp	r0, r3
 8010ad2:	d8f9      	bhi.n	8010ac8 <__lshift+0xc8>
 8010ad4:	e7ea      	b.n	8010aac <__lshift+0xac>
 8010ad6:	bf00      	nop
 8010ad8:	08011a17 	.word	0x08011a17
 8010adc:	08011a88 	.word	0x08011a88

08010ae0 <__mcmp>:
 8010ae0:	b530      	push	{r4, r5, lr}
 8010ae2:	6902      	ldr	r2, [r0, #16]
 8010ae4:	690c      	ldr	r4, [r1, #16]
 8010ae6:	1b12      	subs	r2, r2, r4
 8010ae8:	d10e      	bne.n	8010b08 <__mcmp+0x28>
 8010aea:	f100 0314 	add.w	r3, r0, #20
 8010aee:	3114      	adds	r1, #20
 8010af0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010af4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010af8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010afc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010b00:	42a5      	cmp	r5, r4
 8010b02:	d003      	beq.n	8010b0c <__mcmp+0x2c>
 8010b04:	d305      	bcc.n	8010b12 <__mcmp+0x32>
 8010b06:	2201      	movs	r2, #1
 8010b08:	4610      	mov	r0, r2
 8010b0a:	bd30      	pop	{r4, r5, pc}
 8010b0c:	4283      	cmp	r3, r0
 8010b0e:	d3f3      	bcc.n	8010af8 <__mcmp+0x18>
 8010b10:	e7fa      	b.n	8010b08 <__mcmp+0x28>
 8010b12:	f04f 32ff 	mov.w	r2, #4294967295
 8010b16:	e7f7      	b.n	8010b08 <__mcmp+0x28>

08010b18 <__mdiff>:
 8010b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	4606      	mov	r6, r0
 8010b20:	4611      	mov	r1, r2
 8010b22:	4620      	mov	r0, r4
 8010b24:	4690      	mov	r8, r2
 8010b26:	f7ff ffdb 	bl	8010ae0 <__mcmp>
 8010b2a:	1e05      	subs	r5, r0, #0
 8010b2c:	d110      	bne.n	8010b50 <__mdiff+0x38>
 8010b2e:	4629      	mov	r1, r5
 8010b30:	4630      	mov	r0, r6
 8010b32:	f7ff fd53 	bl	80105dc <_Balloc>
 8010b36:	b930      	cbnz	r0, 8010b46 <__mdiff+0x2e>
 8010b38:	4b3a      	ldr	r3, [pc, #232]	; (8010c24 <__mdiff+0x10c>)
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	f240 2132 	movw	r1, #562	; 0x232
 8010b40:	4839      	ldr	r0, [pc, #228]	; (8010c28 <__mdiff+0x110>)
 8010b42:	f000 fc8d 	bl	8011460 <__assert_func>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b50:	bfa4      	itt	ge
 8010b52:	4643      	movge	r3, r8
 8010b54:	46a0      	movge	r8, r4
 8010b56:	4630      	mov	r0, r6
 8010b58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b5c:	bfa6      	itte	ge
 8010b5e:	461c      	movge	r4, r3
 8010b60:	2500      	movge	r5, #0
 8010b62:	2501      	movlt	r5, #1
 8010b64:	f7ff fd3a 	bl	80105dc <_Balloc>
 8010b68:	b920      	cbnz	r0, 8010b74 <__mdiff+0x5c>
 8010b6a:	4b2e      	ldr	r3, [pc, #184]	; (8010c24 <__mdiff+0x10c>)
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010b72:	e7e5      	b.n	8010b40 <__mdiff+0x28>
 8010b74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b78:	6926      	ldr	r6, [r4, #16]
 8010b7a:	60c5      	str	r5, [r0, #12]
 8010b7c:	f104 0914 	add.w	r9, r4, #20
 8010b80:	f108 0514 	add.w	r5, r8, #20
 8010b84:	f100 0e14 	add.w	lr, r0, #20
 8010b88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010b8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010b90:	f108 0210 	add.w	r2, r8, #16
 8010b94:	46f2      	mov	sl, lr
 8010b96:	2100      	movs	r1, #0
 8010b98:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ba0:	fa1f f883 	uxth.w	r8, r3
 8010ba4:	fa11 f18b 	uxtah	r1, r1, fp
 8010ba8:	0c1b      	lsrs	r3, r3, #16
 8010baa:	eba1 0808 	sub.w	r8, r1, r8
 8010bae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010bb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010bb6:	fa1f f888 	uxth.w	r8, r8
 8010bba:	1419      	asrs	r1, r3, #16
 8010bbc:	454e      	cmp	r6, r9
 8010bbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010bc2:	f84a 3b04 	str.w	r3, [sl], #4
 8010bc6:	d8e7      	bhi.n	8010b98 <__mdiff+0x80>
 8010bc8:	1b33      	subs	r3, r6, r4
 8010bca:	3b15      	subs	r3, #21
 8010bcc:	f023 0303 	bic.w	r3, r3, #3
 8010bd0:	3304      	adds	r3, #4
 8010bd2:	3415      	adds	r4, #21
 8010bd4:	42a6      	cmp	r6, r4
 8010bd6:	bf38      	it	cc
 8010bd8:	2304      	movcc	r3, #4
 8010bda:	441d      	add	r5, r3
 8010bdc:	4473      	add	r3, lr
 8010bde:	469e      	mov	lr, r3
 8010be0:	462e      	mov	r6, r5
 8010be2:	4566      	cmp	r6, ip
 8010be4:	d30e      	bcc.n	8010c04 <__mdiff+0xec>
 8010be6:	f10c 0203 	add.w	r2, ip, #3
 8010bea:	1b52      	subs	r2, r2, r5
 8010bec:	f022 0203 	bic.w	r2, r2, #3
 8010bf0:	3d03      	subs	r5, #3
 8010bf2:	45ac      	cmp	ip, r5
 8010bf4:	bf38      	it	cc
 8010bf6:	2200      	movcc	r2, #0
 8010bf8:	441a      	add	r2, r3
 8010bfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010bfe:	b17b      	cbz	r3, 8010c20 <__mdiff+0x108>
 8010c00:	6107      	str	r7, [r0, #16]
 8010c02:	e7a3      	b.n	8010b4c <__mdiff+0x34>
 8010c04:	f856 8b04 	ldr.w	r8, [r6], #4
 8010c08:	fa11 f288 	uxtah	r2, r1, r8
 8010c0c:	1414      	asrs	r4, r2, #16
 8010c0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010c12:	b292      	uxth	r2, r2
 8010c14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010c18:	f84e 2b04 	str.w	r2, [lr], #4
 8010c1c:	1421      	asrs	r1, r4, #16
 8010c1e:	e7e0      	b.n	8010be2 <__mdiff+0xca>
 8010c20:	3f01      	subs	r7, #1
 8010c22:	e7ea      	b.n	8010bfa <__mdiff+0xe2>
 8010c24:	08011a17 	.word	0x08011a17
 8010c28:	08011a88 	.word	0x08011a88

08010c2c <__d2b>:
 8010c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c30:	4689      	mov	r9, r1
 8010c32:	2101      	movs	r1, #1
 8010c34:	ec57 6b10 	vmov	r6, r7, d0
 8010c38:	4690      	mov	r8, r2
 8010c3a:	f7ff fccf 	bl	80105dc <_Balloc>
 8010c3e:	4604      	mov	r4, r0
 8010c40:	b930      	cbnz	r0, 8010c50 <__d2b+0x24>
 8010c42:	4602      	mov	r2, r0
 8010c44:	4b25      	ldr	r3, [pc, #148]	; (8010cdc <__d2b+0xb0>)
 8010c46:	4826      	ldr	r0, [pc, #152]	; (8010ce0 <__d2b+0xb4>)
 8010c48:	f240 310a 	movw	r1, #778	; 0x30a
 8010c4c:	f000 fc08 	bl	8011460 <__assert_func>
 8010c50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010c54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c58:	bb35      	cbnz	r5, 8010ca8 <__d2b+0x7c>
 8010c5a:	2e00      	cmp	r6, #0
 8010c5c:	9301      	str	r3, [sp, #4]
 8010c5e:	d028      	beq.n	8010cb2 <__d2b+0x86>
 8010c60:	4668      	mov	r0, sp
 8010c62:	9600      	str	r6, [sp, #0]
 8010c64:	f7ff fd82 	bl	801076c <__lo0bits>
 8010c68:	9900      	ldr	r1, [sp, #0]
 8010c6a:	b300      	cbz	r0, 8010cae <__d2b+0x82>
 8010c6c:	9a01      	ldr	r2, [sp, #4]
 8010c6e:	f1c0 0320 	rsb	r3, r0, #32
 8010c72:	fa02 f303 	lsl.w	r3, r2, r3
 8010c76:	430b      	orrs	r3, r1
 8010c78:	40c2      	lsrs	r2, r0
 8010c7a:	6163      	str	r3, [r4, #20]
 8010c7c:	9201      	str	r2, [sp, #4]
 8010c7e:	9b01      	ldr	r3, [sp, #4]
 8010c80:	61a3      	str	r3, [r4, #24]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	bf14      	ite	ne
 8010c86:	2202      	movne	r2, #2
 8010c88:	2201      	moveq	r2, #1
 8010c8a:	6122      	str	r2, [r4, #16]
 8010c8c:	b1d5      	cbz	r5, 8010cc4 <__d2b+0x98>
 8010c8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c92:	4405      	add	r5, r0
 8010c94:	f8c9 5000 	str.w	r5, [r9]
 8010c98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c9c:	f8c8 0000 	str.w	r0, [r8]
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	b003      	add	sp, #12
 8010ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cac:	e7d5      	b.n	8010c5a <__d2b+0x2e>
 8010cae:	6161      	str	r1, [r4, #20]
 8010cb0:	e7e5      	b.n	8010c7e <__d2b+0x52>
 8010cb2:	a801      	add	r0, sp, #4
 8010cb4:	f7ff fd5a 	bl	801076c <__lo0bits>
 8010cb8:	9b01      	ldr	r3, [sp, #4]
 8010cba:	6163      	str	r3, [r4, #20]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	6122      	str	r2, [r4, #16]
 8010cc0:	3020      	adds	r0, #32
 8010cc2:	e7e3      	b.n	8010c8c <__d2b+0x60>
 8010cc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ccc:	f8c9 0000 	str.w	r0, [r9]
 8010cd0:	6918      	ldr	r0, [r3, #16]
 8010cd2:	f7ff fd2b 	bl	801072c <__hi0bits>
 8010cd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010cda:	e7df      	b.n	8010c9c <__d2b+0x70>
 8010cdc:	08011a17 	.word	0x08011a17
 8010ce0:	08011a88 	.word	0x08011a88

08010ce4 <_calloc_r>:
 8010ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ce6:	fba1 2402 	umull	r2, r4, r1, r2
 8010cea:	b94c      	cbnz	r4, 8010d00 <_calloc_r+0x1c>
 8010cec:	4611      	mov	r1, r2
 8010cee:	9201      	str	r2, [sp, #4]
 8010cf0:	f000 f87a 	bl	8010de8 <_malloc_r>
 8010cf4:	9a01      	ldr	r2, [sp, #4]
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	b930      	cbnz	r0, 8010d08 <_calloc_r+0x24>
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	b003      	add	sp, #12
 8010cfe:	bd30      	pop	{r4, r5, pc}
 8010d00:	220c      	movs	r2, #12
 8010d02:	6002      	str	r2, [r0, #0]
 8010d04:	2500      	movs	r5, #0
 8010d06:	e7f8      	b.n	8010cfa <_calloc_r+0x16>
 8010d08:	4621      	mov	r1, r4
 8010d0a:	f7fe f837 	bl	800ed7c <memset>
 8010d0e:	e7f4      	b.n	8010cfa <_calloc_r+0x16>

08010d10 <_free_r>:
 8010d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d12:	2900      	cmp	r1, #0
 8010d14:	d044      	beq.n	8010da0 <_free_r+0x90>
 8010d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d1a:	9001      	str	r0, [sp, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d22:	bfb8      	it	lt
 8010d24:	18e4      	addlt	r4, r4, r3
 8010d26:	f000 fd27 	bl	8011778 <__malloc_lock>
 8010d2a:	4a1e      	ldr	r2, [pc, #120]	; (8010da4 <_free_r+0x94>)
 8010d2c:	9801      	ldr	r0, [sp, #4]
 8010d2e:	6813      	ldr	r3, [r2, #0]
 8010d30:	b933      	cbnz	r3, 8010d40 <_free_r+0x30>
 8010d32:	6063      	str	r3, [r4, #4]
 8010d34:	6014      	str	r4, [r2, #0]
 8010d36:	b003      	add	sp, #12
 8010d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d3c:	f000 bd22 	b.w	8011784 <__malloc_unlock>
 8010d40:	42a3      	cmp	r3, r4
 8010d42:	d908      	bls.n	8010d56 <_free_r+0x46>
 8010d44:	6825      	ldr	r5, [r4, #0]
 8010d46:	1961      	adds	r1, r4, r5
 8010d48:	428b      	cmp	r3, r1
 8010d4a:	bf01      	itttt	eq
 8010d4c:	6819      	ldreq	r1, [r3, #0]
 8010d4e:	685b      	ldreq	r3, [r3, #4]
 8010d50:	1949      	addeq	r1, r1, r5
 8010d52:	6021      	streq	r1, [r4, #0]
 8010d54:	e7ed      	b.n	8010d32 <_free_r+0x22>
 8010d56:	461a      	mov	r2, r3
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	b10b      	cbz	r3, 8010d60 <_free_r+0x50>
 8010d5c:	42a3      	cmp	r3, r4
 8010d5e:	d9fa      	bls.n	8010d56 <_free_r+0x46>
 8010d60:	6811      	ldr	r1, [r2, #0]
 8010d62:	1855      	adds	r5, r2, r1
 8010d64:	42a5      	cmp	r5, r4
 8010d66:	d10b      	bne.n	8010d80 <_free_r+0x70>
 8010d68:	6824      	ldr	r4, [r4, #0]
 8010d6a:	4421      	add	r1, r4
 8010d6c:	1854      	adds	r4, r2, r1
 8010d6e:	42a3      	cmp	r3, r4
 8010d70:	6011      	str	r1, [r2, #0]
 8010d72:	d1e0      	bne.n	8010d36 <_free_r+0x26>
 8010d74:	681c      	ldr	r4, [r3, #0]
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	6053      	str	r3, [r2, #4]
 8010d7a:	4421      	add	r1, r4
 8010d7c:	6011      	str	r1, [r2, #0]
 8010d7e:	e7da      	b.n	8010d36 <_free_r+0x26>
 8010d80:	d902      	bls.n	8010d88 <_free_r+0x78>
 8010d82:	230c      	movs	r3, #12
 8010d84:	6003      	str	r3, [r0, #0]
 8010d86:	e7d6      	b.n	8010d36 <_free_r+0x26>
 8010d88:	6825      	ldr	r5, [r4, #0]
 8010d8a:	1961      	adds	r1, r4, r5
 8010d8c:	428b      	cmp	r3, r1
 8010d8e:	bf04      	itt	eq
 8010d90:	6819      	ldreq	r1, [r3, #0]
 8010d92:	685b      	ldreq	r3, [r3, #4]
 8010d94:	6063      	str	r3, [r4, #4]
 8010d96:	bf04      	itt	eq
 8010d98:	1949      	addeq	r1, r1, r5
 8010d9a:	6021      	streq	r1, [r4, #0]
 8010d9c:	6054      	str	r4, [r2, #4]
 8010d9e:	e7ca      	b.n	8010d36 <_free_r+0x26>
 8010da0:	b003      	add	sp, #12
 8010da2:	bd30      	pop	{r4, r5, pc}
 8010da4:	2000474c 	.word	0x2000474c

08010da8 <sbrk_aligned>:
 8010da8:	b570      	push	{r4, r5, r6, lr}
 8010daa:	4e0e      	ldr	r6, [pc, #56]	; (8010de4 <sbrk_aligned+0x3c>)
 8010dac:	460c      	mov	r4, r1
 8010dae:	6831      	ldr	r1, [r6, #0]
 8010db0:	4605      	mov	r5, r0
 8010db2:	b911      	cbnz	r1, 8010dba <sbrk_aligned+0x12>
 8010db4:	f000 fa2e 	bl	8011214 <_sbrk_r>
 8010db8:	6030      	str	r0, [r6, #0]
 8010dba:	4621      	mov	r1, r4
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	f000 fa29 	bl	8011214 <_sbrk_r>
 8010dc2:	1c43      	adds	r3, r0, #1
 8010dc4:	d00a      	beq.n	8010ddc <sbrk_aligned+0x34>
 8010dc6:	1cc4      	adds	r4, r0, #3
 8010dc8:	f024 0403 	bic.w	r4, r4, #3
 8010dcc:	42a0      	cmp	r0, r4
 8010dce:	d007      	beq.n	8010de0 <sbrk_aligned+0x38>
 8010dd0:	1a21      	subs	r1, r4, r0
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f000 fa1e 	bl	8011214 <_sbrk_r>
 8010dd8:	3001      	adds	r0, #1
 8010dda:	d101      	bne.n	8010de0 <sbrk_aligned+0x38>
 8010ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8010de0:	4620      	mov	r0, r4
 8010de2:	bd70      	pop	{r4, r5, r6, pc}
 8010de4:	20004750 	.word	0x20004750

08010de8 <_malloc_r>:
 8010de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dec:	1ccd      	adds	r5, r1, #3
 8010dee:	f025 0503 	bic.w	r5, r5, #3
 8010df2:	3508      	adds	r5, #8
 8010df4:	2d0c      	cmp	r5, #12
 8010df6:	bf38      	it	cc
 8010df8:	250c      	movcc	r5, #12
 8010dfa:	2d00      	cmp	r5, #0
 8010dfc:	4607      	mov	r7, r0
 8010dfe:	db01      	blt.n	8010e04 <_malloc_r+0x1c>
 8010e00:	42a9      	cmp	r1, r5
 8010e02:	d905      	bls.n	8010e10 <_malloc_r+0x28>
 8010e04:	230c      	movs	r3, #12
 8010e06:	603b      	str	r3, [r7, #0]
 8010e08:	2600      	movs	r6, #0
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e10:	4e2e      	ldr	r6, [pc, #184]	; (8010ecc <_malloc_r+0xe4>)
 8010e12:	f000 fcb1 	bl	8011778 <__malloc_lock>
 8010e16:	6833      	ldr	r3, [r6, #0]
 8010e18:	461c      	mov	r4, r3
 8010e1a:	bb34      	cbnz	r4, 8010e6a <_malloc_r+0x82>
 8010e1c:	4629      	mov	r1, r5
 8010e1e:	4638      	mov	r0, r7
 8010e20:	f7ff ffc2 	bl	8010da8 <sbrk_aligned>
 8010e24:	1c43      	adds	r3, r0, #1
 8010e26:	4604      	mov	r4, r0
 8010e28:	d14d      	bne.n	8010ec6 <_malloc_r+0xde>
 8010e2a:	6834      	ldr	r4, [r6, #0]
 8010e2c:	4626      	mov	r6, r4
 8010e2e:	2e00      	cmp	r6, #0
 8010e30:	d140      	bne.n	8010eb4 <_malloc_r+0xcc>
 8010e32:	6823      	ldr	r3, [r4, #0]
 8010e34:	4631      	mov	r1, r6
 8010e36:	4638      	mov	r0, r7
 8010e38:	eb04 0803 	add.w	r8, r4, r3
 8010e3c:	f000 f9ea 	bl	8011214 <_sbrk_r>
 8010e40:	4580      	cmp	r8, r0
 8010e42:	d13a      	bne.n	8010eba <_malloc_r+0xd2>
 8010e44:	6821      	ldr	r1, [r4, #0]
 8010e46:	3503      	adds	r5, #3
 8010e48:	1a6d      	subs	r5, r5, r1
 8010e4a:	f025 0503 	bic.w	r5, r5, #3
 8010e4e:	3508      	adds	r5, #8
 8010e50:	2d0c      	cmp	r5, #12
 8010e52:	bf38      	it	cc
 8010e54:	250c      	movcc	r5, #12
 8010e56:	4629      	mov	r1, r5
 8010e58:	4638      	mov	r0, r7
 8010e5a:	f7ff ffa5 	bl	8010da8 <sbrk_aligned>
 8010e5e:	3001      	adds	r0, #1
 8010e60:	d02b      	beq.n	8010eba <_malloc_r+0xd2>
 8010e62:	6823      	ldr	r3, [r4, #0]
 8010e64:	442b      	add	r3, r5
 8010e66:	6023      	str	r3, [r4, #0]
 8010e68:	e00e      	b.n	8010e88 <_malloc_r+0xa0>
 8010e6a:	6822      	ldr	r2, [r4, #0]
 8010e6c:	1b52      	subs	r2, r2, r5
 8010e6e:	d41e      	bmi.n	8010eae <_malloc_r+0xc6>
 8010e70:	2a0b      	cmp	r2, #11
 8010e72:	d916      	bls.n	8010ea2 <_malloc_r+0xba>
 8010e74:	1961      	adds	r1, r4, r5
 8010e76:	42a3      	cmp	r3, r4
 8010e78:	6025      	str	r5, [r4, #0]
 8010e7a:	bf18      	it	ne
 8010e7c:	6059      	strne	r1, [r3, #4]
 8010e7e:	6863      	ldr	r3, [r4, #4]
 8010e80:	bf08      	it	eq
 8010e82:	6031      	streq	r1, [r6, #0]
 8010e84:	5162      	str	r2, [r4, r5]
 8010e86:	604b      	str	r3, [r1, #4]
 8010e88:	4638      	mov	r0, r7
 8010e8a:	f104 060b 	add.w	r6, r4, #11
 8010e8e:	f000 fc79 	bl	8011784 <__malloc_unlock>
 8010e92:	f026 0607 	bic.w	r6, r6, #7
 8010e96:	1d23      	adds	r3, r4, #4
 8010e98:	1af2      	subs	r2, r6, r3
 8010e9a:	d0b6      	beq.n	8010e0a <_malloc_r+0x22>
 8010e9c:	1b9b      	subs	r3, r3, r6
 8010e9e:	50a3      	str	r3, [r4, r2]
 8010ea0:	e7b3      	b.n	8010e0a <_malloc_r+0x22>
 8010ea2:	6862      	ldr	r2, [r4, #4]
 8010ea4:	42a3      	cmp	r3, r4
 8010ea6:	bf0c      	ite	eq
 8010ea8:	6032      	streq	r2, [r6, #0]
 8010eaa:	605a      	strne	r2, [r3, #4]
 8010eac:	e7ec      	b.n	8010e88 <_malloc_r+0xa0>
 8010eae:	4623      	mov	r3, r4
 8010eb0:	6864      	ldr	r4, [r4, #4]
 8010eb2:	e7b2      	b.n	8010e1a <_malloc_r+0x32>
 8010eb4:	4634      	mov	r4, r6
 8010eb6:	6876      	ldr	r6, [r6, #4]
 8010eb8:	e7b9      	b.n	8010e2e <_malloc_r+0x46>
 8010eba:	230c      	movs	r3, #12
 8010ebc:	603b      	str	r3, [r7, #0]
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	f000 fc60 	bl	8011784 <__malloc_unlock>
 8010ec4:	e7a1      	b.n	8010e0a <_malloc_r+0x22>
 8010ec6:	6025      	str	r5, [r4, #0]
 8010ec8:	e7de      	b.n	8010e88 <_malloc_r+0xa0>
 8010eca:	bf00      	nop
 8010ecc:	2000474c 	.word	0x2000474c

08010ed0 <__sfputc_r>:
 8010ed0:	6893      	ldr	r3, [r2, #8]
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	b410      	push	{r4}
 8010ed8:	6093      	str	r3, [r2, #8]
 8010eda:	da08      	bge.n	8010eee <__sfputc_r+0x1e>
 8010edc:	6994      	ldr	r4, [r2, #24]
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	db01      	blt.n	8010ee6 <__sfputc_r+0x16>
 8010ee2:	290a      	cmp	r1, #10
 8010ee4:	d103      	bne.n	8010eee <__sfputc_r+0x1e>
 8010ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eea:	f000 b9e7 	b.w	80112bc <__swbuf_r>
 8010eee:	6813      	ldr	r3, [r2, #0]
 8010ef0:	1c58      	adds	r0, r3, #1
 8010ef2:	6010      	str	r0, [r2, #0]
 8010ef4:	7019      	strb	r1, [r3, #0]
 8010ef6:	4608      	mov	r0, r1
 8010ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <__sfputs_r>:
 8010efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f00:	4606      	mov	r6, r0
 8010f02:	460f      	mov	r7, r1
 8010f04:	4614      	mov	r4, r2
 8010f06:	18d5      	adds	r5, r2, r3
 8010f08:	42ac      	cmp	r4, r5
 8010f0a:	d101      	bne.n	8010f10 <__sfputs_r+0x12>
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	e007      	b.n	8010f20 <__sfputs_r+0x22>
 8010f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f14:	463a      	mov	r2, r7
 8010f16:	4630      	mov	r0, r6
 8010f18:	f7ff ffda 	bl	8010ed0 <__sfputc_r>
 8010f1c:	1c43      	adds	r3, r0, #1
 8010f1e:	d1f3      	bne.n	8010f08 <__sfputs_r+0xa>
 8010f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f24 <_vfiprintf_r>:
 8010f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f28:	460d      	mov	r5, r1
 8010f2a:	b09d      	sub	sp, #116	; 0x74
 8010f2c:	4614      	mov	r4, r2
 8010f2e:	4698      	mov	r8, r3
 8010f30:	4606      	mov	r6, r0
 8010f32:	b118      	cbz	r0, 8010f3c <_vfiprintf_r+0x18>
 8010f34:	6983      	ldr	r3, [r0, #24]
 8010f36:	b90b      	cbnz	r3, 8010f3c <_vfiprintf_r+0x18>
 8010f38:	f7ff fa94 	bl	8010464 <__sinit>
 8010f3c:	4b89      	ldr	r3, [pc, #548]	; (8011164 <_vfiprintf_r+0x240>)
 8010f3e:	429d      	cmp	r5, r3
 8010f40:	d11b      	bne.n	8010f7a <_vfiprintf_r+0x56>
 8010f42:	6875      	ldr	r5, [r6, #4]
 8010f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f46:	07d9      	lsls	r1, r3, #31
 8010f48:	d405      	bmi.n	8010f56 <_vfiprintf_r+0x32>
 8010f4a:	89ab      	ldrh	r3, [r5, #12]
 8010f4c:	059a      	lsls	r2, r3, #22
 8010f4e:	d402      	bmi.n	8010f56 <_vfiprintf_r+0x32>
 8010f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f52:	f7ff fb2a 	bl	80105aa <__retarget_lock_acquire_recursive>
 8010f56:	89ab      	ldrh	r3, [r5, #12]
 8010f58:	071b      	lsls	r3, r3, #28
 8010f5a:	d501      	bpl.n	8010f60 <_vfiprintf_r+0x3c>
 8010f5c:	692b      	ldr	r3, [r5, #16]
 8010f5e:	b9eb      	cbnz	r3, 8010f9c <_vfiprintf_r+0x78>
 8010f60:	4629      	mov	r1, r5
 8010f62:	4630      	mov	r0, r6
 8010f64:	f000 fa0e 	bl	8011384 <__swsetup_r>
 8010f68:	b1c0      	cbz	r0, 8010f9c <_vfiprintf_r+0x78>
 8010f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f6c:	07dc      	lsls	r4, r3, #31
 8010f6e:	d50e      	bpl.n	8010f8e <_vfiprintf_r+0x6a>
 8010f70:	f04f 30ff 	mov.w	r0, #4294967295
 8010f74:	b01d      	add	sp, #116	; 0x74
 8010f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7a:	4b7b      	ldr	r3, [pc, #492]	; (8011168 <_vfiprintf_r+0x244>)
 8010f7c:	429d      	cmp	r5, r3
 8010f7e:	d101      	bne.n	8010f84 <_vfiprintf_r+0x60>
 8010f80:	68b5      	ldr	r5, [r6, #8]
 8010f82:	e7df      	b.n	8010f44 <_vfiprintf_r+0x20>
 8010f84:	4b79      	ldr	r3, [pc, #484]	; (801116c <_vfiprintf_r+0x248>)
 8010f86:	429d      	cmp	r5, r3
 8010f88:	bf08      	it	eq
 8010f8a:	68f5      	ldreq	r5, [r6, #12]
 8010f8c:	e7da      	b.n	8010f44 <_vfiprintf_r+0x20>
 8010f8e:	89ab      	ldrh	r3, [r5, #12]
 8010f90:	0598      	lsls	r0, r3, #22
 8010f92:	d4ed      	bmi.n	8010f70 <_vfiprintf_r+0x4c>
 8010f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f96:	f7ff fb09 	bl	80105ac <__retarget_lock_release_recursive>
 8010f9a:	e7e9      	b.n	8010f70 <_vfiprintf_r+0x4c>
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa0:	2320      	movs	r3, #32
 8010fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010faa:	2330      	movs	r3, #48	; 0x30
 8010fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011170 <_vfiprintf_r+0x24c>
 8010fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fb4:	f04f 0901 	mov.w	r9, #1
 8010fb8:	4623      	mov	r3, r4
 8010fba:	469a      	mov	sl, r3
 8010fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fc0:	b10a      	cbz	r2, 8010fc6 <_vfiprintf_r+0xa2>
 8010fc2:	2a25      	cmp	r2, #37	; 0x25
 8010fc4:	d1f9      	bne.n	8010fba <_vfiprintf_r+0x96>
 8010fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8010fca:	d00b      	beq.n	8010fe4 <_vfiprintf_r+0xc0>
 8010fcc:	465b      	mov	r3, fp
 8010fce:	4622      	mov	r2, r4
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	f7ff ff93 	bl	8010efe <__sfputs_r>
 8010fd8:	3001      	adds	r0, #1
 8010fda:	f000 80aa 	beq.w	8011132 <_vfiprintf_r+0x20e>
 8010fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fe0:	445a      	add	r2, fp
 8010fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8010fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	f000 80a2 	beq.w	8011132 <_vfiprintf_r+0x20e>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ff8:	f10a 0a01 	add.w	sl, sl, #1
 8010ffc:	9304      	str	r3, [sp, #16]
 8010ffe:	9307      	str	r3, [sp, #28]
 8011000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011004:	931a      	str	r3, [sp, #104]	; 0x68
 8011006:	4654      	mov	r4, sl
 8011008:	2205      	movs	r2, #5
 801100a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801100e:	4858      	ldr	r0, [pc, #352]	; (8011170 <_vfiprintf_r+0x24c>)
 8011010:	f7ef f90e 	bl	8000230 <memchr>
 8011014:	9a04      	ldr	r2, [sp, #16]
 8011016:	b9d8      	cbnz	r0, 8011050 <_vfiprintf_r+0x12c>
 8011018:	06d1      	lsls	r1, r2, #27
 801101a:	bf44      	itt	mi
 801101c:	2320      	movmi	r3, #32
 801101e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011022:	0713      	lsls	r3, r2, #28
 8011024:	bf44      	itt	mi
 8011026:	232b      	movmi	r3, #43	; 0x2b
 8011028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801102c:	f89a 3000 	ldrb.w	r3, [sl]
 8011030:	2b2a      	cmp	r3, #42	; 0x2a
 8011032:	d015      	beq.n	8011060 <_vfiprintf_r+0x13c>
 8011034:	9a07      	ldr	r2, [sp, #28]
 8011036:	4654      	mov	r4, sl
 8011038:	2000      	movs	r0, #0
 801103a:	f04f 0c0a 	mov.w	ip, #10
 801103e:	4621      	mov	r1, r4
 8011040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011044:	3b30      	subs	r3, #48	; 0x30
 8011046:	2b09      	cmp	r3, #9
 8011048:	d94e      	bls.n	80110e8 <_vfiprintf_r+0x1c4>
 801104a:	b1b0      	cbz	r0, 801107a <_vfiprintf_r+0x156>
 801104c:	9207      	str	r2, [sp, #28]
 801104e:	e014      	b.n	801107a <_vfiprintf_r+0x156>
 8011050:	eba0 0308 	sub.w	r3, r0, r8
 8011054:	fa09 f303 	lsl.w	r3, r9, r3
 8011058:	4313      	orrs	r3, r2
 801105a:	9304      	str	r3, [sp, #16]
 801105c:	46a2      	mov	sl, r4
 801105e:	e7d2      	b.n	8011006 <_vfiprintf_r+0xe2>
 8011060:	9b03      	ldr	r3, [sp, #12]
 8011062:	1d19      	adds	r1, r3, #4
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	9103      	str	r1, [sp, #12]
 8011068:	2b00      	cmp	r3, #0
 801106a:	bfbb      	ittet	lt
 801106c:	425b      	neglt	r3, r3
 801106e:	f042 0202 	orrlt.w	r2, r2, #2
 8011072:	9307      	strge	r3, [sp, #28]
 8011074:	9307      	strlt	r3, [sp, #28]
 8011076:	bfb8      	it	lt
 8011078:	9204      	strlt	r2, [sp, #16]
 801107a:	7823      	ldrb	r3, [r4, #0]
 801107c:	2b2e      	cmp	r3, #46	; 0x2e
 801107e:	d10c      	bne.n	801109a <_vfiprintf_r+0x176>
 8011080:	7863      	ldrb	r3, [r4, #1]
 8011082:	2b2a      	cmp	r3, #42	; 0x2a
 8011084:	d135      	bne.n	80110f2 <_vfiprintf_r+0x1ce>
 8011086:	9b03      	ldr	r3, [sp, #12]
 8011088:	1d1a      	adds	r2, r3, #4
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	9203      	str	r2, [sp, #12]
 801108e:	2b00      	cmp	r3, #0
 8011090:	bfb8      	it	lt
 8011092:	f04f 33ff 	movlt.w	r3, #4294967295
 8011096:	3402      	adds	r4, #2
 8011098:	9305      	str	r3, [sp, #20]
 801109a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011180 <_vfiprintf_r+0x25c>
 801109e:	7821      	ldrb	r1, [r4, #0]
 80110a0:	2203      	movs	r2, #3
 80110a2:	4650      	mov	r0, sl
 80110a4:	f7ef f8c4 	bl	8000230 <memchr>
 80110a8:	b140      	cbz	r0, 80110bc <_vfiprintf_r+0x198>
 80110aa:	2340      	movs	r3, #64	; 0x40
 80110ac:	eba0 000a 	sub.w	r0, r0, sl
 80110b0:	fa03 f000 	lsl.w	r0, r3, r0
 80110b4:	9b04      	ldr	r3, [sp, #16]
 80110b6:	4303      	orrs	r3, r0
 80110b8:	3401      	adds	r4, #1
 80110ba:	9304      	str	r3, [sp, #16]
 80110bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c0:	482c      	ldr	r0, [pc, #176]	; (8011174 <_vfiprintf_r+0x250>)
 80110c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110c6:	2206      	movs	r2, #6
 80110c8:	f7ef f8b2 	bl	8000230 <memchr>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d03f      	beq.n	8011150 <_vfiprintf_r+0x22c>
 80110d0:	4b29      	ldr	r3, [pc, #164]	; (8011178 <_vfiprintf_r+0x254>)
 80110d2:	bb1b      	cbnz	r3, 801111c <_vfiprintf_r+0x1f8>
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	3307      	adds	r3, #7
 80110d8:	f023 0307 	bic.w	r3, r3, #7
 80110dc:	3308      	adds	r3, #8
 80110de:	9303      	str	r3, [sp, #12]
 80110e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e2:	443b      	add	r3, r7
 80110e4:	9309      	str	r3, [sp, #36]	; 0x24
 80110e6:	e767      	b.n	8010fb8 <_vfiprintf_r+0x94>
 80110e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80110ec:	460c      	mov	r4, r1
 80110ee:	2001      	movs	r0, #1
 80110f0:	e7a5      	b.n	801103e <_vfiprintf_r+0x11a>
 80110f2:	2300      	movs	r3, #0
 80110f4:	3401      	adds	r4, #1
 80110f6:	9305      	str	r3, [sp, #20]
 80110f8:	4619      	mov	r1, r3
 80110fa:	f04f 0c0a 	mov.w	ip, #10
 80110fe:	4620      	mov	r0, r4
 8011100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011104:	3a30      	subs	r2, #48	; 0x30
 8011106:	2a09      	cmp	r2, #9
 8011108:	d903      	bls.n	8011112 <_vfiprintf_r+0x1ee>
 801110a:	2b00      	cmp	r3, #0
 801110c:	d0c5      	beq.n	801109a <_vfiprintf_r+0x176>
 801110e:	9105      	str	r1, [sp, #20]
 8011110:	e7c3      	b.n	801109a <_vfiprintf_r+0x176>
 8011112:	fb0c 2101 	mla	r1, ip, r1, r2
 8011116:	4604      	mov	r4, r0
 8011118:	2301      	movs	r3, #1
 801111a:	e7f0      	b.n	80110fe <_vfiprintf_r+0x1da>
 801111c:	ab03      	add	r3, sp, #12
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	462a      	mov	r2, r5
 8011122:	4b16      	ldr	r3, [pc, #88]	; (801117c <_vfiprintf_r+0x258>)
 8011124:	a904      	add	r1, sp, #16
 8011126:	4630      	mov	r0, r6
 8011128:	f7fd fed0 	bl	800eecc <_printf_float>
 801112c:	4607      	mov	r7, r0
 801112e:	1c78      	adds	r0, r7, #1
 8011130:	d1d6      	bne.n	80110e0 <_vfiprintf_r+0x1bc>
 8011132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011134:	07d9      	lsls	r1, r3, #31
 8011136:	d405      	bmi.n	8011144 <_vfiprintf_r+0x220>
 8011138:	89ab      	ldrh	r3, [r5, #12]
 801113a:	059a      	lsls	r2, r3, #22
 801113c:	d402      	bmi.n	8011144 <_vfiprintf_r+0x220>
 801113e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011140:	f7ff fa34 	bl	80105ac <__retarget_lock_release_recursive>
 8011144:	89ab      	ldrh	r3, [r5, #12]
 8011146:	065b      	lsls	r3, r3, #25
 8011148:	f53f af12 	bmi.w	8010f70 <_vfiprintf_r+0x4c>
 801114c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801114e:	e711      	b.n	8010f74 <_vfiprintf_r+0x50>
 8011150:	ab03      	add	r3, sp, #12
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	462a      	mov	r2, r5
 8011156:	4b09      	ldr	r3, [pc, #36]	; (801117c <_vfiprintf_r+0x258>)
 8011158:	a904      	add	r1, sp, #16
 801115a:	4630      	mov	r0, r6
 801115c:	f7fe f95a 	bl	800f414 <_printf_i>
 8011160:	e7e4      	b.n	801112c <_vfiprintf_r+0x208>
 8011162:	bf00      	nop
 8011164:	08011a48 	.word	0x08011a48
 8011168:	08011a68 	.word	0x08011a68
 801116c:	08011a28 	.word	0x08011a28
 8011170:	08011be4 	.word	0x08011be4
 8011174:	08011bee 	.word	0x08011bee
 8011178:	0800eecd 	.word	0x0800eecd
 801117c:	08010eff 	.word	0x08010eff
 8011180:	08011bea 	.word	0x08011bea

08011184 <_putc_r>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	460d      	mov	r5, r1
 8011188:	4614      	mov	r4, r2
 801118a:	4606      	mov	r6, r0
 801118c:	b118      	cbz	r0, 8011196 <_putc_r+0x12>
 801118e:	6983      	ldr	r3, [r0, #24]
 8011190:	b90b      	cbnz	r3, 8011196 <_putc_r+0x12>
 8011192:	f7ff f967 	bl	8010464 <__sinit>
 8011196:	4b1c      	ldr	r3, [pc, #112]	; (8011208 <_putc_r+0x84>)
 8011198:	429c      	cmp	r4, r3
 801119a:	d124      	bne.n	80111e6 <_putc_r+0x62>
 801119c:	6874      	ldr	r4, [r6, #4]
 801119e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111a0:	07d8      	lsls	r0, r3, #31
 80111a2:	d405      	bmi.n	80111b0 <_putc_r+0x2c>
 80111a4:	89a3      	ldrh	r3, [r4, #12]
 80111a6:	0599      	lsls	r1, r3, #22
 80111a8:	d402      	bmi.n	80111b0 <_putc_r+0x2c>
 80111aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ac:	f7ff f9fd 	bl	80105aa <__retarget_lock_acquire_recursive>
 80111b0:	68a3      	ldr	r3, [r4, #8]
 80111b2:	3b01      	subs	r3, #1
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	60a3      	str	r3, [r4, #8]
 80111b8:	da05      	bge.n	80111c6 <_putc_r+0x42>
 80111ba:	69a2      	ldr	r2, [r4, #24]
 80111bc:	4293      	cmp	r3, r2
 80111be:	db1c      	blt.n	80111fa <_putc_r+0x76>
 80111c0:	b2eb      	uxtb	r3, r5
 80111c2:	2b0a      	cmp	r3, #10
 80111c4:	d019      	beq.n	80111fa <_putc_r+0x76>
 80111c6:	6823      	ldr	r3, [r4, #0]
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	6022      	str	r2, [r4, #0]
 80111cc:	701d      	strb	r5, [r3, #0]
 80111ce:	b2ed      	uxtb	r5, r5
 80111d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111d2:	07da      	lsls	r2, r3, #31
 80111d4:	d405      	bmi.n	80111e2 <_putc_r+0x5e>
 80111d6:	89a3      	ldrh	r3, [r4, #12]
 80111d8:	059b      	lsls	r3, r3, #22
 80111da:	d402      	bmi.n	80111e2 <_putc_r+0x5e>
 80111dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111de:	f7ff f9e5 	bl	80105ac <__retarget_lock_release_recursive>
 80111e2:	4628      	mov	r0, r5
 80111e4:	bd70      	pop	{r4, r5, r6, pc}
 80111e6:	4b09      	ldr	r3, [pc, #36]	; (801120c <_putc_r+0x88>)
 80111e8:	429c      	cmp	r4, r3
 80111ea:	d101      	bne.n	80111f0 <_putc_r+0x6c>
 80111ec:	68b4      	ldr	r4, [r6, #8]
 80111ee:	e7d6      	b.n	801119e <_putc_r+0x1a>
 80111f0:	4b07      	ldr	r3, [pc, #28]	; (8011210 <_putc_r+0x8c>)
 80111f2:	429c      	cmp	r4, r3
 80111f4:	bf08      	it	eq
 80111f6:	68f4      	ldreq	r4, [r6, #12]
 80111f8:	e7d1      	b.n	801119e <_putc_r+0x1a>
 80111fa:	4629      	mov	r1, r5
 80111fc:	4622      	mov	r2, r4
 80111fe:	4630      	mov	r0, r6
 8011200:	f000 f85c 	bl	80112bc <__swbuf_r>
 8011204:	4605      	mov	r5, r0
 8011206:	e7e3      	b.n	80111d0 <_putc_r+0x4c>
 8011208:	08011a48 	.word	0x08011a48
 801120c:	08011a68 	.word	0x08011a68
 8011210:	08011a28 	.word	0x08011a28

08011214 <_sbrk_r>:
 8011214:	b538      	push	{r3, r4, r5, lr}
 8011216:	4d06      	ldr	r5, [pc, #24]	; (8011230 <_sbrk_r+0x1c>)
 8011218:	2300      	movs	r3, #0
 801121a:	4604      	mov	r4, r0
 801121c:	4608      	mov	r0, r1
 801121e:	602b      	str	r3, [r5, #0]
 8011220:	f7f0 feae 	bl	8001f80 <_sbrk>
 8011224:	1c43      	adds	r3, r0, #1
 8011226:	d102      	bne.n	801122e <_sbrk_r+0x1a>
 8011228:	682b      	ldr	r3, [r5, #0]
 801122a:	b103      	cbz	r3, 801122e <_sbrk_r+0x1a>
 801122c:	6023      	str	r3, [r4, #0]
 801122e:	bd38      	pop	{r3, r4, r5, pc}
 8011230:	20004754 	.word	0x20004754

08011234 <__sread>:
 8011234:	b510      	push	{r4, lr}
 8011236:	460c      	mov	r4, r1
 8011238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801123c:	f000 faa8 	bl	8011790 <_read_r>
 8011240:	2800      	cmp	r0, #0
 8011242:	bfab      	itete	ge
 8011244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011246:	89a3      	ldrhlt	r3, [r4, #12]
 8011248:	181b      	addge	r3, r3, r0
 801124a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801124e:	bfac      	ite	ge
 8011250:	6563      	strge	r3, [r4, #84]	; 0x54
 8011252:	81a3      	strhlt	r3, [r4, #12]
 8011254:	bd10      	pop	{r4, pc}

08011256 <__swrite>:
 8011256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801125a:	461f      	mov	r7, r3
 801125c:	898b      	ldrh	r3, [r1, #12]
 801125e:	05db      	lsls	r3, r3, #23
 8011260:	4605      	mov	r5, r0
 8011262:	460c      	mov	r4, r1
 8011264:	4616      	mov	r6, r2
 8011266:	d505      	bpl.n	8011274 <__swrite+0x1e>
 8011268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801126c:	2302      	movs	r3, #2
 801126e:	2200      	movs	r2, #0
 8011270:	f000 f9f8 	bl	8011664 <_lseek_r>
 8011274:	89a3      	ldrh	r3, [r4, #12]
 8011276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801127a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801127e:	81a3      	strh	r3, [r4, #12]
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	4628      	mov	r0, r5
 8011286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801128a:	f000 b869 	b.w	8011360 <_write_r>

0801128e <__sseek>:
 801128e:	b510      	push	{r4, lr}
 8011290:	460c      	mov	r4, r1
 8011292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011296:	f000 f9e5 	bl	8011664 <_lseek_r>
 801129a:	1c43      	adds	r3, r0, #1
 801129c:	89a3      	ldrh	r3, [r4, #12]
 801129e:	bf15      	itete	ne
 80112a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80112a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80112a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80112aa:	81a3      	strheq	r3, [r4, #12]
 80112ac:	bf18      	it	ne
 80112ae:	81a3      	strhne	r3, [r4, #12]
 80112b0:	bd10      	pop	{r4, pc}

080112b2 <__sclose>:
 80112b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b6:	f000 b8f1 	b.w	801149c <_close_r>
	...

080112bc <__swbuf_r>:
 80112bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112be:	460e      	mov	r6, r1
 80112c0:	4614      	mov	r4, r2
 80112c2:	4605      	mov	r5, r0
 80112c4:	b118      	cbz	r0, 80112ce <__swbuf_r+0x12>
 80112c6:	6983      	ldr	r3, [r0, #24]
 80112c8:	b90b      	cbnz	r3, 80112ce <__swbuf_r+0x12>
 80112ca:	f7ff f8cb 	bl	8010464 <__sinit>
 80112ce:	4b21      	ldr	r3, [pc, #132]	; (8011354 <__swbuf_r+0x98>)
 80112d0:	429c      	cmp	r4, r3
 80112d2:	d12b      	bne.n	801132c <__swbuf_r+0x70>
 80112d4:	686c      	ldr	r4, [r5, #4]
 80112d6:	69a3      	ldr	r3, [r4, #24]
 80112d8:	60a3      	str	r3, [r4, #8]
 80112da:	89a3      	ldrh	r3, [r4, #12]
 80112dc:	071a      	lsls	r2, r3, #28
 80112de:	d52f      	bpl.n	8011340 <__swbuf_r+0x84>
 80112e0:	6923      	ldr	r3, [r4, #16]
 80112e2:	b36b      	cbz	r3, 8011340 <__swbuf_r+0x84>
 80112e4:	6923      	ldr	r3, [r4, #16]
 80112e6:	6820      	ldr	r0, [r4, #0]
 80112e8:	1ac0      	subs	r0, r0, r3
 80112ea:	6963      	ldr	r3, [r4, #20]
 80112ec:	b2f6      	uxtb	r6, r6
 80112ee:	4283      	cmp	r3, r0
 80112f0:	4637      	mov	r7, r6
 80112f2:	dc04      	bgt.n	80112fe <__swbuf_r+0x42>
 80112f4:	4621      	mov	r1, r4
 80112f6:	4628      	mov	r0, r5
 80112f8:	f000 f966 	bl	80115c8 <_fflush_r>
 80112fc:	bb30      	cbnz	r0, 801134c <__swbuf_r+0x90>
 80112fe:	68a3      	ldr	r3, [r4, #8]
 8011300:	3b01      	subs	r3, #1
 8011302:	60a3      	str	r3, [r4, #8]
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	1c5a      	adds	r2, r3, #1
 8011308:	6022      	str	r2, [r4, #0]
 801130a:	701e      	strb	r6, [r3, #0]
 801130c:	6963      	ldr	r3, [r4, #20]
 801130e:	3001      	adds	r0, #1
 8011310:	4283      	cmp	r3, r0
 8011312:	d004      	beq.n	801131e <__swbuf_r+0x62>
 8011314:	89a3      	ldrh	r3, [r4, #12]
 8011316:	07db      	lsls	r3, r3, #31
 8011318:	d506      	bpl.n	8011328 <__swbuf_r+0x6c>
 801131a:	2e0a      	cmp	r6, #10
 801131c:	d104      	bne.n	8011328 <__swbuf_r+0x6c>
 801131e:	4621      	mov	r1, r4
 8011320:	4628      	mov	r0, r5
 8011322:	f000 f951 	bl	80115c8 <_fflush_r>
 8011326:	b988      	cbnz	r0, 801134c <__swbuf_r+0x90>
 8011328:	4638      	mov	r0, r7
 801132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801132c:	4b0a      	ldr	r3, [pc, #40]	; (8011358 <__swbuf_r+0x9c>)
 801132e:	429c      	cmp	r4, r3
 8011330:	d101      	bne.n	8011336 <__swbuf_r+0x7a>
 8011332:	68ac      	ldr	r4, [r5, #8]
 8011334:	e7cf      	b.n	80112d6 <__swbuf_r+0x1a>
 8011336:	4b09      	ldr	r3, [pc, #36]	; (801135c <__swbuf_r+0xa0>)
 8011338:	429c      	cmp	r4, r3
 801133a:	bf08      	it	eq
 801133c:	68ec      	ldreq	r4, [r5, #12]
 801133e:	e7ca      	b.n	80112d6 <__swbuf_r+0x1a>
 8011340:	4621      	mov	r1, r4
 8011342:	4628      	mov	r0, r5
 8011344:	f000 f81e 	bl	8011384 <__swsetup_r>
 8011348:	2800      	cmp	r0, #0
 801134a:	d0cb      	beq.n	80112e4 <__swbuf_r+0x28>
 801134c:	f04f 37ff 	mov.w	r7, #4294967295
 8011350:	e7ea      	b.n	8011328 <__swbuf_r+0x6c>
 8011352:	bf00      	nop
 8011354:	08011a48 	.word	0x08011a48
 8011358:	08011a68 	.word	0x08011a68
 801135c:	08011a28 	.word	0x08011a28

08011360 <_write_r>:
 8011360:	b538      	push	{r3, r4, r5, lr}
 8011362:	4d07      	ldr	r5, [pc, #28]	; (8011380 <_write_r+0x20>)
 8011364:	4604      	mov	r4, r0
 8011366:	4608      	mov	r0, r1
 8011368:	4611      	mov	r1, r2
 801136a:	2200      	movs	r2, #0
 801136c:	602a      	str	r2, [r5, #0]
 801136e:	461a      	mov	r2, r3
 8011370:	f7f0 fdb5 	bl	8001ede <_write>
 8011374:	1c43      	adds	r3, r0, #1
 8011376:	d102      	bne.n	801137e <_write_r+0x1e>
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	b103      	cbz	r3, 801137e <_write_r+0x1e>
 801137c:	6023      	str	r3, [r4, #0]
 801137e:	bd38      	pop	{r3, r4, r5, pc}
 8011380:	20004754 	.word	0x20004754

08011384 <__swsetup_r>:
 8011384:	4b32      	ldr	r3, [pc, #200]	; (8011450 <__swsetup_r+0xcc>)
 8011386:	b570      	push	{r4, r5, r6, lr}
 8011388:	681d      	ldr	r5, [r3, #0]
 801138a:	4606      	mov	r6, r0
 801138c:	460c      	mov	r4, r1
 801138e:	b125      	cbz	r5, 801139a <__swsetup_r+0x16>
 8011390:	69ab      	ldr	r3, [r5, #24]
 8011392:	b913      	cbnz	r3, 801139a <__swsetup_r+0x16>
 8011394:	4628      	mov	r0, r5
 8011396:	f7ff f865 	bl	8010464 <__sinit>
 801139a:	4b2e      	ldr	r3, [pc, #184]	; (8011454 <__swsetup_r+0xd0>)
 801139c:	429c      	cmp	r4, r3
 801139e:	d10f      	bne.n	80113c0 <__swsetup_r+0x3c>
 80113a0:	686c      	ldr	r4, [r5, #4]
 80113a2:	89a3      	ldrh	r3, [r4, #12]
 80113a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113a8:	0719      	lsls	r1, r3, #28
 80113aa:	d42c      	bmi.n	8011406 <__swsetup_r+0x82>
 80113ac:	06dd      	lsls	r5, r3, #27
 80113ae:	d411      	bmi.n	80113d4 <__swsetup_r+0x50>
 80113b0:	2309      	movs	r3, #9
 80113b2:	6033      	str	r3, [r6, #0]
 80113b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113b8:	81a3      	strh	r3, [r4, #12]
 80113ba:	f04f 30ff 	mov.w	r0, #4294967295
 80113be:	e03e      	b.n	801143e <__swsetup_r+0xba>
 80113c0:	4b25      	ldr	r3, [pc, #148]	; (8011458 <__swsetup_r+0xd4>)
 80113c2:	429c      	cmp	r4, r3
 80113c4:	d101      	bne.n	80113ca <__swsetup_r+0x46>
 80113c6:	68ac      	ldr	r4, [r5, #8]
 80113c8:	e7eb      	b.n	80113a2 <__swsetup_r+0x1e>
 80113ca:	4b24      	ldr	r3, [pc, #144]	; (801145c <__swsetup_r+0xd8>)
 80113cc:	429c      	cmp	r4, r3
 80113ce:	bf08      	it	eq
 80113d0:	68ec      	ldreq	r4, [r5, #12]
 80113d2:	e7e6      	b.n	80113a2 <__swsetup_r+0x1e>
 80113d4:	0758      	lsls	r0, r3, #29
 80113d6:	d512      	bpl.n	80113fe <__swsetup_r+0x7a>
 80113d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113da:	b141      	cbz	r1, 80113ee <__swsetup_r+0x6a>
 80113dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113e0:	4299      	cmp	r1, r3
 80113e2:	d002      	beq.n	80113ea <__swsetup_r+0x66>
 80113e4:	4630      	mov	r0, r6
 80113e6:	f7ff fc93 	bl	8010d10 <_free_r>
 80113ea:	2300      	movs	r3, #0
 80113ec:	6363      	str	r3, [r4, #52]	; 0x34
 80113ee:	89a3      	ldrh	r3, [r4, #12]
 80113f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113f4:	81a3      	strh	r3, [r4, #12]
 80113f6:	2300      	movs	r3, #0
 80113f8:	6063      	str	r3, [r4, #4]
 80113fa:	6923      	ldr	r3, [r4, #16]
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	89a3      	ldrh	r3, [r4, #12]
 8011400:	f043 0308 	orr.w	r3, r3, #8
 8011404:	81a3      	strh	r3, [r4, #12]
 8011406:	6923      	ldr	r3, [r4, #16]
 8011408:	b94b      	cbnz	r3, 801141e <__swsetup_r+0x9a>
 801140a:	89a3      	ldrh	r3, [r4, #12]
 801140c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011414:	d003      	beq.n	801141e <__swsetup_r+0x9a>
 8011416:	4621      	mov	r1, r4
 8011418:	4630      	mov	r0, r6
 801141a:	f000 f95b 	bl	80116d4 <__smakebuf_r>
 801141e:	89a0      	ldrh	r0, [r4, #12]
 8011420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011424:	f010 0301 	ands.w	r3, r0, #1
 8011428:	d00a      	beq.n	8011440 <__swsetup_r+0xbc>
 801142a:	2300      	movs	r3, #0
 801142c:	60a3      	str	r3, [r4, #8]
 801142e:	6963      	ldr	r3, [r4, #20]
 8011430:	425b      	negs	r3, r3
 8011432:	61a3      	str	r3, [r4, #24]
 8011434:	6923      	ldr	r3, [r4, #16]
 8011436:	b943      	cbnz	r3, 801144a <__swsetup_r+0xc6>
 8011438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801143c:	d1ba      	bne.n	80113b4 <__swsetup_r+0x30>
 801143e:	bd70      	pop	{r4, r5, r6, pc}
 8011440:	0781      	lsls	r1, r0, #30
 8011442:	bf58      	it	pl
 8011444:	6963      	ldrpl	r3, [r4, #20]
 8011446:	60a3      	str	r3, [r4, #8]
 8011448:	e7f4      	b.n	8011434 <__swsetup_r+0xb0>
 801144a:	2000      	movs	r0, #0
 801144c:	e7f7      	b.n	801143e <__swsetup_r+0xba>
 801144e:	bf00      	nop
 8011450:	2000285c 	.word	0x2000285c
 8011454:	08011a48 	.word	0x08011a48
 8011458:	08011a68 	.word	0x08011a68
 801145c:	08011a28 	.word	0x08011a28

08011460 <__assert_func>:
 8011460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011462:	4614      	mov	r4, r2
 8011464:	461a      	mov	r2, r3
 8011466:	4b09      	ldr	r3, [pc, #36]	; (801148c <__assert_func+0x2c>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4605      	mov	r5, r0
 801146c:	68d8      	ldr	r0, [r3, #12]
 801146e:	b14c      	cbz	r4, 8011484 <__assert_func+0x24>
 8011470:	4b07      	ldr	r3, [pc, #28]	; (8011490 <__assert_func+0x30>)
 8011472:	9100      	str	r1, [sp, #0]
 8011474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011478:	4906      	ldr	r1, [pc, #24]	; (8011494 <__assert_func+0x34>)
 801147a:	462b      	mov	r3, r5
 801147c:	f000 f8e0 	bl	8011640 <fiprintf>
 8011480:	f000 f9a5 	bl	80117ce <abort>
 8011484:	4b04      	ldr	r3, [pc, #16]	; (8011498 <__assert_func+0x38>)
 8011486:	461c      	mov	r4, r3
 8011488:	e7f3      	b.n	8011472 <__assert_func+0x12>
 801148a:	bf00      	nop
 801148c:	2000285c 	.word	0x2000285c
 8011490:	08011bf5 	.word	0x08011bf5
 8011494:	08011c02 	.word	0x08011c02
 8011498:	08011c30 	.word	0x08011c30

0801149c <_close_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	4d06      	ldr	r5, [pc, #24]	; (80114b8 <_close_r+0x1c>)
 80114a0:	2300      	movs	r3, #0
 80114a2:	4604      	mov	r4, r0
 80114a4:	4608      	mov	r0, r1
 80114a6:	602b      	str	r3, [r5, #0]
 80114a8:	f7f0 fd35 	bl	8001f16 <_close>
 80114ac:	1c43      	adds	r3, r0, #1
 80114ae:	d102      	bne.n	80114b6 <_close_r+0x1a>
 80114b0:	682b      	ldr	r3, [r5, #0]
 80114b2:	b103      	cbz	r3, 80114b6 <_close_r+0x1a>
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	20004754 	.word	0x20004754

080114bc <__sflush_r>:
 80114bc:	898a      	ldrh	r2, [r1, #12]
 80114be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c2:	4605      	mov	r5, r0
 80114c4:	0710      	lsls	r0, r2, #28
 80114c6:	460c      	mov	r4, r1
 80114c8:	d458      	bmi.n	801157c <__sflush_r+0xc0>
 80114ca:	684b      	ldr	r3, [r1, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dc05      	bgt.n	80114dc <__sflush_r+0x20>
 80114d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dc02      	bgt.n	80114dc <__sflush_r+0x20>
 80114d6:	2000      	movs	r0, #0
 80114d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114de:	2e00      	cmp	r6, #0
 80114e0:	d0f9      	beq.n	80114d6 <__sflush_r+0x1a>
 80114e2:	2300      	movs	r3, #0
 80114e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80114e8:	682f      	ldr	r7, [r5, #0]
 80114ea:	602b      	str	r3, [r5, #0]
 80114ec:	d032      	beq.n	8011554 <__sflush_r+0x98>
 80114ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	075a      	lsls	r2, r3, #29
 80114f4:	d505      	bpl.n	8011502 <__sflush_r+0x46>
 80114f6:	6863      	ldr	r3, [r4, #4]
 80114f8:	1ac0      	subs	r0, r0, r3
 80114fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114fc:	b10b      	cbz	r3, 8011502 <__sflush_r+0x46>
 80114fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011500:	1ac0      	subs	r0, r0, r3
 8011502:	2300      	movs	r3, #0
 8011504:	4602      	mov	r2, r0
 8011506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011508:	6a21      	ldr	r1, [r4, #32]
 801150a:	4628      	mov	r0, r5
 801150c:	47b0      	blx	r6
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	d106      	bne.n	8011522 <__sflush_r+0x66>
 8011514:	6829      	ldr	r1, [r5, #0]
 8011516:	291d      	cmp	r1, #29
 8011518:	d82c      	bhi.n	8011574 <__sflush_r+0xb8>
 801151a:	4a2a      	ldr	r2, [pc, #168]	; (80115c4 <__sflush_r+0x108>)
 801151c:	40ca      	lsrs	r2, r1
 801151e:	07d6      	lsls	r6, r2, #31
 8011520:	d528      	bpl.n	8011574 <__sflush_r+0xb8>
 8011522:	2200      	movs	r2, #0
 8011524:	6062      	str	r2, [r4, #4]
 8011526:	04d9      	lsls	r1, r3, #19
 8011528:	6922      	ldr	r2, [r4, #16]
 801152a:	6022      	str	r2, [r4, #0]
 801152c:	d504      	bpl.n	8011538 <__sflush_r+0x7c>
 801152e:	1c42      	adds	r2, r0, #1
 8011530:	d101      	bne.n	8011536 <__sflush_r+0x7a>
 8011532:	682b      	ldr	r3, [r5, #0]
 8011534:	b903      	cbnz	r3, 8011538 <__sflush_r+0x7c>
 8011536:	6560      	str	r0, [r4, #84]	; 0x54
 8011538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801153a:	602f      	str	r7, [r5, #0]
 801153c:	2900      	cmp	r1, #0
 801153e:	d0ca      	beq.n	80114d6 <__sflush_r+0x1a>
 8011540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011544:	4299      	cmp	r1, r3
 8011546:	d002      	beq.n	801154e <__sflush_r+0x92>
 8011548:	4628      	mov	r0, r5
 801154a:	f7ff fbe1 	bl	8010d10 <_free_r>
 801154e:	2000      	movs	r0, #0
 8011550:	6360      	str	r0, [r4, #52]	; 0x34
 8011552:	e7c1      	b.n	80114d8 <__sflush_r+0x1c>
 8011554:	6a21      	ldr	r1, [r4, #32]
 8011556:	2301      	movs	r3, #1
 8011558:	4628      	mov	r0, r5
 801155a:	47b0      	blx	r6
 801155c:	1c41      	adds	r1, r0, #1
 801155e:	d1c7      	bne.n	80114f0 <__sflush_r+0x34>
 8011560:	682b      	ldr	r3, [r5, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d0c4      	beq.n	80114f0 <__sflush_r+0x34>
 8011566:	2b1d      	cmp	r3, #29
 8011568:	d001      	beq.n	801156e <__sflush_r+0xb2>
 801156a:	2b16      	cmp	r3, #22
 801156c:	d101      	bne.n	8011572 <__sflush_r+0xb6>
 801156e:	602f      	str	r7, [r5, #0]
 8011570:	e7b1      	b.n	80114d6 <__sflush_r+0x1a>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	e7ad      	b.n	80114d8 <__sflush_r+0x1c>
 801157c:	690f      	ldr	r7, [r1, #16]
 801157e:	2f00      	cmp	r7, #0
 8011580:	d0a9      	beq.n	80114d6 <__sflush_r+0x1a>
 8011582:	0793      	lsls	r3, r2, #30
 8011584:	680e      	ldr	r6, [r1, #0]
 8011586:	bf08      	it	eq
 8011588:	694b      	ldreq	r3, [r1, #20]
 801158a:	600f      	str	r7, [r1, #0]
 801158c:	bf18      	it	ne
 801158e:	2300      	movne	r3, #0
 8011590:	eba6 0807 	sub.w	r8, r6, r7
 8011594:	608b      	str	r3, [r1, #8]
 8011596:	f1b8 0f00 	cmp.w	r8, #0
 801159a:	dd9c      	ble.n	80114d6 <__sflush_r+0x1a>
 801159c:	6a21      	ldr	r1, [r4, #32]
 801159e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80115a0:	4643      	mov	r3, r8
 80115a2:	463a      	mov	r2, r7
 80115a4:	4628      	mov	r0, r5
 80115a6:	47b0      	blx	r6
 80115a8:	2800      	cmp	r0, #0
 80115aa:	dc06      	bgt.n	80115ba <__sflush_r+0xfe>
 80115ac:	89a3      	ldrh	r3, [r4, #12]
 80115ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115b2:	81a3      	strh	r3, [r4, #12]
 80115b4:	f04f 30ff 	mov.w	r0, #4294967295
 80115b8:	e78e      	b.n	80114d8 <__sflush_r+0x1c>
 80115ba:	4407      	add	r7, r0
 80115bc:	eba8 0800 	sub.w	r8, r8, r0
 80115c0:	e7e9      	b.n	8011596 <__sflush_r+0xda>
 80115c2:	bf00      	nop
 80115c4:	20400001 	.word	0x20400001

080115c8 <_fflush_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	690b      	ldr	r3, [r1, #16]
 80115cc:	4605      	mov	r5, r0
 80115ce:	460c      	mov	r4, r1
 80115d0:	b913      	cbnz	r3, 80115d8 <_fflush_r+0x10>
 80115d2:	2500      	movs	r5, #0
 80115d4:	4628      	mov	r0, r5
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	b118      	cbz	r0, 80115e2 <_fflush_r+0x1a>
 80115da:	6983      	ldr	r3, [r0, #24]
 80115dc:	b90b      	cbnz	r3, 80115e2 <_fflush_r+0x1a>
 80115de:	f7fe ff41 	bl	8010464 <__sinit>
 80115e2:	4b14      	ldr	r3, [pc, #80]	; (8011634 <_fflush_r+0x6c>)
 80115e4:	429c      	cmp	r4, r3
 80115e6:	d11b      	bne.n	8011620 <_fflush_r+0x58>
 80115e8:	686c      	ldr	r4, [r5, #4]
 80115ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d0ef      	beq.n	80115d2 <_fflush_r+0xa>
 80115f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80115f4:	07d0      	lsls	r0, r2, #31
 80115f6:	d404      	bmi.n	8011602 <_fflush_r+0x3a>
 80115f8:	0599      	lsls	r1, r3, #22
 80115fa:	d402      	bmi.n	8011602 <_fflush_r+0x3a>
 80115fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115fe:	f7fe ffd4 	bl	80105aa <__retarget_lock_acquire_recursive>
 8011602:	4628      	mov	r0, r5
 8011604:	4621      	mov	r1, r4
 8011606:	f7ff ff59 	bl	80114bc <__sflush_r>
 801160a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801160c:	07da      	lsls	r2, r3, #31
 801160e:	4605      	mov	r5, r0
 8011610:	d4e0      	bmi.n	80115d4 <_fflush_r+0xc>
 8011612:	89a3      	ldrh	r3, [r4, #12]
 8011614:	059b      	lsls	r3, r3, #22
 8011616:	d4dd      	bmi.n	80115d4 <_fflush_r+0xc>
 8011618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801161a:	f7fe ffc7 	bl	80105ac <__retarget_lock_release_recursive>
 801161e:	e7d9      	b.n	80115d4 <_fflush_r+0xc>
 8011620:	4b05      	ldr	r3, [pc, #20]	; (8011638 <_fflush_r+0x70>)
 8011622:	429c      	cmp	r4, r3
 8011624:	d101      	bne.n	801162a <_fflush_r+0x62>
 8011626:	68ac      	ldr	r4, [r5, #8]
 8011628:	e7df      	b.n	80115ea <_fflush_r+0x22>
 801162a:	4b04      	ldr	r3, [pc, #16]	; (801163c <_fflush_r+0x74>)
 801162c:	429c      	cmp	r4, r3
 801162e:	bf08      	it	eq
 8011630:	68ec      	ldreq	r4, [r5, #12]
 8011632:	e7da      	b.n	80115ea <_fflush_r+0x22>
 8011634:	08011a48 	.word	0x08011a48
 8011638:	08011a68 	.word	0x08011a68
 801163c:	08011a28 	.word	0x08011a28

08011640 <fiprintf>:
 8011640:	b40e      	push	{r1, r2, r3}
 8011642:	b503      	push	{r0, r1, lr}
 8011644:	4601      	mov	r1, r0
 8011646:	ab03      	add	r3, sp, #12
 8011648:	4805      	ldr	r0, [pc, #20]	; (8011660 <fiprintf+0x20>)
 801164a:	f853 2b04 	ldr.w	r2, [r3], #4
 801164e:	6800      	ldr	r0, [r0, #0]
 8011650:	9301      	str	r3, [sp, #4]
 8011652:	f7ff fc67 	bl	8010f24 <_vfiprintf_r>
 8011656:	b002      	add	sp, #8
 8011658:	f85d eb04 	ldr.w	lr, [sp], #4
 801165c:	b003      	add	sp, #12
 801165e:	4770      	bx	lr
 8011660:	2000285c 	.word	0x2000285c

08011664 <_lseek_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4d07      	ldr	r5, [pc, #28]	; (8011684 <_lseek_r+0x20>)
 8011668:	4604      	mov	r4, r0
 801166a:	4608      	mov	r0, r1
 801166c:	4611      	mov	r1, r2
 801166e:	2200      	movs	r2, #0
 8011670:	602a      	str	r2, [r5, #0]
 8011672:	461a      	mov	r2, r3
 8011674:	f7f0 fc76 	bl	8001f64 <_lseek>
 8011678:	1c43      	adds	r3, r0, #1
 801167a:	d102      	bne.n	8011682 <_lseek_r+0x1e>
 801167c:	682b      	ldr	r3, [r5, #0]
 801167e:	b103      	cbz	r3, 8011682 <_lseek_r+0x1e>
 8011680:	6023      	str	r3, [r4, #0]
 8011682:	bd38      	pop	{r3, r4, r5, pc}
 8011684:	20004754 	.word	0x20004754

08011688 <__swhatbuf_r>:
 8011688:	b570      	push	{r4, r5, r6, lr}
 801168a:	460e      	mov	r6, r1
 801168c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011690:	2900      	cmp	r1, #0
 8011692:	b096      	sub	sp, #88	; 0x58
 8011694:	4614      	mov	r4, r2
 8011696:	461d      	mov	r5, r3
 8011698:	da08      	bge.n	80116ac <__swhatbuf_r+0x24>
 801169a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801169e:	2200      	movs	r2, #0
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	061a      	lsls	r2, r3, #24
 80116a4:	d410      	bmi.n	80116c8 <__swhatbuf_r+0x40>
 80116a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116aa:	e00e      	b.n	80116ca <__swhatbuf_r+0x42>
 80116ac:	466a      	mov	r2, sp
 80116ae:	f000 f895 	bl	80117dc <_fstat_r>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	dbf1      	blt.n	801169a <__swhatbuf_r+0x12>
 80116b6:	9a01      	ldr	r2, [sp, #4]
 80116b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80116c0:	425a      	negs	r2, r3
 80116c2:	415a      	adcs	r2, r3
 80116c4:	602a      	str	r2, [r5, #0]
 80116c6:	e7ee      	b.n	80116a6 <__swhatbuf_r+0x1e>
 80116c8:	2340      	movs	r3, #64	; 0x40
 80116ca:	2000      	movs	r0, #0
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	b016      	add	sp, #88	; 0x58
 80116d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080116d4 <__smakebuf_r>:
 80116d4:	898b      	ldrh	r3, [r1, #12]
 80116d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116d8:	079d      	lsls	r5, r3, #30
 80116da:	4606      	mov	r6, r0
 80116dc:	460c      	mov	r4, r1
 80116de:	d507      	bpl.n	80116f0 <__smakebuf_r+0x1c>
 80116e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	6123      	str	r3, [r4, #16]
 80116e8:	2301      	movs	r3, #1
 80116ea:	6163      	str	r3, [r4, #20]
 80116ec:	b002      	add	sp, #8
 80116ee:	bd70      	pop	{r4, r5, r6, pc}
 80116f0:	ab01      	add	r3, sp, #4
 80116f2:	466a      	mov	r2, sp
 80116f4:	f7ff ffc8 	bl	8011688 <__swhatbuf_r>
 80116f8:	9900      	ldr	r1, [sp, #0]
 80116fa:	4605      	mov	r5, r0
 80116fc:	4630      	mov	r0, r6
 80116fe:	f7ff fb73 	bl	8010de8 <_malloc_r>
 8011702:	b948      	cbnz	r0, 8011718 <__smakebuf_r+0x44>
 8011704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011708:	059a      	lsls	r2, r3, #22
 801170a:	d4ef      	bmi.n	80116ec <__smakebuf_r+0x18>
 801170c:	f023 0303 	bic.w	r3, r3, #3
 8011710:	f043 0302 	orr.w	r3, r3, #2
 8011714:	81a3      	strh	r3, [r4, #12]
 8011716:	e7e3      	b.n	80116e0 <__smakebuf_r+0xc>
 8011718:	4b0d      	ldr	r3, [pc, #52]	; (8011750 <__smakebuf_r+0x7c>)
 801171a:	62b3      	str	r3, [r6, #40]	; 0x28
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	6020      	str	r0, [r4, #0]
 8011720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011724:	81a3      	strh	r3, [r4, #12]
 8011726:	9b00      	ldr	r3, [sp, #0]
 8011728:	6163      	str	r3, [r4, #20]
 801172a:	9b01      	ldr	r3, [sp, #4]
 801172c:	6120      	str	r0, [r4, #16]
 801172e:	b15b      	cbz	r3, 8011748 <__smakebuf_r+0x74>
 8011730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011734:	4630      	mov	r0, r6
 8011736:	f000 f863 	bl	8011800 <_isatty_r>
 801173a:	b128      	cbz	r0, 8011748 <__smakebuf_r+0x74>
 801173c:	89a3      	ldrh	r3, [r4, #12]
 801173e:	f023 0303 	bic.w	r3, r3, #3
 8011742:	f043 0301 	orr.w	r3, r3, #1
 8011746:	81a3      	strh	r3, [r4, #12]
 8011748:	89a0      	ldrh	r0, [r4, #12]
 801174a:	4305      	orrs	r5, r0
 801174c:	81a5      	strh	r5, [r4, #12]
 801174e:	e7cd      	b.n	80116ec <__smakebuf_r+0x18>
 8011750:	080103fd 	.word	0x080103fd

08011754 <__ascii_mbtowc>:
 8011754:	b082      	sub	sp, #8
 8011756:	b901      	cbnz	r1, 801175a <__ascii_mbtowc+0x6>
 8011758:	a901      	add	r1, sp, #4
 801175a:	b142      	cbz	r2, 801176e <__ascii_mbtowc+0x1a>
 801175c:	b14b      	cbz	r3, 8011772 <__ascii_mbtowc+0x1e>
 801175e:	7813      	ldrb	r3, [r2, #0]
 8011760:	600b      	str	r3, [r1, #0]
 8011762:	7812      	ldrb	r2, [r2, #0]
 8011764:	1e10      	subs	r0, r2, #0
 8011766:	bf18      	it	ne
 8011768:	2001      	movne	r0, #1
 801176a:	b002      	add	sp, #8
 801176c:	4770      	bx	lr
 801176e:	4610      	mov	r0, r2
 8011770:	e7fb      	b.n	801176a <__ascii_mbtowc+0x16>
 8011772:	f06f 0001 	mvn.w	r0, #1
 8011776:	e7f8      	b.n	801176a <__ascii_mbtowc+0x16>

08011778 <__malloc_lock>:
 8011778:	4801      	ldr	r0, [pc, #4]	; (8011780 <__malloc_lock+0x8>)
 801177a:	f7fe bf16 	b.w	80105aa <__retarget_lock_acquire_recursive>
 801177e:	bf00      	nop
 8011780:	20004748 	.word	0x20004748

08011784 <__malloc_unlock>:
 8011784:	4801      	ldr	r0, [pc, #4]	; (801178c <__malloc_unlock+0x8>)
 8011786:	f7fe bf11 	b.w	80105ac <__retarget_lock_release_recursive>
 801178a:	bf00      	nop
 801178c:	20004748 	.word	0x20004748

08011790 <_read_r>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	4d07      	ldr	r5, [pc, #28]	; (80117b0 <_read_r+0x20>)
 8011794:	4604      	mov	r4, r0
 8011796:	4608      	mov	r0, r1
 8011798:	4611      	mov	r1, r2
 801179a:	2200      	movs	r2, #0
 801179c:	602a      	str	r2, [r5, #0]
 801179e:	461a      	mov	r2, r3
 80117a0:	f7f0 fb80 	bl	8001ea4 <_read>
 80117a4:	1c43      	adds	r3, r0, #1
 80117a6:	d102      	bne.n	80117ae <_read_r+0x1e>
 80117a8:	682b      	ldr	r3, [r5, #0]
 80117aa:	b103      	cbz	r3, 80117ae <_read_r+0x1e>
 80117ac:	6023      	str	r3, [r4, #0]
 80117ae:	bd38      	pop	{r3, r4, r5, pc}
 80117b0:	20004754 	.word	0x20004754

080117b4 <__ascii_wctomb>:
 80117b4:	b149      	cbz	r1, 80117ca <__ascii_wctomb+0x16>
 80117b6:	2aff      	cmp	r2, #255	; 0xff
 80117b8:	bf85      	ittet	hi
 80117ba:	238a      	movhi	r3, #138	; 0x8a
 80117bc:	6003      	strhi	r3, [r0, #0]
 80117be:	700a      	strbls	r2, [r1, #0]
 80117c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80117c4:	bf98      	it	ls
 80117c6:	2001      	movls	r0, #1
 80117c8:	4770      	bx	lr
 80117ca:	4608      	mov	r0, r1
 80117cc:	4770      	bx	lr

080117ce <abort>:
 80117ce:	b508      	push	{r3, lr}
 80117d0:	2006      	movs	r0, #6
 80117d2:	f000 f84d 	bl	8011870 <raise>
 80117d6:	2001      	movs	r0, #1
 80117d8:	f7f0 fb5a 	bl	8001e90 <_exit>

080117dc <_fstat_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4d07      	ldr	r5, [pc, #28]	; (80117fc <_fstat_r+0x20>)
 80117e0:	2300      	movs	r3, #0
 80117e2:	4604      	mov	r4, r0
 80117e4:	4608      	mov	r0, r1
 80117e6:	4611      	mov	r1, r2
 80117e8:	602b      	str	r3, [r5, #0]
 80117ea:	f7f0 fba0 	bl	8001f2e <_fstat>
 80117ee:	1c43      	adds	r3, r0, #1
 80117f0:	d102      	bne.n	80117f8 <_fstat_r+0x1c>
 80117f2:	682b      	ldr	r3, [r5, #0]
 80117f4:	b103      	cbz	r3, 80117f8 <_fstat_r+0x1c>
 80117f6:	6023      	str	r3, [r4, #0]
 80117f8:	bd38      	pop	{r3, r4, r5, pc}
 80117fa:	bf00      	nop
 80117fc:	20004754 	.word	0x20004754

08011800 <_isatty_r>:
 8011800:	b538      	push	{r3, r4, r5, lr}
 8011802:	4d06      	ldr	r5, [pc, #24]	; (801181c <_isatty_r+0x1c>)
 8011804:	2300      	movs	r3, #0
 8011806:	4604      	mov	r4, r0
 8011808:	4608      	mov	r0, r1
 801180a:	602b      	str	r3, [r5, #0]
 801180c:	f7f0 fb9f 	bl	8001f4e <_isatty>
 8011810:	1c43      	adds	r3, r0, #1
 8011812:	d102      	bne.n	801181a <_isatty_r+0x1a>
 8011814:	682b      	ldr	r3, [r5, #0]
 8011816:	b103      	cbz	r3, 801181a <_isatty_r+0x1a>
 8011818:	6023      	str	r3, [r4, #0]
 801181a:	bd38      	pop	{r3, r4, r5, pc}
 801181c:	20004754 	.word	0x20004754

08011820 <_raise_r>:
 8011820:	291f      	cmp	r1, #31
 8011822:	b538      	push	{r3, r4, r5, lr}
 8011824:	4604      	mov	r4, r0
 8011826:	460d      	mov	r5, r1
 8011828:	d904      	bls.n	8011834 <_raise_r+0x14>
 801182a:	2316      	movs	r3, #22
 801182c:	6003      	str	r3, [r0, #0]
 801182e:	f04f 30ff 	mov.w	r0, #4294967295
 8011832:	bd38      	pop	{r3, r4, r5, pc}
 8011834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011836:	b112      	cbz	r2, 801183e <_raise_r+0x1e>
 8011838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801183c:	b94b      	cbnz	r3, 8011852 <_raise_r+0x32>
 801183e:	4620      	mov	r0, r4
 8011840:	f000 f830 	bl	80118a4 <_getpid_r>
 8011844:	462a      	mov	r2, r5
 8011846:	4601      	mov	r1, r0
 8011848:	4620      	mov	r0, r4
 801184a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801184e:	f000 b817 	b.w	8011880 <_kill_r>
 8011852:	2b01      	cmp	r3, #1
 8011854:	d00a      	beq.n	801186c <_raise_r+0x4c>
 8011856:	1c59      	adds	r1, r3, #1
 8011858:	d103      	bne.n	8011862 <_raise_r+0x42>
 801185a:	2316      	movs	r3, #22
 801185c:	6003      	str	r3, [r0, #0]
 801185e:	2001      	movs	r0, #1
 8011860:	e7e7      	b.n	8011832 <_raise_r+0x12>
 8011862:	2400      	movs	r4, #0
 8011864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011868:	4628      	mov	r0, r5
 801186a:	4798      	blx	r3
 801186c:	2000      	movs	r0, #0
 801186e:	e7e0      	b.n	8011832 <_raise_r+0x12>

08011870 <raise>:
 8011870:	4b02      	ldr	r3, [pc, #8]	; (801187c <raise+0xc>)
 8011872:	4601      	mov	r1, r0
 8011874:	6818      	ldr	r0, [r3, #0]
 8011876:	f7ff bfd3 	b.w	8011820 <_raise_r>
 801187a:	bf00      	nop
 801187c:	2000285c 	.word	0x2000285c

08011880 <_kill_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d07      	ldr	r5, [pc, #28]	; (80118a0 <_kill_r+0x20>)
 8011884:	2300      	movs	r3, #0
 8011886:	4604      	mov	r4, r0
 8011888:	4608      	mov	r0, r1
 801188a:	4611      	mov	r1, r2
 801188c:	602b      	str	r3, [r5, #0]
 801188e:	f7f0 faef 	bl	8001e70 <_kill>
 8011892:	1c43      	adds	r3, r0, #1
 8011894:	d102      	bne.n	801189c <_kill_r+0x1c>
 8011896:	682b      	ldr	r3, [r5, #0]
 8011898:	b103      	cbz	r3, 801189c <_kill_r+0x1c>
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	bd38      	pop	{r3, r4, r5, pc}
 801189e:	bf00      	nop
 80118a0:	20004754 	.word	0x20004754

080118a4 <_getpid_r>:
 80118a4:	f7f0 badc 	b.w	8001e60 <_getpid>

080118a8 <_init>:
 80118a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118aa:	bf00      	nop
 80118ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ae:	bc08      	pop	{r3}
 80118b0:	469e      	mov	lr, r3
 80118b2:	4770      	bx	lr

080118b4 <_fini>:
 80118b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b6:	bf00      	nop
 80118b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ba:	bc08      	pop	{r3}
 80118bc:	469e      	mov	lr, r3
 80118be:	4770      	bx	lr
